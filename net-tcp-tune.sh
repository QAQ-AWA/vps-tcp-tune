#!/bin/bash
#=============================================================================
# BBR v3 ÁªàÊûÅ‰ºòÂåñËÑöÊú¨ - ËûçÂêàÁâà
# ÂäüËÉΩÔºöÁªìÂêà XanMod ÂÆòÊñπÂÜÖÊ†∏ÁöÑÁ®≥ÂÆöÊÄß + ‰∏ì‰∏öÈòüÂàóÁÆóÊ≥ïË∞É‰ºò
# ÁâπÁÇπÔºöÂÆâÂÖ®ÊÄß + ÊÄßËÉΩ Âèå‰ºòÂåñ
# ÁâàÊú¨Ôºö2.0 Ultimate Edition
#=============================================================================

#=============================================================================
# üìã Êé®ËçêÈÖçÁΩÆÊñπÊ°àÔºàÂü∫‰∫éÂÆûÊµã‰ºòÂåñÔºâ
#=============================================================================
# 
# üí° ÊµãËØïÁéØÂ¢ÉÔºöÁªèËøáÊú¨‰∫∫ÂçÅÂá†‰∫åÂçÅÂá†Âè∞‰∏çÂêåÊúçÂä°Âô®ÁöÑÊµãËØï
#    ÂåÖÊã¨ÈÖ∑Èõ™‰∫ëÂåó‰∫¨9929Á≠âÂ§ö‰∏™ËäÇÁÇπÁöÑÂÆûÊµãÈ™åËØÅ
# 
# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# 
# ‚≠ê È¶ñÈÄâÊñπÊ°àÔºàÊé®ËçêÔºâÔºö
#    Ê≠•È™§1 ‚Üí ÊâßË°åËèúÂçïÈÄâÈ°π 1ÔºöBBR v3 ÂÜÖÊ†∏ÂÆâË£Ö
#    Ê≠•È™§2 ‚Üí ÊâßË°åËèúÂçïÈÄâÈ°π 2ÔºöBBR Áõ¥Ëøû/ËêΩÂú∞‰ºòÂåñÔºàÊô∫ËÉΩÂ∏¶ÂÆΩÊ£ÄÊµãÔºâ
#            ÈÄâÊã©Â≠êÈÄâÈ°π 1 ËøõË°åËá™Âä®Ê£ÄÊµã
# 
# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# 
# üîß Ê¨°ÈÄâÊñπÊ°àÔºàÂ§áÁî®ÔºâÔºö
#    Ê≠•È™§1 ‚Üí ÊâßË°åËèúÂçïÈÄâÈ°π 1ÔºöBBR v3 ÂÜÖÊ†∏ÂÆâË£Ö
#    Ê≠•È™§2 ‚Üí ÊâßË°åËèúÂçïÈÄâÈ°π 3ÔºöNSËÆ∫ÂùõCAKEË∞É‰ºò
#    Ê≠•È™§3 ‚Üí ÊâßË°åËèúÂçïÈÄâÈ°π 4ÔºöÁßëÊäÄlionÈ´òÊÄßËÉΩÊ®°ÂºèÂÜÖÊ†∏ÂèÇÊï∞‰ºòÂåñ
#            ÈÄâÊã©Á¨¨‰∏Ä‰∏™ÈÄâÈ°π
# 
# ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
# 
#=============================================================================

# È¢úËâ≤ÂÆö‰πâ
gl_hong='\033[31m'
gl_lv='\033[32m'
gl_huang='\033[33m'
gl_bai='\033[0m'
gl_kjlan='\033[96m'
gl_zi='\033[35m'

# Ë∞ÉËØï‰∏éÂÆâÂÖ®ÈÄâÈ°π
if [ "${VTT_DEBUG:-0}" = "1" ]; then
    set -x
    echo -e "${gl_huang}Â∑≤ÂêØÁî®Ë∞ÉËØïÊ®°Âºè (VTT_DEBUG=1)${gl_bai}"
fi
: "${VTT_SKIP_SHA:=0}"

# ‰ªìÂ∫ì‰∏é‰∏ãËΩΩÈÖçÁΩÆ
DEFAULT_REPO_OWNER="QAQ-AWA"
DEFAULT_REPO_NAME="vps-tcp-tune"
DEFAULT_REPO_BRANCH="main"

REPO_OWNER="${VTT_REPO_OWNER:-${DEFAULT_REPO_OWNER}}"
REPO_NAME="${VTT_REPO_NAME:-${DEFAULT_REPO_NAME}}"
REPO_BRANCH="${VTT_REPO_BRANCH:-${DEFAULT_REPO_BRANCH}}"

BASE_GITHUB_REPO="https://github.com/${REPO_OWNER}/${REPO_NAME}"
BASE_RAW_GITHUB="https://raw.githubusercontent.com/${REPO_OWNER}/${REPO_NAME}/${REPO_BRANCH}"
BASE_RELEASES="${BASE_GITHUB_REPO}/releases/download"
CDN_JSDELIVR_RAW="https://cdn.jsdelivr.net/gh/${REPO_OWNER}/${REPO_NAME}@${REPO_BRANCH}"

USE_LEGACY_LINKS="${VTT_USE_LEGACY_LINKS:-0}"
REPO_INFO_PRINTED=0

# GitHub ‰ª£ÁêÜËÆæÁΩÆ
gh_proxy="https://"

# ÈÖçÁΩÆÊñá‰ª∂Ë∑ØÂæÑÔºà‰ΩøÁî®Áã¨Á´ãÊñá‰ª∂Ôºå‰∏çÁ†¥ÂùèÁ≥ªÁªüÈÖçÁΩÆÔºâ
SYSCTL_CONF="/etc/sysctl.d/99-bbr-ultimate.conf"

# ÊúÄËøë‰∏ÄÊ¨°ÊàêÂäü‰∏ãËΩΩÁöÑÂú∞ÂùÄ
LAST_DOWNLOAD_URL=""
# ARM64 ÂÆâË£ÖÊµÅÁ®ãÁöÑÊúÄÂêéÈîôËØØ‰ø°ÊÅØ
ARM64_LAST_ERROR=""

#=============================================================================
# Â∑•ÂÖ∑ÂáΩÊï∞
#=============================================================================

check_root() {
    if [ "$EUID" -ne 0 ]; then
        echo -e "${gl_hong}ÈîôËØØ: ${gl_bai}Ê≠§ËÑöÊú¨ÈúÄË¶Å root ÊùÉÈôêËøêË°åÔºÅ"
        echo "ËØ∑‰ΩøÁî®: sudo bash $0"
        exit 1
    fi
}

break_end() {
    echo -e "${gl_lv}Êìç‰ΩúÂÆåÊàê${gl_bai}"
    echo "Êåâ‰ªªÊÑèÈîÆÁªßÁª≠..."
    read -n 1 -s -r -p ""
    echo ""
}

clean_sysctl_conf() {
    # Â§á‰ªΩ‰∏ªÈÖçÁΩÆÊñá‰ª∂
    if [ -f /etc/sysctl.conf ] && ! [ -f /etc/sysctl.conf.bak.original ]; then
        cp /etc/sysctl.conf /etc/sysctl.conf.bak.original
    fi
    
    # Ê≥®ÈáäÊâÄÊúâÂÜ≤Á™ÅÂèÇÊï∞
    sed -i '/^net.core.rmem_max/s/^/# /' /etc/sysctl.conf 2>/dev/null
    sed -i '/^net.core.wmem_max/s/^/# /' /etc/sysctl.conf 2>/dev/null
    sed -i '/^net.ipv4.tcp_rmem/s/^/# /' /etc/sysctl.conf 2>/dev/null
    sed -i '/^net.ipv4.tcp_wmem/s/^/# /' /etc/sysctl.conf 2>/dev/null
    sed -i '/^net.core.default_qdisc/s/^/# /' /etc/sysctl.conf 2>/dev/null
    sed -i '/^net.ipv4.tcp_congestion_control/s/^/# /' /etc/sysctl.conf 2>/dev/null
}

install_package() {
    local packages=("$@")
    local missing_packages=()
    local os_release="/etc/os-release"
    local os_id=""
    local os_like=""
    local pkg_manager=""
    local update_cmd=()
    local install_cmd=()

    for package in "${packages[@]}"; do
        if ! command -v "$package" &>/dev/null; then
            missing_packages+=("$package")
        fi
    done

    if [ "${#missing_packages[@]}" -eq 0 ]; then
        return 0
    fi

    if [ -r "$os_release" ]; then
        # shellcheck disable=SC1091
        . "$os_release"
        os_id="${ID,,}"
        os_like="${ID_LIKE,,}"
    fi

    local detection="${os_id} ${os_like}"

    if [[ "$detection" =~ (debian|ubuntu) ]]; then
        pkg_manager="apt"
        update_cmd=(apt update -y)
        install_cmd=(apt install -y)
    elif [[ "$detection" =~ (rhel|centos|fedora|rocky|alma|redhat) ]]; then
        if command -v dnf &>/dev/null; then
            pkg_manager="dnf"
            update_cmd=(dnf makecache)
            install_cmd=(dnf install -y)
        elif command -v yum &>/dev/null; then
            pkg_manager="yum"
            update_cmd=(yum makecache)
            install_cmd=(yum install -y)
        else
            echo "ÈîôËØØ: Êú™ÊâæÂà∞ÂèØÁî®ÁöÑ RHEL Á≥ªÂåÖÁÆ°ÁêÜÂô® (dnf Êàñ yum)" >&2
            return 1
        fi
    else
        echo "ÈîôËØØ: Êú™ÊîØÊåÅÁöÑ Linux ÂèëË°åÁâàÔºåÊó†Ê≥ïËá™Âä®ÂÆâË£Ö‰æùËµñ„ÄÇËØ∑ÊâãÂä®ÂÆâË£Ö: ${missing_packages[*]}" >&2
        return 1
    fi

    if [ ${#update_cmd[@]} -gt 0 ]; then
        echo -e "${gl_huang}Ê≠£Âú®Êõ¥Êñ∞ËΩØ‰ª∂‰ªìÂ∫ì...${gl_bai}"
        if ! "${update_cmd[@]}"; then
            echo "ÈîôËØØ: ‰ΩøÁî® ${pkg_manager} Êõ¥Êñ∞ËΩØ‰ª∂‰ªìÂ∫ìÂ§±Ë¥•„ÄÇ" >&2
            return 1
        fi
    fi

    for package in "${missing_packages[@]}"; do
        echo -e "${gl_huang}Ê≠£Âú®ÂÆâË£Ö $package...${gl_bai}"
        if ! "${install_cmd[@]}" "$package"; then
            echo "ÈîôËØØ: ${pkg_manager} ÂÆâË£Ö $package Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•‰∏äÊñπËæìÂá∫‰ø°ÊÅØ„ÄÇ" >&2
            return 1
        fi
    done
}

is_interactive_shell() {
    [ -t 0 ] && [ -t 1 ]
}

download_with_retry() {
    local url="$1"
    local output="$2"
    local retries="${3:-3}"
    local retry_delay="${4:-2}"
    local connect_timeout="${5:-10}"
    local max_time="${6:-120}"
    local status=1

    if command -v curl &>/dev/null; then
        if curl -fsSL --retry "$retries" --retry-delay "$retry_delay" --connect-timeout "$connect_timeout" --max-time "$max_time" -o "$output" "$url"; then
            status=0
        fi
    fi

    if [ $status -ne 0 ] && command -v wget &>/dev/null; then
        local tries=$((retries + 1))
        if wget -q --tries="$tries" --waitretry="$retry_delay" --timeout="$max_time" --connect-timeout="$connect_timeout" -O "$output" "$url"; then
            status=0
        fi
    fi

    if [ $status -ne 0 ]; then
        rm -f "$output"
    fi

    return $status
}

download_from_candidates() {
    local output="$1"
    shift

    rm -f "$output"

    local idx=1
    for candidate in "$@"; do
        [ -z "$candidate" ] && continue
        echo -e "${gl_kjlan}‰∏ãËΩΩÂÄôÈÄâ #${idx}:${gl_bai} $candidate"
        if download_with_retry "$candidate" "$output"; then
            LAST_DOWNLOAD_URL="$candidate"
            echo -e "${gl_lv}‰∏ãËΩΩÊàêÂäü:${gl_bai} $candidate"
            return 0
        fi
        echo -e "${gl_huang}‰∏ãËΩΩÂ§±Ë¥•:${gl_bai} $candidate"
        idx=$((idx + 1))
    done

    rm -f "$output"
    return 1
}

download_with_fallback() {
    local relative_path="$1"
    local output="$2"
    shift 2
    local -a extra_candidates=("$@")
    local primary="${BASE_RAW_GITHUB}/${relative_path}"
    local cdn="${CDN_JSDELIVR_RAW}/${relative_path}"
    local -a candidates=("$primary" "$cdn")
    candidates+=("${extra_candidates[@]}")
    local -a labels=("Ëá™Êúâ‰ªìÂ∫ì‰∏ªÊ∫ê" "Ëá™Êúâ‰ªìÂ∫ì CDN ÂõûÈÄÄ")

    print_repo_info_once
    rm -f "$output"

    for idx in "${!candidates[@]}"; do
        local url="${candidates[$idx]}"
        [ -z "$url" ] && continue
        local label="${labels[$idx]:-Â§áÁî®ËµÑÊ∫ê}"
        echo -e "${gl_kjlan}${label}:${gl_bai} $url"
        if download_with_retry "$url" "$output"; then
            LAST_DOWNLOAD_URL="$url"
            return 0
        fi
        echo -e "${gl_huang}‰∏ãËΩΩÂ§±Ë¥• (${label})${gl_bai}"
    done

    rm -f "$output"
    return 1
}

fetch_text() {
    local relative_path="$1"
    local result_var="$2"
    shift 2
    local tmp_file
    tmp_file=$(mktemp)

    if download_with_fallback "$relative_path" "$tmp_file" "$@"; then
        local content
        content=$(cat "$tmp_file")
        rm -f "$tmp_file"
        printf -v "$result_var" "%s" "$content"
        return 0
    fi

    rm -f "$tmp_file"
    return 1
}

fetch_release_asset() {
    local asset_name="$1"
    local output="$2"
    local tag="${3:-}"
    local use_api="${4:-0}"
    local -a candidates=()

    print_repo_info_once
    rm -f "$output"

    if [ -n "$tag" ]; then
        candidates+=("${BASE_RELEASES}/${tag}/${asset_name}")
        candidates+=("https://download.fastgit.org/${REPO_OWNER}/${REPO_NAME}/releases/download/${tag}/${asset_name}")
        candidates+=("https://mirror.ghproxy.com/https://github.com/${REPO_OWNER}/${REPO_NAME}/releases/download/${tag}/${asset_name}")
        candidates+=("https://cdn.jsdelivr.net/gh/${REPO_OWNER}/${REPO_NAME}@${tag}/${asset_name}")
    else
        candidates+=("${BASE_RAW_GITHUB}/${asset_name}")
        candidates+=("${CDN_JSDELIVR_RAW}/${asset_name}")
    fi

    if [ "$use_api" = "1" ]; then
        local api_endpoint
        if [ -n "$tag" ]; then
            api_endpoint="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases/tags/${tag}"
        else
            api_endpoint="https://api.github.com/repos/${REPO_OWNER}/${REPO_NAME}/releases/latest"
        fi
        local asset_url
        asset_url=$(curl -fsSL "$api_endpoint" 2>/dev/null | awk -v name="$asset_name" -F'"' '
            $2 == "assets" { in_assets=1; next }
            in_assets && $2 == "name" && $4 == name { getline; if ($2 == "browser_download_url") { print $4; exit } }
        ')
        if [ -n "$asset_url" ]; then
            candidates=("$asset_url" "${candidates[@]}")
        fi
    fi

    for url in "${candidates[@]}"; do
        [ -z "$url" ] && continue
        echo -e "${gl_kjlan}Â∞ùËØï‰∏ãËΩΩÂèëÂ∏ÉËµÑ‰∫ß:${gl_bai} $url"
        if download_with_retry "$url" "$output"; then
            LAST_DOWNLOAD_URL="$url"
            return 0
        fi
        echo -e "${gl_huang}‰∏ãËΩΩÂ§±Ë¥•:${gl_bai} $url"
    done

    rm -f "$output"
    return 1
}

print_repo_info_once() {
    if [ "${REPO_INFO_PRINTED}" -eq 0 ]; then
        echo -e "${gl_kjlan}ÂΩìÂâçËµÑÊ∫ê‰ªìÂ∫ì:${gl_bai} ${REPO_OWNER}/${REPO_NAME}@${REPO_BRANCH}${gl_bai}"
        echo -e "${gl_kjlan}‰∏ªÊ∫ê:${gl_bai} ${BASE_RAW_GITHUB}${gl_bai}"
        echo -e "${gl_kjlan}CDN ÂõûÈÄÄ:${gl_bai} ${CDN_JSDELIVR_RAW}${gl_bai}"
        if [ "${USE_LEGACY_LINKS}" = "1" ]; then
            echo -e "${gl_huang}Â∑≤ÂêØÁî®ÊóßÁâàÈìæÊé•ÂÖºÂÆπÊ®°Âºè (VTT_USE_LEGACY_LINKS=1)${gl_bai}"
        fi
        REPO_INFO_PRINTED=1
    fi
}

legacy_raw_url() {
    local owner="$1"
    local repo="$2"
    local ref="$3"
    local path="$4"
    echo "https://raw.githubusercontent.com/${owner}/${repo}/${ref}/${path}"
}

get_repo_resource_path() {
    local key="$1"
    case "$key" in
        "xanmod_archive_key") echo "resources/kejilion/archive.key" ;;
        "xanmod_check_script") echo "resources/kejilion/check_x86-64_psabi.sh" ;;
        "backtrace_install") echo "resources/ludashi2020/backtrace/install.sh" ;;
        "latency_tester") echo "resources/Cd1s/network-latency-tester/latency.sh" ;;
        "pf_realm_script") echo "resources/zywe03/realm-xwPF/xwPF.sh" ;;
        "xray_dual_install") echo "resources/yahuisme/xray-dual/install.sh" ;;
        "sing_box_install") echo "resources/fscarmen/sing-box/sing-box.sh" ;;
        "lotserver_install") echo "resources/fei5seven/lotServer/lotServerInstall.sh" ;;
        *)
            return 1
            ;;
    esac
}

get_repo_resource_description() {
    local key="$1"
    case "$key" in
        "xanmod_archive_key") echo "XanMod ‰ªìÂ∫ìÂØÜÈí•" ;;
        "xanmod_check_script") echo "XanMod Êû∂ÊûÑÊ£ÄÊµãËÑöÊú¨" ;;
        "backtrace_install") echo "‰∏âÁΩëÂõûÁ®ãË∑ØÁî±ÊµãËØïËÑöÊú¨" ;;
        "latency_tester") echo "ÂõΩÈôÖ‰∫íËÅîÈÄüÂ∫¶ÊµãËØïËÑöÊú¨" ;;
        "pf_realm_script") echo "PF_realm ËΩ¨ÂèëËÑöÊú¨" ;;
        "xray_dual_install") echo "Âæ°ÂùÇÁæéÁê¥‰∏ÄÈîÆÂèåÂçèËÆÆËÑöÊú¨" ;;
        "sing_box_install") echo "F‰Ω¨‰∏ÄÈîÆ sing-box ËÑöÊú¨" ;;
        "lotserver_install") echo "LotServer ÁÆ°ÁêÜËÑöÊú¨" ;;
        *)
            echo "$key"
            ;;
    esac
}

get_legacy_url() {
    local key="$1"
    case "$key" in
        "xanmod_archive_key") legacy_raw_url "kejilion" "sh" "main" "archive.key" ;;
        "xanmod_check_script") legacy_raw_url "kejilion" "sh" "main" "check_x86-64_psabi.sh" ;;
        "backtrace_install") legacy_raw_url "ludashi2020" "backtrace" "main" "install.sh" ;;
        "latency_tester") legacy_raw_url "Cd1s" "network-latency-tester" "main" "latency.sh" ;;
        "pf_realm_script") legacy_raw_url "zywe03" "realm-xwPF" "main" "xwPF.sh" ;;
        "xray_dual_install") legacy_raw_url "yahuisme" "xray-dual" "main" "install.sh" ;;
        "sing_box_install") legacy_raw_url "fscarmen" "sing-box" "main" "sing-box.sh" ;;
        "lotserver_install") legacy_raw_url "fei5seven" "lotServer" "master" "lotServerInstall.sh" ;;
        *)
            ;;
    esac
}

download_repo_resource() {
    local key="$1"
    local output="$2"
    local description="${3:-$(get_repo_resource_description "$key")}"
    local relative_path
    if ! relative_path=$(get_repo_resource_path "$key"); then
        echo -e "${gl_hong}Êú™ÂÆö‰πâÁöÑËµÑÊ∫êÈîÆ: ${key}${gl_bai}"
        return 1
    fi

    print_repo_info_once
    echo -e "${gl_kjlan}Â∞ùËØï‰∏ãËΩΩ ${description}...${gl_bai}"
    if download_with_fallback "$relative_path" "$output"; then
        echo -e "${gl_lv}‰∏ãËΩΩÊàêÂäü: ${description}${gl_bai}"
        return 0
    fi

    echo -e "${gl_huang}${description} ‰∏ãËΩΩÂ§±Ë¥•${gl_bai}"
    if [ "${USE_LEGACY_LINKS}" = "1" ]; then
        local legacy_url
        legacy_url=$(get_legacy_url "$key")
        if [ -n "$legacy_url" ]; then
            echo -e "${gl_huang}‰ΩøÁî®ÊóßÁâàÈìæÊé•ÈáçËØï: ${legacy_url}${gl_bai}"
            if download_with_retry "$legacy_url" "$output"; then
                echo -e "${gl_lv}ÊóßÁâàÈìæÊé•‰∏ãËΩΩÊàêÂäü${gl_bai}"
                LAST_DOWNLOAD_URL="$legacy_url"
                return 0
            fi
        fi
    fi

    rm -f "$output"
    echo -e "${gl_hong}Êó†Ê≥ï‰∏ãËΩΩ ${description}${gl_bai}"
    return 1
}

confirm_insecure_operation() {
    local message="$1"
    local skip_env="${VTT_SKIP_SHA:-0}"

    if [ "$skip_env" = "1" ]; then
        echo -e "${gl_huang}Ë≠¶Âëä: ${gl_bai}${message} (VTT_SKIP_SHA=1ÔºåÂ∑≤Ëá™Âä®Ë∑≥ËøáÊ†°È™å)"
        return 0
    fi

    if is_interactive_shell; then
        echo -e "${gl_huang}Ë≠¶Âëä: ${gl_bai}${message}"
        local reply
        read -e -p "Ê†°È™åÊñá‰ª∂Áº∫Â§±ÔºåÊòØÂê¶Ë∑≥ËøáÊ†°È™åÁªßÁª≠ÂÆâË£ÖÔºü[Y/n]: " reply
        reply=${reply:-Y}
        case "$reply" in
            [Yy]*)
                return 0
                ;;
            *)
                echo "Â∑≤ÂèñÊ∂àÂΩìÂâçÊìç‰Ωú"
                return 1
                ;;
        esac
    else
        echo -e "${gl_huang}Ë≠¶Âëä: ${gl_bai}${message} (Èùû‰∫§‰∫íÊ®°ÂºèÈªòËÆ§Ë∑≥ËøáÊ†°È™å)"
        return 0
    fi
}

check_disk_space() {
    local required_gb=$1
    local required_space_mb=$((required_gb * 1024))
    local available_space_mb=$(df -m / | awk 'NR==2 {print $4}')

    if [ "$available_space_mb" -lt "$required_space_mb" ]; then
        echo -e "${gl_huang}Ë≠¶Âëä: ${gl_bai}Á£ÅÁõòÁ©∫Èó¥‰∏çË∂≥ÔºÅ"
        echo "ÂΩìÂâçÂèØÁî®: $((available_space_mb/1024))G | ÊúÄ‰ΩéÈúÄÊ±Ç: ${required_gb}G"
        read -e -p "ÊòØÂê¶ÁªßÁª≠Ôºü(Y/N): " continue_choice
        case "$continue_choice" in
            [Yy]) return 0 ;;
            *) exit 1 ;;
        esac
    fi
}

check_swap() {
    local swap_total=$(free -m | awk 'NR==3{print $2}')
    
    if [ "$swap_total" -eq 0 ]; then
        echo -e "${gl_huang}Ê£ÄÊµãÂà∞Êó†ËôöÊãüÂÜÖÂ≠òÔºåÊ≠£Âú®ÂàõÂª∫ 1G SWAP...${gl_bai}"
        fallocate -l 1G /swapfile || dd if=/dev/zero of=/swapfile bs=1M count=1024
        chmod 600 /swapfile
        mkswap /swapfile > /dev/null 2>&1
        swapon /swapfile
        echo '/swapfile none swap sw 0 0' >> /etc/fstab
        echo -e "${gl_lv}ËôöÊãüÂÜÖÂ≠òÂàõÂª∫ÊàêÂäü${gl_bai}"
    fi
}

add_swap() {
    local new_swap=$1  # Ëé∑Âèñ‰º†ÂÖ•ÁöÑÂèÇÊï∞ÔºàÂçï‰ΩçÔºöMBÔºâ

    echo -e "${gl_kjlan}=== Ë∞ÉÊï¥ËôöÊãüÂÜÖÂ≠òÔºà‰ªÖÁÆ°ÁêÜ /swapfileÔºâ ===${gl_bai}"

    # Ê£ÄÊµãÊòØÂê¶Â≠òÂú®Ê¥ªË∑ÉÁöÑ /dev/* swap ÂàÜÂå∫
    local dev_swap_list
    dev_swap_list=$(awk 'NR>1 && $1 ~ /^\/dev\// {printf "  ‚Ä¢ %s (Â§ßÂ∞è: %d MB, Â∑≤Áî®: %d MB)\n", $1, int(($3+512)/1024), int(($4+512)/1024)}' /proc/swaps)

    if [ -n "$dev_swap_list" ]; then
        echo -e "${gl_huang}Ê£ÄÊµãÂà∞‰ª•‰∏ã /dev/ ËôöÊãüÂÜÖÂ≠òÂ§Ñ‰∫éÊøÄÊ¥ªÁä∂ÊÄÅÔºö${gl_bai}"
        echo "$dev_swap_list"
        echo ""
        echo -e "${gl_huang}ÊèêÁ§∫:${gl_bai} Êú¨ËÑöÊú¨‰∏ç‰ºö‰øÆÊîπ /dev/ ÂàÜÂå∫ÔºåËØ∑‰ΩøÁî® ${gl_zi}swapoff <ËÆæÂ§á>${gl_bai} Á≠âÂëΩ‰ª§ÊâãÂä®Â§ÑÁêÜ„ÄÇ"
        echo ""
    fi

    # Á°Æ‰øù /swapfile ‰∏çÂÜçË¢´‰ΩøÁî®
    swapoff /swapfile 2>/dev/null
    
    # Âà†Èô§ÊóßÁöÑ /swapfile
    rm -f /swapfile
    
    echo "Ê≠£Âú®ÂàõÂª∫ ${new_swap}MB ËôöÊãüÂÜÖÂ≠ò..."
    
    # ÂàõÂª∫Êñ∞ÁöÑ swap ÂàÜÂå∫
    fallocate -l ${new_swap}M /swapfile || dd if=/dev/zero of=/swapfile bs=1M count=${new_swap}
    chmod 600 /swapfile
    mkswap /swapfile > /dev/null 2>&1
    swapon /swapfile
    
    # Êõ¥Êñ∞ /etc/fstab
    sed -i '/\/swapfile/d' /etc/fstab
    echo "/swapfile swap swap defaults 0 0" >> /etc/fstab
    
    # Alpine Linux ÁâπÊÆäÂ§ÑÁêÜ
    if [ -f /etc/alpine-release ]; then
        echo "nohup swapon /swapfile" > /etc/local.d/swap.start
        chmod +x /etc/local.d/swap.start
        rc-update add local 2>/dev/null
    fi
    
    echo -e "${gl_lv}ËôöÊãüÂÜÖÂ≠òÂ§ßÂ∞èÂ∑≤Ë∞ÉÊï¥‰∏∫ ${new_swap}MB${gl_bai}"
}

calculate_optimal_swap() {
    # Ëé∑ÂèñÁâ©ÁêÜÂÜÖÂ≠òÔºàMBÔºâ
    local mem_total=$(free -m | awk 'NR==2{print $2}')
    local recommended_swap
    local reason
    
    echo -e "${gl_kjlan}=== Êô∫ËÉΩËÆ°ÁÆóËôöÊãüÂÜÖÂ≠òÂ§ßÂ∞è ===${gl_bai}"
    echo ""
    echo -e "Ê£ÄÊµãÂà∞Áâ©ÁêÜÂÜÖÂ≠ò: ${gl_huang}${mem_total}MB${gl_bai}"
    echo ""
    echo "ËÆ°ÁÆóËøáÁ®ãÔºö"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    # Ê†πÊçÆÂÜÖÂ≠òÂ§ßÂ∞èËÆ°ÁÆóÊé®Ëçê SWAP
    if [ "$mem_total" -lt 512 ]; then
        # < 512MB: SWAP = 1GBÔºàÂõ∫ÂÆöÔºâ
        recommended_swap=1024
        reason="ÂÜÖÂ≠òÊûÅÂ∞èÔºà< 512MBÔºâÔºåÂõ∫ÂÆöÊé®Ëçê 1GB"
        echo "‚Üí ÂÜÖÂ≠ò < 512MB"
        echo "‚Üí Êé®ËçêÂõ∫ÂÆö 1GB SWAP"
        
    elif [ "$mem_total" -lt 1024 ]; then
        # 512MB ~ 1GB: SWAP = ÂÜÖÂ≠ò √ó 2
        recommended_swap=$((mem_total * 2))
        reason="ÂÜÖÂ≠òËæÉÂ∞èÔºà512MB-1GBÔºâÔºåÊé®Ëçê 2 ÂÄçÂÜÖÂ≠ò"
        echo "‚Üí ÂÜÖÂ≠òÂú® 512MB - 1GB ‰πãÈó¥"
        echo "‚Üí ËÆ°ÁÆóÂÖ¨Âºè: SWAP = ÂÜÖÂ≠ò √ó 2"
        echo "‚Üí ${mem_total}MB √ó 2 = ${recommended_swap}MB"
        
    elif [ "$mem_total" -lt 2048 ]; then
        # 1GB ~ 2GB: SWAP = ÂÜÖÂ≠ò √ó 1.5
        recommended_swap=$((mem_total * 3 / 2))
        reason="ÂÜÖÂ≠òÈÄÇ‰∏≠Ôºà1-2GBÔºâÔºåÊé®Ëçê 1.5 ÂÄçÂÜÖÂ≠ò"
        echo "‚Üí ÂÜÖÂ≠òÂú® 1GB - 2GB ‰πãÈó¥"
        echo "‚Üí ËÆ°ÁÆóÂÖ¨Âºè: SWAP = ÂÜÖÂ≠ò √ó 1.5"
        echo "‚Üí ${mem_total}MB √ó 1.5 = ${recommended_swap}MB"
        
    elif [ "$mem_total" -lt 4096 ]; then
        # 2GB ~ 4GB: SWAP = ÂÜÖÂ≠ò √ó 1
        recommended_swap=$mem_total
        reason="ÂÜÖÂ≠òÂÖÖË∂≥Ôºà2-4GBÔºâÔºåÊé®Ëçê‰∏éÂÜÖÂ≠òÂêåÂ§ßÂ∞è"
        echo "‚Üí ÂÜÖÂ≠òÂú® 2GB - 4GB ‰πãÈó¥"
        echo "‚Üí ËÆ°ÁÆóÂÖ¨Âºè: SWAP = ÂÜÖÂ≠ò √ó 1"
        echo "‚Üí ${mem_total}MB √ó 1 = ${recommended_swap}MB"
        
    elif [ "$mem_total" -lt 8192 ]; then
        # 4GB ~ 8GB: SWAP = 4GBÔºàÂõ∫ÂÆöÔºâ
        recommended_swap=4096
        reason="ÂÜÖÂ≠òËæÉÂ§öÔºà4-8GBÔºâÔºåÂõ∫ÂÆöÊé®Ëçê 4GB"
        echo "‚Üí ÂÜÖÂ≠òÂú® 4GB - 8GB ‰πãÈó¥"
        echo "‚Üí Âõ∫ÂÆöÊé®Ëçê 4GB SWAP"
        
    else
        # >= 8GB: SWAP = 4GBÔºàÂõ∫ÂÆöÔºâ
        recommended_swap=4096
        reason="ÂÜÖÂ≠òÂÖÖË£ïÔºà‚â• 8GBÔºâÔºåÂõ∫ÂÆöÊé®Ëçê 4GB"
        echo "‚Üí ÂÜÖÂ≠ò ‚â• 8GB"
        echo "‚Üí Âõ∫ÂÆöÊé®Ëçê 4GB SWAP"
    fi
    
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    echo -e "${gl_lv}ËÆ°ÁÆóÁªìÊûúÔºö${gl_bai}"
    echo -e "  Áâ©ÁêÜÂÜÖÂ≠ò:   ${gl_huang}${mem_total}MB${gl_bai}"
    echo -e "  Êé®Ëçê SWAP:  ${gl_huang}${recommended_swap}MB${gl_bai}"
    echo -e "  ÊÄªÂèØÁî®ÂÜÖÂ≠ò: ${gl_huang}$((mem_total + recommended_swap))MB${gl_bai}"
    echo ""
    echo -e "${gl_zi}Êé®ËçêÁêÜÁî±: ${reason}${gl_bai}"
    echo ""
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    # Á°ÆËÆ§ÊòØÂê¶Â∫îÁî®
    read -e -p "$(echo -e "${gl_huang}ÊòØÂê¶Â∫îÁî®Ê≠§ÈÖçÁΩÆÔºü(Y/N): ${gl_bai}")" confirm
    
    case "$confirm" in
        [Yy])
            add_swap "$recommended_swap"
            return 0
            ;;
        *)
            echo "Â∑≤ÂèñÊ∂à"
            sleep 2
            return 1
            ;;
    esac
}

manage_swap() {
    while true; do
        clear
        echo -e "${gl_kjlan}=== ËôöÊãüÂÜÖÂ≠òÁÆ°ÁêÜÔºà‰ªÖÈôê /swapfileÔºâ ===${gl_bai}"
        echo -e "${gl_huang}ÊèêÁ§∫:${gl_bai} Â¶ÇÈúÄË∞ÉÊï¥ /dev/ swap ÂàÜÂå∫ÔºåËØ∑ÊâãÂä®ÊâßË°å swapoff/swap ÂàÜÂå∫Â∑•ÂÖ∑„ÄÇ"

        local mem_total=$(free -m | awk 'NR==2{print $2}')
        local swap_used=$(free -m | awk 'NR==3{print $3}')
        local swap_total=$(free -m | awk 'NR==3{print $2}')
        local swap_info=$(free -m | awk 'NR==3{used=$3; total=$2; if (total == 0) {percentage=0} else {percentage=used*100/total}; printf "%dM/%dM (%d%%)", used, total, percentage}')
        
        echo -e "Áâ©ÁêÜÂÜÖÂ≠ò:     ${gl_huang}${mem_total}MB${gl_bai}"
        echo -e "ÂΩìÂâçËôöÊãüÂÜÖÂ≠ò: ${gl_huang}$swap_info${gl_bai}"
        echo "------------------------------------------------"
        echo "1. ÂàÜÈÖç 1024M (1GB) - Âõ∫ÂÆöÈÖçÁΩÆ"
        echo "2. ÂàÜÈÖç 2048M (2GB) - Âõ∫ÂÆöÈÖçÁΩÆ"
        echo "3. ÂàÜÈÖç 4096M (4GB) - Âõ∫ÂÆöÈÖçÁΩÆ"
        echo "4. Êô∫ËÉΩËÆ°ÁÆóÊé®ËçêÂÄº - Ëá™Âä®ËÆ°ÁÆóÊúÄ‰Ω≥ÈÖçÁΩÆ"
        echo "0. ËøîÂõû‰∏ªËèúÂçï"
        echo "------------------------------------------------"
        read -e -p "ËØ∑ËæìÂÖ•ÈÄâÊã©: " choice
        
        case "$choice" in
            1)
                add_swap 1024
                break_end
                ;;
            2)
                add_swap 2048
                break_end
                ;;
            3)
                add_swap 4096
                break_end
                ;;
            4)
                calculate_optimal_swap
                if [ $? -eq 0 ]; then
                    break_end
                fi
                ;;
            0)
                return
                ;;
            *)
                echo "Êó†ÊïàÈÄâÊã©"
                sleep 2
                ;;
        esac
    done
}

set_ipv4_priority() {
    clear
    echo -e "${gl_kjlan}=== ËÆæÁΩÆIPv4‰ºòÂÖà ===${gl_bai}"
    echo ""

    # Â§á‰ªΩÂéüÈÖçÁΩÆÊñá‰ª∂Âπ∂ËÆ∞ÂΩïÂéüÂßãÁä∂ÊÄÅ
    if [ -f /etc/gai.conf ]; then
        cp /etc/gai.conf /etc/gai.conf.bak.$(date +%Y%m%d_%H%M%S)
        echo "Â∑≤Â§á‰ªΩÂéüÈÖçÁΩÆÊñá‰ª∂Âà∞ /etc/gai.conf.bak.*"
        # ËÆ∞ÂΩïÂéüÂÖàÂ≠òÂú®Êñá‰ª∂
        echo "existed" > /etc/gai.conf.original_state
    else
        # ËÆ∞ÂΩïÂéüÂÖà‰∏çÂ≠òÂú®Êñá‰ª∂
        echo "not_existed" > /etc/gai.conf.original_state
        echo "ÂéüÂÖàÊó†ÈÖçÁΩÆÊñá‰ª∂ÔºåÂ∑≤ËÆ∞ÂΩïÂéüÂßãÁä∂ÊÄÅ"
    fi

    echo "Ê≠£Âú®ËÆæÁΩÆ IPv4 ‰ºòÂÖà..."

    # ÂàõÂª∫ÂÆåÊï¥ÁöÑ IPv4 ‰ºòÂÖàÈÖçÁΩÆ
    cat > /etc/gai.conf << 'EOF'
# Configuration for getaddrinfo(3).
#
# ËÆæÁΩÆ IPv4 ‰ºòÂÖà

# IPv4 addresses
precedence ::ffff:0:0/96  100

# IPv6 addresses
precedence ::/0           10

# IPv4-mapped IPv6 addresses
precedence ::1/128        50

# Link-local addresses
precedence fe80::/10      1
precedence fec0::/10      1
precedence fc00::/7       1

# Site-local addresses (deprecated)
precedence 2002::/16      30
EOF

    # Âà∑Êñ∞ nscd ÁºìÂ≠òÔºàÂ¶ÇÊûúÂÆâË£Ö‰∫ÜÔºâ
    if command -v nscd &> /dev/null; then
        systemctl restart nscd 2>/dev/null || service nscd restart 2>/dev/null || true
        echo "Â∑≤Âà∑Êñ∞ nscd DNS ÁºìÂ≠ò"
    fi

    # Âà∑Êñ∞ systemd-resolved ÁºìÂ≠òÔºàÂ¶ÇÊûú‰ΩøÁî®Ôºâ
    if command -v resolvectl &> /dev/null; then
        resolvectl flush-caches 2>/dev/null || true
        echo "Â∑≤Âà∑Êñ∞ systemd-resolved DNS ÁºìÂ≠ò"
    fi

    echo -e "${gl_lv}‚úÖ IPv4 ‰ºòÂÖàÂ∑≤ËÆæÁΩÆ${gl_bai}"
    echo ""
    echo "ÂΩìÂâçÂá∫Âè£ IP Âú∞ÂùÄÔºö"
    echo "------------------------------------------------"
    # ‰ΩøÁî® -4 ÂèÇÊï∞Âº∫Âà∂ IPv4
    curl -4 ip.sb 2>/dev/null || curl ip.sb
    echo ""
    echo "------------------------------------------------"
    echo ""
    echo -e "${gl_huang}ÊèêÁ§∫Ôºö${gl_bai}"
    echo "1. ÈÖçÁΩÆÂ∑≤ÁîüÊïàÔºåÊó†ÈúÄÈáçÂêØÁ≥ªÁªü"
    echo "2. Êñ∞ÂêØÂä®ÁöÑÁ®ãÂ∫èÂ∞ÜËá™Âä®‰ΩøÁî® IPv4 ‰ºòÂÖà"
    echo "3. Â¶ÇÈúÄÂº∫Âà∂ÊåáÂÆöÔºåÂèØ‰ΩøÁî®: curl -4 ip.sb (Âº∫Âà∂IPv4) Êàñ curl -6 ip.sb (Âº∫Âà∂IPv6)"
    echo "4. Â∑≤ËøêË°åÁöÑÈïøËøûÊé•ÊúçÂä°ÔºàÂ¶ÇNginx„ÄÅDockerÂÆπÂô®ÔºâÂèØËÉΩÈúÄË¶ÅÈáçÂêØÊúçÂä°ÊâçËÉΩÂ∫îÁî®"
    echo ""

    break_end
}

set_ipv6_priority() {
    clear
    echo -e "${gl_kjlan}=== ËÆæÁΩÆIPv6‰ºòÂÖà ===${gl_bai}"
    echo ""

    # Â§á‰ªΩÂéüÈÖçÁΩÆÊñá‰ª∂Âπ∂ËÆ∞ÂΩïÂéüÂßãÁä∂ÊÄÅ
    if [ -f /etc/gai.conf ]; then
        cp /etc/gai.conf /etc/gai.conf.bak.$(date +%Y%m%d_%H%M%S)
        echo "Â∑≤Â§á‰ªΩÂéüÈÖçÁΩÆÊñá‰ª∂Âà∞ /etc/gai.conf.bak.*"
        # ËÆ∞ÂΩïÂéüÂÖàÂ≠òÂú®Êñá‰ª∂
        echo "existed" > /etc/gai.conf.original_state
    else
        # ËÆ∞ÂΩïÂéüÂÖà‰∏çÂ≠òÂú®Êñá‰ª∂
        echo "not_existed" > /etc/gai.conf.original_state
        echo "ÂéüÂÖàÊó†ÈÖçÁΩÆÊñá‰ª∂ÔºåÂ∑≤ËÆ∞ÂΩïÂéüÂßãÁä∂ÊÄÅ"
    fi

    echo "Ê≠£Âú®ËÆæÁΩÆ IPv6 ‰ºòÂÖà..."

    # ÂàõÂª∫ÂÆåÊï¥ÁöÑ IPv6 ‰ºòÂÖàÈÖçÁΩÆ
    cat > /etc/gai.conf << 'EOF'
# Configuration for getaddrinfo(3).
#
# ËÆæÁΩÆ IPv6 ‰ºòÂÖà

# IPv6 addresses (highest priority)
precedence ::/0           100

# IPv4 addresses (lower priority)
precedence ::ffff:0:0/96  10

# IPv4-mapped IPv6 addresses
precedence ::1/128        50

# Link-local addresses
precedence fe80::/10      1
precedence fec0::/10      1
precedence fc00::/7       1

# Site-local addresses (deprecated)
precedence 2002::/16      30
EOF

    # Âà∑Êñ∞ nscd ÁºìÂ≠òÔºàÂ¶ÇÊûúÂÆâË£Ö‰∫ÜÔºâ
    if command -v nscd &> /dev/null; then
        systemctl restart nscd 2>/dev/null || service nscd restart 2>/dev/null || true
        echo "Â∑≤Âà∑Êñ∞ nscd DNS ÁºìÂ≠ò"
    fi

    # Âà∑Êñ∞ systemd-resolved ÁºìÂ≠òÔºàÂ¶ÇÊûú‰ΩøÁî®Ôºâ
    if command -v resolvectl &> /dev/null; then
        resolvectl flush-caches 2>/dev/null || true
        echo "Â∑≤Âà∑Êñ∞ systemd-resolved DNS ÁºìÂ≠ò"
    fi

    echo -e "${gl_lv}‚úÖ IPv6 ‰ºòÂÖàÂ∑≤ËÆæÁΩÆ${gl_bai}"
    echo ""
    echo "ÂΩìÂâçÂá∫Âè£ IP Âú∞ÂùÄÔºö"
    echo "------------------------------------------------"
    # ‰ΩøÁî® -6 ÂèÇÊï∞Âº∫Âà∂ IPv6
    curl -6 ip.sb 2>/dev/null || curl ip.sb
    echo ""
    echo "------------------------------------------------"
    echo ""
    echo -e "${gl_huang}ÊèêÁ§∫Ôºö${gl_bai}"
    echo "1. ÈÖçÁΩÆÂ∑≤ÁîüÊïàÔºåÊó†ÈúÄÈáçÂêØÁ≥ªÁªü"
    echo "2. Êñ∞ÂêØÂä®ÁöÑÁ®ãÂ∫èÂ∞ÜËá™Âä®‰ΩøÁî® IPv6 ‰ºòÂÖà"
    echo "3. Â¶ÇÈúÄÂº∫Âà∂ÊåáÂÆöÔºåÂèØ‰ΩøÁî®: curl -6 ip.sb (Âº∫Âà∂IPv6) Êàñ curl -4 ip.sb (Âº∫Âà∂IPv4)"
    echo "4. Â∑≤ËøêË°åÁöÑÈïøËøûÊé•ÊúçÂä°ÔºàÂ¶ÇNginx„ÄÅDockerÂÆπÂô®ÔºâÂèØËÉΩÈúÄË¶ÅÈáçÂêØÊúçÂä°ÊâçËÉΩÂ∫îÁî®"
    echo ""

    break_end
}

manage_ip_priority() {
    while true; do
        clear
        echo -e "${gl_kjlan}=== ËÆæÁΩÆIPv4/IPv6‰ºòÂÖàÁ∫ß ===${gl_bai}"
        echo ""
        echo "1. ËÆæÁΩÆIPv4‰ºòÂÖà"
        echo "2. ËÆæÁΩÆIPv6‰ºòÂÖà"
        echo "3. ÊÅ¢Â§çIP‰ºòÂÖàÁ∫ßÈÖçÁΩÆ"
        echo "0. ËøîÂõû‰∏ªËèúÂçï"
        echo ""
        echo "------------------------------------------------"
        read -p "ËØ∑ÈÄâÊã©Êìç‰Ωú [0-3]: " ip_priority_choice
        echo ""
        
        case $ip_priority_choice in
            1)
                set_ipv4_priority
                ;;
            2)
                set_ipv6_priority
                ;;
            3)
                restore_gai_conf
                ;;
            0)
                break
                ;;
            *)
                echo -e "${gl_hong}Êó†ÊïàÈÄâÊã©ÔºåËØ∑ÈáçÊñ∞ËæìÂÖ•${gl_bai}"
                sleep 2
                ;;
        esac
    done
}

restore_gai_conf() {
    clear
    echo -e "${gl_kjlan}=== ÊÅ¢Â§ç IP ‰ºòÂÖàÁ∫ßÈÖçÁΩÆ ===${gl_bai}"
    echo ""

    # Ê£ÄÊü•ÊòØÂê¶ÊúâÂéüÂßãÁä∂ÊÄÅËÆ∞ÂΩï
    if [ ! -f /etc/gai.conf.original_state ]; then
        echo -e "${gl_huang}‚ö†Ô∏è  Êú™ÊâæÂà∞ÂéüÂßãÁä∂ÊÄÅËÆ∞ÂΩï${gl_bai}"
        echo "ÂèØËÉΩÁöÑÂéüÂõ†Ôºö"
        echo "1. ‰ªéÊú™‰ΩøÁî®ËøáÊú¨ËÑöÊú¨ËÆæÁΩÆËøá IPv4/IPv6 ‰ºòÂÖàÁ∫ß"
        echo "2. ÂéüÂßãÁä∂ÊÄÅËÆ∞ÂΩïÊñá‰ª∂Â∑≤Ë¢´Âà†Èô§"
        echo ""
        
        # ÂàóÂá∫ÊâÄÊúâÂ§á‰ªΩÊñá‰ª∂
        if ls /etc/gai.conf.bak.* 2>/dev/null; then
            echo "ÂèëÁé∞‰ª•‰∏ãÂ§á‰ªΩÊñá‰ª∂Ôºö"
            ls -lh /etc/gai.conf.bak.* 2>/dev/null
            echo ""
            echo "ÊòØÂê¶Ë¶ÅÊâãÂä®ÊÅ¢Â§çÊúÄÊñ∞ÁöÑÂ§á‰ªΩÔºü[y/n]"
            read -p "ËØ∑ÈÄâÊã©: " manual_restore
            if [[ "$manual_restore" == "y" || "$manual_restore" == "Y" ]]; then
                latest_backup=$(ls -t /etc/gai.conf.bak.* 2>/dev/null | head -1)
                if [ -n "$latest_backup" ]; then
                    cp "$latest_backup" /etc/gai.conf
                    echo -e "${gl_lv}‚úÖ Â∑≤‰ªéÂ§á‰ªΩÊÅ¢Â§ç: $latest_backup${gl_bai}"
                fi
            fi
        else
            echo "‰πüÊú™ÊâæÂà∞‰ªª‰ΩïÂ§á‰ªΩÊñá‰ª∂„ÄÇ"
            echo ""
            echo "ÊòØÂê¶Ë¶ÅÂà†Èô§ÂΩìÂâçÁöÑ gai.conf Êñá‰ª∂ÔºàÊÅ¢Â§çÂà∞Á≥ªÁªüÈªòËÆ§ÔºâÔºü[y/n]"
            read -p "ËØ∑ÈÄâÊã©: " delete_conf
            if [[ "$delete_conf" == "y" || "$delete_conf" == "Y" ]]; then
                rm -f /etc/gai.conf
                echo -e "${gl_lv}‚úÖ Â∑≤Âà†Èô§ gai.confÔºåÁ≥ªÁªüÂ∞Ü‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ${gl_bai}"
            fi
        fi
    else
        # ËØªÂèñÂéüÂßãÁä∂ÊÄÅ
        original_state=$(cat /etc/gai.conf.original_state)
        
        if [ "$original_state" == "not_existed" ]; then
            echo "Ê£ÄÊµãÂà∞ÂéüÂÖà${gl_huang}Ê≤°Êúâ${gl_bai} gai.conf Êñá‰ª∂"
            echo "ÊÅ¢Â§çÊìç‰ΩúÂ∞Ü${gl_hong}Âà†Èô§${gl_bai}ÂΩìÂâçÁöÑ gai.conf Êñá‰ª∂"
            echo ""
            echo "Á°ÆËÆ§Ë¶ÅÊÅ¢Â§çÂà∞ÂéüÂßãÁä∂ÊÄÅÂêóÔºü[y/n]"
            read -p "ËØ∑ÈÄâÊã©: " confirm
            
            if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
                rm -f /etc/gai.conf
                rm -f /etc/gai.conf.original_state
                echo -e "${gl_lv}‚úÖ Â∑≤Âà†Èô§ gai.confÔºåÊÅ¢Â§çÂà∞ÂéüÂßãÁä∂ÊÄÅÔºàÊó†ÈÖçÁΩÆÊñá‰ª∂Ôºâ${gl_bai}"
                
                # Âà∑Êñ∞ÁºìÂ≠ò
                if command -v nscd &> /dev/null; then
                    systemctl restart nscd 2>/dev/null || service nscd restart 2>/dev/null || true
                fi
                if command -v resolvectl &> /dev/null; then
                    resolvectl flush-caches 2>/dev/null || true
                fi
            else
                echo "Â∑≤ÂèñÊ∂àÊÅ¢Â§çÊìç‰Ωú"
            fi
            
        elif [ "$original_state" == "existed" ]; then
            echo "Ê£ÄÊµãÂà∞ÂéüÂÖà${gl_lv}Â≠òÂú®${gl_bai} gai.conf Êñá‰ª∂"
            
            # Êü•ÊâæÊúÄÊñ∞ÁöÑÂ§á‰ªΩ
            latest_backup=$(ls -t /etc/gai.conf.bak.* 2>/dev/null | head -1)
            
            if [ -n "$latest_backup" ]; then
                echo "ÊâæÂà∞Â§á‰ªΩÊñá‰ª∂: $latest_backup"
                echo ""
                echo "Á°ÆËÆ§Ë¶Å‰ªéÂ§á‰ªΩÊÅ¢Â§çÂêóÔºü[y/n]"
                read -p "ËØ∑ÈÄâÊã©: " confirm
                
                if [[ "$confirm" == "y" || "$confirm" == "Y" ]]; then
                    cp "$latest_backup" /etc/gai.conf
                    rm -f /etc/gai.conf.original_state
                    echo -e "${gl_lv}‚úÖ Â∑≤‰ªéÂ§á‰ªΩÊÅ¢Â§çÈÖçÁΩÆ${gl_bai}"
                    
                    # Âà∑Êñ∞ÁºìÂ≠ò
                    if command -v nscd &> /dev/null; then
                        systemctl restart nscd 2>/dev/null || service nscd restart 2>/dev/null || true
                        echo "Â∑≤Âà∑Êñ∞ nscd DNS ÁºìÂ≠ò"
                    fi
                    if command -v resolvectl &> /dev/null; then
                        resolvectl flush-caches 2>/dev/null || true
                        echo "Â∑≤Âà∑Êñ∞ systemd-resolved DNS ÁºìÂ≠ò"
                    fi
                    
                    echo ""
                    echo "ÂΩìÂâçÂá∫Âè£ IP Âú∞ÂùÄÔºö"
                    echo "------------------------------------------------"
                    curl ip.sb
                    echo ""
                    echo "------------------------------------------------"
                else
                    echo "Â∑≤ÂèñÊ∂àÊÅ¢Â§çÊìç‰Ωú"
                fi
            else
                echo -e "${gl_hong}ÈîôËØØ: Êú™ÊâæÂà∞Â§á‰ªΩÊñá‰ª∂${gl_bai}"
            fi
        fi
    fi
    
    echo ""
    break_end
}

set_temp_socks5_proxy() {
    clear
    echo -e "${gl_kjlan}=== ËÆæÁΩÆ‰∏¥Êó∂SOCKS5‰ª£ÁêÜ ===${gl_bai}"
    echo ""
    echo "Ê≠§‰ª£ÁêÜÈÖçÁΩÆ‰ªÖÂØπÂΩìÂâçÁªàÁ´Ø‰ºöËØùÊúâÊïàÔºåÈáçÂêØÂêéËá™Âä®Â§±Êïà"
    echo "------------------------------------------------"
    echo ""
    
    # ËæìÂÖ•‰ª£ÁêÜÊúçÂä°Âô®IP
    local proxy_ip=""
    while true; do
        read -e -p "$(echo -e "${gl_huang}ËØ∑ËæìÂÖ•‰ª£ÁêÜÊúçÂä°Âô®IP: ${gl_bai}")" proxy_ip
        
        if [ -z "$proxy_ip" ]; then
            echo -e "${gl_hong}‚ùå IPÂú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
        elif [[ "$proxy_ip" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
            # ÁÆÄÂçïÁöÑIPÊ†ºÂºèÈ™åËØÅ
            echo -e "${gl_lv}‚úÖ IPÂú∞ÂùÄ: ${proxy_ip}${gl_bai}"
            break
        else
            echo -e "${gl_hong}‚ùå Êó†ÊïàÁöÑIPÂú∞ÂùÄÊ†ºÂºè${gl_bai}"
        fi
    done
    
    echo ""
    
    # ËæìÂÖ•Á´ØÂè£
    local proxy_port=""
    while true; do
        read -e -p "$(echo -e "${gl_huang}ËØ∑ËæìÂÖ•Á´ØÂè£: ${gl_bai}")" proxy_port
        
        if [ -z "$proxy_port" ]; then
            echo -e "${gl_hong}‚ùå Á´ØÂè£‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
        elif [[ "$proxy_port" =~ ^[0-9]+$ ]] && [ "$proxy_port" -ge 1 ] && [ "$proxy_port" -le 65535 ]; then
            echo -e "${gl_lv}‚úÖ Á´ØÂè£: ${proxy_port}${gl_bai}"
            break
        else
            echo -e "${gl_hong}‚ùå Êó†ÊïàÁ´ØÂè£ÔºåËØ∑ËæìÂÖ• 1-65535 ‰πãÈó¥ÁöÑÊï∞Â≠ó${gl_bai}"
        fi
    done
    
    echo ""
    
    # ËæìÂÖ•Áî®Êà∑ÂêçÔºàÂèØÈÄâÔºâ
    local proxy_user=""
    read -e -p "$(echo -e "${gl_huang}ËØ∑ËæìÂÖ•Áî®Êà∑ÂêçÔºàÁïôÁ©∫Ë∑≥ËøáÔºâ: ${gl_bai}")" proxy_user
    
    if [ -n "$proxy_user" ]; then
        echo -e "${gl_lv}‚úÖ Áî®Êà∑Âêç: ${proxy_user}${gl_bai}"
    else
        echo -e "${gl_zi}Êú™ËÆæÁΩÆÁî®Êà∑ÂêçÔºàÊó†ËÆ§ËØÅÊ®°ÂºèÔºâ${gl_bai}"
    fi
    
    echo ""
    
    # ËæìÂÖ•ÂØÜÁ†ÅÔºàÂèØÈÄâÔºâ
    local proxy_pass=""
    if [ -n "$proxy_user" ]; then
        read -e -p "$(echo -e "${gl_huang}ËØ∑ËæìÂÖ•ÂØÜÁ†Å: ${gl_bai}")" proxy_pass
        
        if [ -n "$proxy_pass" ]; then
            echo -e "${gl_lv}‚úÖ ÂØÜÁ†ÅÂ∑≤ËÆæÁΩÆ${gl_bai}"
        else
            echo -e "${gl_huang}‚ö†Ô∏è  ÂØÜÁ†Å‰∏∫Á©∫${gl_bai}"
        fi
    fi
    
    # ÁîüÊàê‰ª£ÁêÜURL
    local proxy_url=""
    if [ -n "$proxy_user" ] && [ -n "$proxy_pass" ]; then
        proxy_url="socks5://${proxy_user}:${proxy_pass}@${proxy_ip}:${proxy_port}"
    elif [ -n "$proxy_user" ]; then
        proxy_url="socks5://${proxy_user}@${proxy_ip}:${proxy_port}"
    else
        proxy_url="socks5://${proxy_ip}:${proxy_port}"
    fi
    
    # ÁîüÊàê‰∏¥Êó∂ÈÖçÁΩÆÊñá‰ª∂
    local timestamp=$(date +%Y%m%d_%H%M%S)
    local config_file="/tmp/socks5_proxy_${timestamp}.sh"
    
    cat > "$config_file" << PROXYEOF
#!/bin/bash
# SOCKS5 ‰ª£ÁêÜÈÖçÁΩÆ - ÁîüÊàê‰∫é $(date '+%Y-%m-%d %H:%M:%S')
# Ê≠§ÈÖçÁΩÆ‰ªÖÂØπÂΩìÂâçÁªàÁ´Ø‰ºöËØùÊúâÊïà

export http_proxy="${proxy_url}"
export https_proxy="${proxy_url}"
export all_proxy="${proxy_url}"

echo "SOCKS5 ‰ª£ÁêÜÂ∑≤ÂêØÁî®Ôºö"
echo "  ÊúçÂä°Âô®: ${proxy_ip}:${proxy_port}"
echo "  http_proxy=${proxy_url}"
echo "  https_proxy=${proxy_url}"
echo "  all_proxy=${proxy_url}"
PROXYEOF
    
    chmod +x "$config_file"
    
    echo ""
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "${gl_lv}‚úÖ ‰ª£ÁêÜÈÖçÁΩÆÊñá‰ª∂Â∑≤ÁîüÊàêÔºÅ${gl_bai}"
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    echo -e "${gl_huang}‰ΩøÁî®ÊñπÊ≥ïÔºö${gl_bai}"
    echo ""
    echo -e "1. ${gl_lv}Â∫îÁî®‰ª£ÁêÜÈÖçÁΩÆÔºö${gl_bai}"
    echo "   source ${config_file}"
    echo ""
    echo -e "2. ${gl_lv}ÊµãËØï‰ª£ÁêÜÊòØÂê¶ÁîüÊïàÔºö${gl_bai}"
    echo "   curl ip.sb"
    echo "   ÔºàÂ∫îËØ•ÊòæÁ§∫‰ª£ÁêÜÊúçÂä°Âô®ÁöÑIPÂú∞ÂùÄÔºâ"
    echo ""
    echo -e "3. ${gl_lv}ÂèñÊ∂à‰ª£ÁêÜÔºö${gl_bai}"
    echo "   unset http_proxy https_proxy all_proxy"
    echo ""
    echo -e "${gl_zi}Ê≥®ÊÑè‰∫ãÈ°πÔºö${gl_bai}"
    echo "  - Ê≠§ÈÖçÁΩÆ‰ªÖÂØπÊâßË°å source ÂëΩ‰ª§ÁöÑÁªàÁ´Ø‰ºöËØùÊúâÊïà"
    echo "  - ÂÖ≥Èó≠ÁªàÁ´ØÊàñÈáçÂêØÁ≥ªÁªüÂêé‰ª£ÁêÜËá™Âä®Â§±Êïà"
    echo "  - ÈÖçÁΩÆÊñá‰ª∂‰øùÂ≠òÂú® /tmp ÁõÆÂΩïÔºåÈáçÂêØÂêé‰ºöË¢´Ê∏ÖÈô§"
    echo ""
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    
    break_end
}

disable_ipv6_temporary() {
    clear
    echo -e "${gl_kjlan}=== ‰∏¥Êó∂Á¶ÅÁî®IPv6 ===${gl_bai}"
    echo ""
    echo "Ê≠§Êìç‰ΩúÂ∞Ü‰∏¥Êó∂Á¶ÅÁî®IPv6ÔºåÈáçÂêØÂêéËá™Âä®ÊÅ¢Â§ç"
    echo "------------------------------------------------"
    echo ""
    
    read -e -p "$(echo -e "${gl_huang}Á°ÆËÆ§‰∏¥Êó∂Á¶ÅÁî®IPv6Ôºü(Y/N): ${gl_bai}")" confirm
    
    case "$confirm" in
        [Yy])
            echo ""
            echo "Ê≠£Âú®Á¶ÅÁî®IPv6..."
            
            # ‰∏¥Êó∂Á¶ÅÁî®IPv6
            sysctl -w net.ipv6.conf.all.disable_ipv6=1 >/dev/null 2>&1
            sysctl -w net.ipv6.conf.default.disable_ipv6=1 >/dev/null 2>&1
            sysctl -w net.ipv6.conf.lo.disable_ipv6=1 >/dev/null 2>&1
            
            # È™åËØÅÁä∂ÊÄÅ
            local ipv6_status=$(sysctl -n net.ipv6.conf.all.disable_ipv6 2>/dev/null)
            
            echo ""
            if [ "$ipv6_status" = "1" ]; then
                echo -e "${gl_lv}‚úÖ IPv6 Â∑≤‰∏¥Êó∂Á¶ÅÁî®${gl_bai}"
                echo ""
                echo -e "${gl_zi}Ê≥®ÊÑèÔºö${gl_bai}"
                echo "  - Ê≠§ËÆæÁΩÆ‰ªÖÂú®ÂΩìÂâç‰ºöËØùÊúâÊïà"
                echo "  - ÈáçÂêØÂêé IPv6 Â∞ÜËá™Âä®ÊÅ¢Â§ç"
                echo "  - Â¶ÇÈúÄÊ∞∏‰πÖÁ¶ÅÁî®ÔºåËØ∑ÈÄâÊã©'Ê∞∏‰πÖÁ¶ÅÁî®IPv6'ÈÄâÈ°π"
            else
                echo -e "${gl_hong}‚ùå IPv6 Á¶ÅÁî®Â§±Ë¥•${gl_bai}"
            fi
            ;;
        *)
            echo "Â∑≤ÂèñÊ∂à"
            ;;
    esac
    
    echo ""
    break_end
}

disable_ipv6_permanent() {
    clear
    echo -e "${gl_kjlan}=== Ê∞∏‰πÖÁ¶ÅÁî®IPv6 ===${gl_bai}"
    echo ""
    echo "Ê≠§Êìç‰ΩúÂ∞ÜÊ∞∏‰πÖÁ¶ÅÁî®IPv6ÔºåÈáçÂêØÂêé‰ªçÁÑ∂ÁîüÊïà"
    echo "------------------------------------------------"
    echo ""
    
    # Ê£ÄÊü•ÊòØÂê¶Â∑≤ÁªèÊ∞∏‰πÖÁ¶ÅÁî®
    if [ -f /etc/sysctl.d/99-disable-ipv6.conf ]; then
        echo -e "${gl_huang}‚ö†Ô∏è  Ê£ÄÊµãÂà∞Â∑≤Â≠òÂú®Ê∞∏‰πÖÁ¶ÅÁî®ÈÖçÁΩÆ${gl_bai}"
        echo ""
        read -e -p "$(echo -e "${gl_huang}ÊòØÂê¶ÈáçÊñ∞ÊâßË°åÊ∞∏‰πÖÁ¶ÅÁî®Ôºü(Y/N): ${gl_bai}")" confirm
        
        case "$confirm" in
            [Yy])
                ;;
            *)
                echo "Â∑≤ÂèñÊ∂à"
                break_end
                return 1
                ;;
        esac
    fi
    
    echo ""
    read -e -p "$(echo -e "${gl_huang}Á°ÆËÆ§Ê∞∏‰πÖÁ¶ÅÁî®IPv6Ôºü(Y/N): ${gl_bai}")" confirm
    
    case "$confirm" in
        [Yy])
            echo ""
            echo -e "${gl_zi}[Ê≠•È™§ 1/3] Â§á‰ªΩÂΩìÂâçIPv6Áä∂ÊÄÅ...${gl_bai}"
            
            # ËØªÂèñÂΩìÂâçIPv6Áä∂ÊÄÅÂπ∂Â§á‰ªΩ
            local ipv6_all=$(sysctl -n net.ipv6.conf.all.disable_ipv6 2>/dev/null || echo "0")
            local ipv6_default=$(sysctl -n net.ipv6.conf.default.disable_ipv6 2>/dev/null || echo "0")
            local ipv6_lo=$(sysctl -n net.ipv6.conf.lo.disable_ipv6 2>/dev/null || echo "0")
            
            # ÂàõÂª∫Â§á‰ªΩÊñá‰ª∂
            cat > /etc/sysctl.d/.ipv6-state-backup.conf << BACKUPEOF
# IPv6 State Backup - Created on $(date '+%Y-%m-%d %H:%M:%S')
# This file is used to restore IPv6 state when canceling permanent disable
net.ipv6.conf.all.disable_ipv6=${ipv6_all}
net.ipv6.conf.default.disable_ipv6=${ipv6_default}
net.ipv6.conf.lo.disable_ipv6=${ipv6_lo}
BACKUPEOF
            
            echo -e "${gl_lv}‚úÖ Áä∂ÊÄÅÂ∑≤Â§á‰ªΩ${gl_bai}"
            echo ""
            
            echo -e "${gl_zi}[Ê≠•È™§ 2/3] ÂàõÂª∫Ê∞∏‰πÖÁ¶ÅÁî®ÈÖçÁΩÆ...${gl_bai}"
            
            # ÂàõÂª∫Ê∞∏‰πÖÁ¶ÅÁî®ÈÖçÁΩÆÊñá‰ª∂
            cat > /etc/sysctl.d/99-disable-ipv6.conf << EOF
# Permanently Disable IPv6
net.ipv6.conf.all.disable_ipv6 = 1
net.ipv6.conf.default.disable_ipv6 = 1
net.ipv6.conf.lo.disable_ipv6 = 1
EOF
            
            echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÊñá‰ª∂Â∑≤ÂàõÂª∫${gl_bai}"
            echo ""
            
            echo -e "${gl_zi}[Ê≠•È™§ 3/3] Â∫îÁî®ÈÖçÁΩÆ...${gl_bai}"
            
            # Â∫îÁî®ÈÖçÁΩÆ
            sysctl --system >/dev/null 2>&1
            
            # È™åËØÅÁä∂ÊÄÅ
            local ipv6_status=$(sysctl -n net.ipv6.conf.all.disable_ipv6 2>/dev/null)
            
            echo ""
            if [ "$ipv6_status" = "1" ]; then
                echo -e "${gl_lv}‚úÖ IPv6 Â∑≤Ê∞∏‰πÖÁ¶ÅÁî®${gl_bai}"
                echo ""
                echo -e "${gl_zi}ËØ¥ÊòéÔºö${gl_bai}"
                echo "  - ÈÖçÁΩÆÊñá‰ª∂: /etc/sysctl.d/99-disable-ipv6.conf"
                echo "  - Â§á‰ªΩÊñá‰ª∂: /etc/sysctl.d/.ipv6-state-backup.conf"
                echo "  - ÈáçÂêØÂêéÊ≠§ÈÖçÁΩÆ‰ªçÁÑ∂ÁîüÊïà"
                echo "  - Â¶ÇÈúÄÊÅ¢Â§çÔºåËØ∑ÈÄâÊã©'ÂèñÊ∂àÊ∞∏‰πÖÁ¶ÅÁî®'ÈÄâÈ°π"
            else
                echo -e "${gl_hong}‚ùå IPv6 Á¶ÅÁî®Â§±Ë¥•${gl_bai}"
                # Â¶ÇÊûúÂ§±Ë¥•ÔºåÂà†Èô§ÈÖçÁΩÆÊñá‰ª∂
                rm -f /etc/sysctl.d/99-disable-ipv6.conf
                rm -f /etc/sysctl.d/.ipv6-state-backup.conf
            fi
            ;;
        *)
            echo "Â∑≤ÂèñÊ∂à"
            ;;
    esac
    
    echo ""
    break_end
}

cancel_ipv6_permanent_disable() {
    clear
    echo -e "${gl_kjlan}=== ÂèñÊ∂àÊ∞∏‰πÖÁ¶ÅÁî®IPv6 ===${gl_bai}"
    echo ""
    echo "Ê≠§Êìç‰ΩúÂ∞ÜÂÆåÂÖ®ËøòÂéüÂà∞ÊâßË°åÊ∞∏‰πÖÁ¶ÅÁî®ÂâçÁöÑÁä∂ÊÄÅ"
    echo "------------------------------------------------"
    echo ""
    
    # Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®Ê∞∏‰πÖÁ¶ÅÁî®ÈÖçÁΩÆ
    if [ ! -f /etc/sysctl.d/99-disable-ipv6.conf ]; then
        echo -e "${gl_huang}‚ö†Ô∏è  Êú™Ê£ÄÊµãÂà∞Ê∞∏‰πÖÁ¶ÅÁî®ÈÖçÁΩÆ${gl_bai}"
        echo ""
        echo "ÂèØËÉΩÂéüÂõ†Ôºö"
        echo "  - ‰ªéÊú™ÊâßË°åËøá'Ê∞∏‰πÖÁ¶ÅÁî®IPv6'Êìç‰Ωú"
        echo "  - ÈÖçÁΩÆÊñá‰ª∂Â∑≤Ë¢´ÊâãÂä®Âà†Èô§"
        echo ""
        break_end
        return 1
    fi
    
    read -e -p "$(echo -e "${gl_huang}Á°ÆËÆ§ÂèñÊ∂àÊ∞∏‰πÖÁ¶ÅÁî®Âπ∂ÊÅ¢Â§çÂéüÂßãÁä∂ÊÄÅÔºü(Y/N): ${gl_bai}")" confirm
    
    case "$confirm" in
        [Yy])
            echo ""
            echo -e "${gl_zi}[Ê≠•È™§ 1/4] Âà†Èô§Ê∞∏‰πÖÁ¶ÅÁî®ÈÖçÁΩÆ...${gl_bai}"
            
            # Âà†Èô§Ê∞∏‰πÖÁ¶ÅÁî®ÈÖçÁΩÆÊñá‰ª∂
            rm -f /etc/sysctl.d/99-disable-ipv6.conf
            echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÊñá‰ª∂Â∑≤Âà†Èô§${gl_bai}"
            echo ""
            
            echo -e "${gl_zi}[Ê≠•È™§ 2/4] Ê£ÄÊü•Â§á‰ªΩÊñá‰ª∂...${gl_bai}"
            
            # Ê£ÄÊü•Â§á‰ªΩÊñá‰ª∂
            if [ -f /etc/sysctl.d/.ipv6-state-backup.conf ]; then
                echo -e "${gl_lv}‚úÖ ÊâæÂà∞Â§á‰ªΩÊñá‰ª∂${gl_bai}"
                echo ""
                
                echo -e "${gl_zi}[Ê≠•È™§ 3/4] ‰ªéÂ§á‰ªΩËøòÂéüÂéüÂßãÁä∂ÊÄÅ...${gl_bai}"
                
                # ËØªÂèñÂ§á‰ªΩÁöÑÂéüÂßãÂÄº
                local backup_all=$(grep 'net.ipv6.conf.all.disable_ipv6' /etc/sysctl.d/.ipv6-state-backup.conf | awk -F'=' '{print $2}')
                local backup_default=$(grep 'net.ipv6.conf.default.disable_ipv6' /etc/sysctl.d/.ipv6-state-backup.conf | awk -F'=' '{print $2}')
                local backup_lo=$(grep 'net.ipv6.conf.lo.disable_ipv6' /etc/sysctl.d/.ipv6-state-backup.conf | awk -F'=' '{print $2}')
                
                # ÊÅ¢Â§çÂéüÂßãÂÄº
                sysctl -w net.ipv6.conf.all.disable_ipv6=${backup_all} >/dev/null 2>&1
                sysctl -w net.ipv6.conf.default.disable_ipv6=${backup_default} >/dev/null 2>&1
                sysctl -w net.ipv6.conf.lo.disable_ipv6=${backup_lo} >/dev/null 2>&1
                
                # Âà†Èô§Â§á‰ªΩÊñá‰ª∂
                rm -f /etc/sysctl.d/.ipv6-state-backup.conf
                
                echo -e "${gl_lv}‚úÖ Â∑≤‰ªéÂ§á‰ªΩËøòÂéüÂéüÂßãÁä∂ÊÄÅ${gl_bai}"
            else
                echo -e "${gl_huang}‚ö†Ô∏è  Êú™ÊâæÂà∞Â§á‰ªΩÊñá‰ª∂${gl_bai}"
                echo ""
                
                echo -e "${gl_zi}[Ê≠•È™§ 3/4] ÊÅ¢Â§çÂà∞Á≥ªÁªüÈªòËÆ§ÔºàÂêØÁî®IPv6Ôºâ...${gl_bai}"
                
                # ÊÅ¢Â§çÂà∞Á≥ªÁªüÈªòËÆ§ÔºàÂêØÁî®IPv6Ôºâ
                sysctl -w net.ipv6.conf.all.disable_ipv6=0 >/dev/null 2>&1
                sysctl -w net.ipv6.conf.default.disable_ipv6=0 >/dev/null 2>&1
                sysctl -w net.ipv6.conf.lo.disable_ipv6=0 >/dev/null 2>&1
                
                echo -e "${gl_lv}‚úÖ Â∑≤ÊÅ¢Â§çÂà∞Á≥ªÁªüÈªòËÆ§ÔºàIPv6ÂêØÁî®Ôºâ${gl_bai}"
            fi
            
            echo ""
            echo -e "${gl_zi}[Ê≠•È™§ 4/4] Â∫îÁî®ÈÖçÁΩÆ...${gl_bai}"
            
            # Â∫îÁî®ÈÖçÁΩÆ
            sysctl --system >/dev/null 2>&1
            
            # È™åËØÅÁä∂ÊÄÅ
            local ipv6_status=$(sysctl -n net.ipv6.conf.all.disable_ipv6 2>/dev/null)
            
            echo ""
            if [ "$ipv6_status" = "0" ]; then
                echo -e "${gl_lv}‚úÖ IPv6 Â∑≤ÊÅ¢Â§çÂêØÁî®${gl_bai}"
                echo ""
                echo -e "${gl_zi}ËØ¥ÊòéÔºö${gl_bai}"
                echo "  - ÊâÄÊúâÁõ∏ÂÖ≥ÈÖçÁΩÆÊñá‰ª∂Â∑≤Ê∏ÖÁêÜ"
                echo "  - IPv6 Â∑≤ÂÆåÂÖ®ÊÅ¢Â§çÂà∞ÊâßË°åÊ∞∏‰πÖÁ¶ÅÁî®ÂâçÁöÑÁä∂ÊÄÅ"
                echo "  - ÈáçÂêØÂêéÊ≠§Áä∂ÊÄÅ‰æùÁÑ∂‰øùÊåÅ"
            else
                echo -e "${gl_huang}‚ö†Ô∏è  IPv6 Áä∂ÊÄÅ: Á¶ÅÁî®ÔºàÂÄº=${ipv6_status}Ôºâ${gl_bai}"
                echo ""
                echo "ÂèØËÉΩÂéüÂõ†Ôºö"
                echo "  - Á≥ªÁªü‰∏≠Â≠òÂú®ÂÖ∂‰ªñIPv6Á¶ÅÁî®ÈÖçÁΩÆ"
                echo "  - ÊâãÂä®ÊâßË°å sysctl -w ÂëΩ‰ª§ÈáçÊñ∞ÂêØÁî®IPv6"
            fi
            ;;
        *)
            echo "Â∑≤ÂèñÊ∂à"
            ;;
    esac
    
    echo ""
    break_end
}

manage_ipv6() {
    while true; do
        clear
        echo -e "${gl_kjlan}=== IPv6 ÁÆ°ÁêÜ ===${gl_bai}"
        echo ""
        
        # ÊòæÁ§∫ÂΩìÂâçIPv6Áä∂ÊÄÅ
        local ipv6_status=$(sysctl -n net.ipv6.conf.all.disable_ipv6 2>/dev/null)
        local status_text=""
        local status_color=""
        
        if [ "$ipv6_status" = "0" ]; then
            status_text="ÂêØÁî®"
            status_color="${gl_lv}"
        else
            status_text="Á¶ÅÁî®"
            status_color="${gl_hong}"
        fi
        
        echo -e "ÂΩìÂâçÁä∂ÊÄÅ: ${status_color}${status_text}${gl_bai}"
        echo ""
        
        # Ê£ÄÊü•ÊòØÂê¶Â≠òÂú®Ê∞∏‰πÖÁ¶ÅÁî®ÈÖçÁΩÆ
        if [ -f /etc/sysctl.d/99-disable-ipv6.conf ]; then
            echo -e "${gl_huang}‚ö†Ô∏è  Ê£ÄÊµãÂà∞Ê∞∏‰πÖÁ¶ÅÁî®ÈÖçÁΩÆÊñá‰ª∂${gl_bai}"
            echo ""
        fi
        
        echo "------------------------------------------------"
        echo "1. ‰∏¥Êó∂Á¶ÅÁî®IPv6ÔºàÈáçÂêØÂêéÊÅ¢Â§çÔºâ"
        echo "2. Ê∞∏‰πÖÁ¶ÅÁî®IPv6ÔºàÈáçÂêØÂêé‰ªçÁîüÊïàÔºâ"
        echo "3. ÂèñÊ∂àÊ∞∏‰πÖÁ¶ÅÁî®ÔºàÂÆåÂÖ®ËøòÂéüÔºâ"
        echo "0. ËøîÂõû‰∏ªËèúÂçï"
        echo "------------------------------------------------"
        read -e -p "ËØ∑ËæìÂÖ•ÈÄâÊã©: " choice
        
        case "$choice" in
            1)
                disable_ipv6_temporary
                ;;
            2)
                disable_ipv6_permanent
                ;;
            3)
                cancel_ipv6_permanent_disable
                ;;
            0)
                return
                ;;
            *)
                echo "Êó†ÊïàÈÄâÊã©"
                sleep 2
                ;;
        esac
    done
}

#=============================================================================
# Realm ËΩ¨ÂèëËøûÊé•ÂàÜÊûêÂ∑•ÂÖ∑
#=============================================================================

analyze_realm_connections() {
    clear
    echo -e "${gl_kjlan}=========================================="
    echo "         Realm ËΩ¨ÂèëËøûÊé•ÂÆûÊó∂ÂàÜÊûêÂ∑•ÂÖ∑"
    echo -e "==========================================${gl_bai}"
    echo ""
    
    # Ê≠•È™§1ÔºöÊ£ÄÊµã Realm ËøõÁ®ã
    echo -e "${gl_zi}[Ê≠•È™§ 1/3] Ê£ÄÊµã Realm ËøõÁ®ã...${gl_bai}"
    
    local realm_pids=$(pgrep -x realm 2>/dev/null)
    if [ -z "$realm_pids" ]; then
        echo -e "${gl_hong}‚ùå Êú™Ê£ÄÊµãÂà∞ Realm ËøõÁ®ã${gl_bai}"
        echo ""
        echo "ÂèØËÉΩÂéüÂõ†Ôºö"
        echo "  - Realm ÊúçÂä°Êú™ÂêØÂä®"
        echo "  - Realm ËøõÁ®ãÂêç‰∏çÊòØ 'realm'"
        echo ""
        echo "Â∞ùËØïÊâãÂä®Êü•ÊâæÔºö"
        echo "  ps aux | grep -i realm"
        echo ""
        break_end
        return 1
    fi
    
    local realm_pid=$(echo "$realm_pids" | head -1)
    echo -e "${gl_lv}‚úÖ ÊâæÂà∞ Realm ËøõÁ®ã: PID ${realm_pid}${gl_bai}"
    echo ""
    
    # Ê≠•È™§2ÔºöÂàÜÊûêÂÖ•Á´ôËøûÊé•
    echo -e "${gl_zi}[Ê≠•È™§ 2/3] ÂàÜÊûêÂÖ•Á´ôËøûÊé•...${gl_bai}"
    echo "Ê≠£Âú®Êâ´ÊèèÊâÄÊúâÊ¥ªË∑ÉËøûÊé•..."
    echo ""
    
    # Ëé∑ÂèñÊâÄÊúâ realm Áõ∏ÂÖ≥ÁöÑËøûÊé•Ôºà‰ºòÂÖà‰ΩøÁî® PID Á≤æÁ°ÆÂåπÈÖçÔºâ
    local realm_connections=$(ss -tnp 2>/dev/null | grep "pid=${realm_pid}" | grep "ESTAB")
    
    # Â¶ÇÊûúÈÄöËøá PID Ê≤°ÊâæÂà∞ÔºåÂ∞ùËØïÈÄöËøáËøõÁ®ãÂêçÊü•Êâæ
    if [ -z "$realm_connections" ]; then
        realm_connections=$(ss -tnp 2>/dev/null | grep -i "realm" | grep "ESTAB")
    fi
    
    if [ -z "$realm_connections" ]; then
        echo -e "${gl_huang}‚ö†Ô∏è  Êú™ÂèëÁé∞Ê¥ªË∑ÉËøûÊé•${gl_bai}"
        echo ""
        echo -e "${gl_zi}Ë∞ÉËØï‰ø°ÊÅØÔºö${gl_bai}"
        echo "Â∞ùËØïÊü•Áúã Realm ËøõÁ®ãÁöÑÊâÄÊúâËøûÊé•Ôºö"
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        ss -tnp 2>/dev/null | grep "pid=${realm_pid}" | head -10
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo ""
        echo "ÂèØËÉΩÂéüÂõ†Ôºö"
        echo "  1. Realm ËΩ¨ÂèëÊúçÂä°ÂàöÂêØÂä®ÔºåËøòÊ≤°ÊúâÂÆ¢Êà∑Á´ØËøûÊé•"
        echo "  2. ÂÆ¢Êà∑Á´ØÊöÇÊó∂Êñ≠ÂºÄËøûÊé•"
        echo "  3. Realm ÈÖçÁΩÆ‰∏≠Ê≤°ÊúâÊ¥ªË∑ÉÁöÑËΩ¨ÂèëËßÑÂàô"
        echo ""
        echo "Âª∫ËÆÆÊìç‰ΩúÔºö"
        echo "  - ‰ΩøÁî®ÂÆ¢Êà∑Á´ØËøûÊé•ÂêéÂÜçËøêË°åÊ≠§Â∑•ÂÖ∑"
        echo "  - Ê£ÄÊü• Realm ÈÖçÁΩÆ: cat /etc/realm/config.toml"
        echo "  - Êü•Áúã Realm Êó•Âøó: journalctl -u realm -f"
        echo ""
        break_end
        return 1
    fi
    
    # Ê≠•È™§3ÔºöÁîüÊàêÂàÜÊûêÊä•Âëä
    echo -e "${gl_zi}[Ê≠•È™§ 3/3] ÁîüÊàêÂàÜÊûêÊä•Âëä...${gl_bai}"
    echo ""
    
    # ÊèêÂèñÂπ∂ÁªüËÆ°Ê∫êIP
    local source_ips=$(echo "$realm_connections" | awk '{print $5}' | sed 's/::ffff://' | cut -d: -f1 | grep -v "^\[" | sort | uniq)
    
    # Â§ÑÁêÜIPv6Âú∞ÂùÄ
    local source_ips_v6=$(echo "$realm_connections" | awk '{print $5}' | grep "^\[" | sed 's/\]:.*/\]/' | sed 's/\[//' | sed 's/\]//' | sed 's/::ffff://' | sort | uniq)
    
    # ÂêàÂπ∂
    local all_source_ips=$(echo -e "${source_ips}\n${source_ips_v6}" | grep -v "^$" | sort | uniq)
    
    local total_sources=$(echo "$all_source_ips" | wc -l)
    local total_connections=$(echo "$realm_connections" | wc -c)
    
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "                    ÂàÜÊûêÁªìÊûú"
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    
    local source_num=1
    local ipv4_total=0
    local ipv6_total=0
    
    # ÈÅçÂéÜÊØè‰∏™Ê∫êIP
    for source_ip in $all_source_ips; do
        # ÁªüËÆ°ËøûÊé•Êï∞
        local conn_count_v4=$(echo "$realm_connections" | grep -c "${source_ip}:")
        local conn_count_v6_mapped=$(echo "$realm_connections" | grep -c "::ffff:${source_ip}")
        local conn_count=$((conn_count_v4 + conn_count_v6_mapped))
        
        # Âà§Êñ≠ÂçèËÆÆÁ±ªÂûãÔºàÊ≥®ÊÑèÔºö::ffff: ÂºÄÂ§¥ÁöÑÊòØ IPv4-mapped IPv6ÔºåÊú¨Ë¥®ÊòØ IPv4Ôºâ
        local protocol_type=""
        if [ $conn_count_v6_mapped -gt 0 ]; then
            protocol_type="‚úÖ IPv4ÔºàIPv6Êò†Â∞ÑÊ†ºÂºèÔºâ"
            ipv4_total=$((ipv4_total + conn_count))
        else
            protocol_type="‚úÖ Á∫ØIPv4"
            ipv4_total=$((ipv4_total + conn_count))
        fi
        
        # Ëé∑ÂèñÊú¨Âú∞ÁõëÂê¨Á´ØÂè£ÔºàÂÖºÂÆπ IPv4 Âíå IPv6 Êò†Â∞ÑÊ†ºÂºèÔºâ
        local local_port=$(echo "$realm_connections" | grep "${source_ip}" | awk '{print $4}' | sed 's/.*[:\]]//' | head -1)
        
        # IPÂΩíÂ±ûÊü•ËØ¢ÔºàÁÆÄÂåñÁâàÔºåÈÅøÂÖçËøáÂ§öAPIË∞ÉÁî®Ôºâ
        local ip_info=""
        if command -v curl &>/dev/null; then
            ip_info=$(timeout 2 curl -s "http://ip-api.com/json/${source_ip}?lang=zh-CN&fields=country,regionName,city,isp,as" 2>/dev/null)
            if [ $? -eq 0 ] && [ -n "$ip_info" ]; then
                local country=$(echo "$ip_info" | grep -o '"country":"[^"]*"' | cut -d'"' -f4)
                local region=$(echo "$ip_info" | grep -o '"regionName":"[^"]*"' | cut -d'"' -f4)
                local city=$(echo "$ip_info" | grep -o '"city":"[^"]*"' | cut -d'"' -f4)
                local isp=$(echo "$ip_info" | grep -o '"isp":"[^"]*"' | cut -d'"' -f4)
                local as_num=$(echo "$ip_info" | grep -o '"as":"[^"]*"' | cut -d'"' -f4)
                
                ip_location="${country} ${region} ${city} ${isp}"
                [ -n "$as_num" ] && ip_as="$as_num" || ip_as="Êú™Áü•"
            else
                ip_location="Êü•ËØ¢Â§±Ë¥•"
                ip_as="Êú™Áü•"
            fi
        else
            ip_location="ÈúÄË¶Å curl ÂëΩ‰ª§"
            ip_as="Êú™Áü•"
        fi
        
        # ÊòæÁ§∫Ê∫ê‰ø°ÊÅØ
        echo -e "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ËΩ¨ÂèëÊ∫ê #${source_num} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
        echo -e "‚îÇ                                          ‚îÇ"
        echo -e "‚îÇ  Ê∫êIPÂú∞ÂùÄ:   ${gl_huang}${source_ip}${gl_bai}"
        echo -e "‚îÇ  IPÂΩíÂ±û:     ${ip_location}"
        [ -n "$ip_as" ] && echo -e "‚îÇ  ASÂè∑:       ${ip_as}"
        echo -e "‚îÇ  ËøûÊé•Êï∞:     ${gl_lv}${conn_count}${gl_bai} ‰∏™"
        echo -e "‚îÇ  ÂçèËÆÆÁ±ªÂûã:   ${protocol_type}"
        echo -e "‚îÇ  Êú¨Âú∞ÁõëÂê¨:   ${local_port}"
        echo -e "‚îÇ  Áä∂ÊÄÅ:       ${gl_lv}‚úÖ Ê≠£Â∏∏${gl_bai}"
        echo -e "‚îÇ                                          ‚îÇ"
        echo -e "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        echo ""
        
        source_num=$((source_num + 1))
    done
    
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "                   ÁªüËÆ°ÊëòË¶Å"
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    echo -e "  ‚Ä¢ ËΩ¨ÂèëÊ∫êÊÄªÊï∞:     ${gl_lv}${total_sources}${gl_bai} ‰∏™"
    echo -e "  ‚Ä¢ Ê¥ªË∑ÉËøûÊé•ÊÄªÊï∞:   ${gl_lv}${ipv4_total}${gl_bai} ‰∏™"
    echo -e "  ‚Ä¢ IPv4ËøûÊé•:       ${gl_lv}${ipv4_total}${gl_bai} ‰∏™ ‚úÖ"
    echo -e "  ‚Ä¢ IPv6ËøûÊé•:       ${ipv6_total} ‰∏™"
    
    if [ $ipv6_total -eq 0 ]; then
        echo -e "  ‚Ä¢ ÁªìËÆ∫:           ${gl_lv}100% ‰ΩøÁî® IPv4 ÈìæË∑Ø ‚úÖ${gl_bai}"
    else
        echo -e "  ‚Ä¢ ÁªìËÆ∫:           ${gl_huang}Â≠òÂú® IPv6 ËøûÊé•${gl_bai}"
    fi
    
    echo ""
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    
    # ‰∫§‰∫íÂºèÈÄâÈ°π
    echo -e "${gl_zi}[Êìç‰ΩúÈÄâÈ°π]${gl_bai}"
    echo "1. Êü•ÁúãËØ¶ÁªÜËøûÊé•ÂàóË°®"
    echo "2. ÂØºÂá∫ÂàÜÊûêÊä•ÂëäÂà∞Êñá‰ª∂"
    echo "3. ÂÆûÊó∂ÁõëÊéßËøûÊé•ÂèòÂåñ"
    echo "4. Ê£ÄÊµãÁâπÂÆöÊ∫êIP"
    echo "0. ËøîÂõû‰∏ªËèúÂçï"
    echo ""
    read -e -p "ËØ∑ËæìÂÖ•ÈÄâÊã©: " sub_choice
    
    case "$sub_choice" in
        1)
            # Êü•ÁúãËØ¶ÁªÜËøûÊé•ÂàóË°®
            clear
            echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
            echo "           ËØ¶ÁªÜËøûÊé•ÂàóË°®"
            echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
            echo ""
            
            for source_ip in $all_source_ips; do
                echo -e "${gl_huang}Ê∫êIP: ${source_ip}${gl_bai}"
                echo ""
                echo "Êú¨Âú∞Âú∞ÂùÄ:Á´ØÂè£          ËøúÁ®ãÂú∞ÂùÄ:Á´ØÂè£           Áä∂ÊÄÅ"
                echo "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ"
                ss -tnp 2>/dev/null | grep "realm" | grep "${source_ip}" | awk '{printf "%-23s %-23s %s\n", $4, $5, $1}' | head -20
                echo ""
            done
            
            break_end
            ;;
        2)
            # ÂØºÂá∫Êä•Âëä
            local report_file="/root/realm_analysis_$(date +%Y%m%d_%H%M%S).txt"
            {
                echo "Realm ËΩ¨ÂèëËøûÊé•ÂàÜÊûêÊä•Âëä"
                echo "ÁîüÊàêÊó∂Èó¥: $(date '+%Y-%m-%d %H:%M:%S')"
                echo "Á≥ªÁªü: $(uname -r)"
                echo ""
                echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
                echo ""
                
                for source_ip in $all_source_ips; do
                    local conn_count=$(echo "$realm_connections" | grep -c "${source_ip}")
                    echo "Ê∫êIP: ${source_ip}"
                    echo "ËøûÊé•Êï∞: ${conn_count}"
                    echo ""
                    ss -tnp 2>/dev/null | grep "realm" | grep "${source_ip}"
                    echo ""
                done
            } > "$report_file"
            
            echo ""
            echo -e "${gl_lv}‚úÖ Êä•ÂëäÂ∑≤ÂØºÂá∫Âà∞: ${report_file}${gl_bai}"
            echo ""
            break_end
            ;;
        3)
            # ÂÆûÊó∂ÁõëÊéß
            clear
            echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
            echo "        ÂÆûÊó∂ÁõëÊéßÊ®°Âºè (ÊØè5ÁßíÂà∑Êñ∞)"
            echo "        Êåâ Ctrl+C ÈÄÄÂá∫"
            echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
            echo ""
            
            while true; do
                echo "[$(date '+%H:%M:%S')]"
                for source_ip in $all_source_ips; do
                    local conn_count=$(ss -tnp 2>/dev/null | grep "realm" | grep -c "${source_ip}")
                    echo -e "Ê∫êIP: ${source_ip} | ËøûÊé•: ${conn_count} | IPv4: ‚úÖ"
                done
                echo ""
                sleep 5
            done
            ;;
        4)
            # Ê£ÄÊµãÁâπÂÆöIP
            echo ""
            read -e -p "ËØ∑ËæìÂÖ•Ë¶ÅÊ£ÄÊµãÁöÑÊ∫êIP: " target_ip
            
            if [ -z "$target_ip" ]; then
                echo -e "${gl_hong}‚ùå IP‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
                break_end
                return 1
            fi
            
            clear
            echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
            echo "     Ê∑±Â∫¶ÂàÜÊûê: ${target_ip}"
            echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
            echo ""
            
            local target_conn_count=$(ss -tnp 2>/dev/null | grep "realm" | grep -c "${target_ip}")
            
            if [ $target_conn_count -eq 0 ]; then
                echo -e "${gl_huang}‚ö†Ô∏è  Êú™ÂèëÁé∞Êù•Ëá™Ê≠§IPÁöÑËøûÊé•${gl_bai}"
            else
                echo -e "‚Ä¢ ÊÄªËøûÊé•Êï∞: ${gl_lv}${target_conn_count}${gl_bai}"
                echo "‚Ä¢ ÂçèËÆÆÂàÜÂ∏É: IPv4 100%"
                echo "‚Ä¢ ËøûÊé•Áä∂ÊÄÅ: ÂÖ®ÈÉ® ESTABLISHED"
                echo ""
                echo "ËØ¶ÁªÜËøûÊé•Ôºö"
                ss -tnp 2>/dev/null | grep "realm" | grep "${target_ip}"
            fi
            
            echo ""
            break_end
            ;;
        0|*)
            return
            ;;
    esac
}

#=============================================================================
# Realm IPv4 Âº∫Âà∂ËΩ¨ÂèëÁÆ°ÁêÜ
#=============================================================================

# Â§á‰ªΩÂΩìÂâçÈÖçÁΩÆ
backup_realm_config() {
    local backup_dir="/root/.realm_backup"
    
    # ÂàõÂª∫Â§á‰ªΩÁõÆÂΩï
    if [ ! -d "$backup_dir" ]; then
        mkdir -p "$backup_dir"
    fi
    
    # Ê£ÄÊü•ÊòØÂê¶Â∑≤Â≠òÂú®Â§á‰ªΩ
    if [ -f "$backup_dir/resolv.conf.bak" ] || [ -f "$backup_dir/config.json.bak" ]; then
        echo -e "${gl_huang}‚ö†Ô∏è  ÂèëÁé∞Â∑≤Â≠òÂú®ÁöÑÂ§á‰ªΩ${gl_bai}"
        
        if [ -f "$backup_dir/backup_time.txt" ]; then
            echo -n "Â§á‰ªΩÊó∂Èó¥: "
            cat "$backup_dir/backup_time.txt"
        fi
        
        echo ""
        read -p "ÊòØÂê¶Ë¶ÜÁõñÁé∞ÊúâÂ§á‰ªΩ? [y/N]: " overwrite
        
        if [[ ! "$overwrite" =~ ^[Yy]$ ]]; then
            echo -e "${gl_huang}Â∑≤ÂèñÊ∂àÂ§á‰ªΩÊìç‰Ωú${gl_bai}"
            return 1
        fi
    fi
    
    echo -e "${gl_zi}Ê≠£Âú®Â§á‰ªΩÈÖçÁΩÆÊñá‰ª∂...${gl_bai}"
    
    # Â§á‰ªΩ resolv.conf
    if [ -f /etc/resolv.conf ]; then
        cp /etc/resolv.conf "$backup_dir/resolv.conf.bak"
        echo -e "${gl_lv}‚úÖ Â∑≤Â§á‰ªΩ /etc/resolv.conf${gl_bai}"
    else
        echo -e "${gl_huang}‚ö†Ô∏è  /etc/resolv.conf ‰∏çÂ≠òÂú®${gl_bai}"
    fi
    
    # Â§á‰ªΩ realm config
    if [ -f /etc/realm/config.json ]; then
        cp /etc/realm/config.json "$backup_dir/config.json.bak"
        echo -e "${gl_lv}‚úÖ Â∑≤Â§á‰ªΩ /etc/realm/config.json${gl_bai}"
    else
        echo -e "${gl_huang}‚ö†Ô∏è  /etc/realm/config.json ‰∏çÂ≠òÂú®${gl_bai}"
    fi
    
    # ËÆ∞ÂΩïÂ§á‰ªΩÊó∂Èó¥
    date '+%Y-%m-%d %H:%M:%S' > "$backup_dir/backup_time.txt"
    
    echo ""
    echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÂ§á‰ªΩÂÆåÊàêÔºÅ${gl_bai}"
    return 0
}

# ÂêØÁî® Realm IPv4 Âº∫Âà∂ËΩ¨Âèë
enable_realm_ipv4() {
    clear
    echo -e "${gl_kjlan}=========================================="
    echo "      ÂêØÁî® Realm IPv4 Âº∫Âà∂ËΩ¨Âèë"
    echo -e "==========================================${gl_bai}"
    echo ""
    
    # Ê≠•È™§1ÔºöÂ§á‰ªΩÈÖçÁΩÆ
    echo -e "${gl_zi}[Ê≠•È™§ 1/5] Â§á‰ªΩÂΩìÂâçÈÖçÁΩÆ...${gl_bai}"
    echo ""
    
    if ! backup_realm_config; then
        echo ""
        break_end
        return 1
    fi
    
    echo ""
    
    # Ê≠•È™§2Ôºö‰øÆÊîπ resolv.conf
    echo -e "${gl_zi}[Ê≠•È™§ 2/5] ‰øÆÊîπ DNS ÈÖçÁΩÆ...${gl_bai}"
    
    if [ -f /etc/resolv.conf ]; then
        # Âà†Èô§ IPv6 DNS ÊúçÂä°Âô®Ë°å
        local ipv6_dns_count=$(grep -c ':' /etc/resolv.conf 2>/dev/null || echo "0")
        
        if [ "$ipv6_dns_count" -gt 0 ]; then
            sed -i '/nameserver.*:/d' /etc/resolv.conf
            echo -e "${gl_lv}‚úÖ Â∑≤Âà†Èô§ ${ipv6_dns_count} ‰∏™ IPv6 DNS ÊúçÂä°Âô®${gl_bai}"
        else
            echo -e "${gl_lv}‚úÖ Êú™ÂèëÁé∞ IPv6 DNS ÊúçÂä°Âô®${gl_bai}"
        fi
    else
        echo -e "${gl_hong}‚ùå /etc/resolv.conf ‰∏çÂ≠òÂú®${gl_bai}"
    fi
    
    echo ""
    
    # Ê≠•È™§3Ôºö‰øÆÊîπ Realm ÈÖçÁΩÆ
    echo -e "${gl_zi}[Ê≠•È™§ 3/5] ‰øÆÊîπ Realm ÈÖçÁΩÆ...${gl_bai}"
    
    if [ ! -f /etc/realm/config.json ]; then
        echo -e "${gl_hong}‚ùå /etc/realm/config.json ‰∏çÂ≠òÂú®${gl_bai}"
        echo ""
        break_end
        return 1
    fi
    
    # Ê£ÄÊü•ÊòØÂê¶ÂÆâË£Ö‰∫Ü jq
    if ! command -v jq &>/dev/null; then
        echo "Ê≠£Âú®ÂÆâË£Ö jq..."
        apt-get update -qq && apt-get install -y jq >/dev/null 2>&1
    fi
    
    # ‰ΩøÁî® sed ÂíåÊâãÂä®ÁºñËæëÊù•‰øÆÊîπÈÖçÁΩÆ
    local temp_config="/tmp/realm_config_temp.json"
    
    # ËØªÂèñÂéüÈÖçÁΩÆ
    cat /etc/realm/config.json > "$temp_config"
    
    # Ê∑ªÂä† resolve: ipv4 (Âú®Á¨¨‰∏Ä‰∏™ { ÂêéÊèíÂÖ•)
    if ! grep -q '"resolve"' "$temp_config"; then
        sed -i '0,/{/s/{/{\n    "resolve": "ipv4",/' "$temp_config"
        echo -e "${gl_lv}‚úÖ Â∑≤Ê∑ªÂä† resolve: ipv4${gl_bai}"
    else
        echo -e "${gl_lv}‚úÖ resolve ÈÖçÁΩÆÂ∑≤Â≠òÂú®${gl_bai}"
    fi
    
    # ÊõøÊç¢ÊâÄÊúâ ::: ‰∏∫ 0.0.0.0
    local listen_count=$(grep -c ':::' "$temp_config" 2>/dev/null || echo "0")
    
    if [ "$listen_count" -gt 0 ]; then
        sed -i 's/":::/"0.0.0.0:/g' "$temp_config"
        echo -e "${gl_lv}‚úÖ Â∑≤‰øÆÊîπ ${listen_count} ‰∏™ÁõëÂê¨Âú∞ÂùÄ‰∏∫ 0.0.0.0${gl_bai}"
    else
        echo -e "${gl_lv}‚úÖ ÁõëÂê¨Âú∞ÂùÄÂ∑≤ÁªèÊòØ IPv4 Ê†ºÂºè${gl_bai}"
    fi
    
    # È™åËØÅ JSON Ê†ºÂºè
    if command -v jq &>/dev/null; then
        if jq empty "$temp_config" 2>/dev/null; then
            mv "$temp_config" /etc/realm/config.json
            echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÈ™åËØÅÈÄöËøá${gl_bai}"
        else
            echo -e "${gl_hong}‚ùå ÈÖçÁΩÆÊñá‰ª∂Ê†ºÂºèÈîôËØØÔºåÂ∑≤ÂõûÊªö${gl_bai}"
            rm "$temp_config"
            return 1
        fi
    else
        mv "$temp_config" /etc/realm/config.json
    fi
    
    echo ""
    
    # Ê≠•È™§4ÔºöÈáçÂêØ Realm ÊúçÂä°
    echo -e "${gl_zi}[Ê≠•È™§ 4/5] ÈáçÂêØ Realm ÊúçÂä°...${gl_bai}"
    
    if systemctl restart realm 2>/dev/null; then
        sleep 2
        
        if systemctl is-active --quiet realm; then
            echo -e "${gl_lv}‚úÖ Realm ÊúçÂä°ÈáçÂêØÊàêÂäü${gl_bai}"
        else
            echo -e "${gl_hong}‚ùå Realm ÊúçÂä°ÂêØÂä®Â§±Ë¥•${gl_bai}"
            echo ""
            echo "Êü•ÁúãÊúçÂä°Áä∂ÊÄÅÔºö"
            systemctl status realm --no-pager -l
        fi
    else
        echo -e "${gl_huang}‚ö†Ô∏è  Êú™ÊâæÂà∞ realm systemd ÊúçÂä°${gl_bai}"
        echo "Â¶ÇÊûú‰ΩøÁî®ÂÖ∂‰ªñÊñπÂºèÂêØÂä®ÔºåËØ∑ÊâãÂä®ÈáçÂêØ Realm"
    fi
    
    echo ""
    
    # Ê≠•È™§5ÔºöÈ™åËØÅÈÖçÁΩÆ
    echo -e "${gl_zi}[Ê≠•È™§ 5/5] È™åËØÅÈÖçÁΩÆ...${gl_bai}"
    echo ""
    
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo -e "${gl_huang}DNS ÈÖçÁΩÆ:${gl_bai}"
    grep '^nameserver' /etc/resolv.conf 2>/dev/null || echo "Êó† DNS ÈÖçÁΩÆ"
    echo ""
    
    echo -e "${gl_huang}Realm ÁõëÂê¨Á´ØÂè£:${gl_bai}"
    ss -tlnp 2>/dev/null | grep realm | awk '{print $4}' | head -5 || echo "Êó†ÁõëÂê¨Á´ØÂè£"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    echo -e "${gl_lv}üéâ IPv4 Âº∫Âà∂ËΩ¨ÂèëÈÖçÁΩÆÂÆåÊàêÔºÅ${gl_bai}"
    echo ""
    echo "È™åËØÅÊñπÊ≥ïÔºö"
    echo "  ss -tlnp | grep realm"
    echo "  (Â∫îËØ•Âè™ÊòæÁ§∫ 0.0.0.0:Á´ØÂè£ÔºåËÄå‰∏çÊòØ [::]:Á´ØÂè£)"
    echo ""
    
    break_end
}

# ËøòÂéüÂéüÂßãÈÖçÁΩÆ
restore_realm_config() {
    clear
    echo -e "${gl_kjlan}=========================================="
    echo "        ËøòÂéü Realm ÂéüÂßãÈÖçÁΩÆ"
    echo -e "==========================================${gl_bai}"
    echo ""
    
    local backup_dir="/root/.realm_backup"
    
    # Ê£ÄÊü•Â§á‰ªΩÊòØÂê¶Â≠òÂú®
    if [ ! -d "$backup_dir" ]; then
        echo -e "${gl_hong}‚ùå Â§á‰ªΩÁõÆÂΩï‰∏çÂ≠òÂú®${gl_bai}"
        echo ""
        echo "ÂèØËÉΩÂéüÂõ†Ôºö"
        echo "  - ‰ªéÊú™ÊâßË°åËøá IPv4 Âº∫Âà∂ËΩ¨ÂèëÈÖçÁΩÆ"
        echo "  - Â§á‰ªΩÊñá‰ª∂Â∑≤Ë¢´Âà†Èô§"
        echo ""
        break_end
        return 1
    fi
    
    if [ ! -f "$backup_dir/resolv.conf.bak" ] && [ ! -f "$backup_dir/config.json.bak" ]; then
        echo -e "${gl_hong}‚ùå Êú™ÊâæÂà∞Â§á‰ªΩÊñá‰ª∂${gl_bai}"
        echo ""
        break_end
        return 1
    fi
    
    # ÊòæÁ§∫Â§á‰ªΩ‰ø°ÊÅØ
    echo -e "${gl_zi}Â§á‰ªΩ‰ø°ÊÅØ:${gl_bai}"
    if [ -f "$backup_dir/backup_time.txt" ]; then
        echo -n "Â§á‰ªΩÊó∂Èó¥: "
        cat "$backup_dir/backup_time.txt"
    fi
    echo ""
    
    read -p "Á°ÆËÆ§ËøòÂéüÈÖçÁΩÆ? [y/N]: " confirm
    
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo -e "${gl_huang}Â∑≤ÂèñÊ∂àËøòÂéüÊìç‰Ωú${gl_bai}"
        echo ""
        break_end
        return 1
    fi
    
    echo ""
    echo -e "${gl_zi}Ê≠£Âú®ËøòÂéüÈÖçÁΩÆÊñá‰ª∂...${gl_bai}"
    
    # ËøòÂéü resolv.conf
    if [ -f "$backup_dir/resolv.conf.bak" ]; then
        cp "$backup_dir/resolv.conf.bak" /etc/resolv.conf
        echo -e "${gl_lv}‚úÖ Â∑≤ËøòÂéü /etc/resolv.conf${gl_bai}"
    fi
    
    # ËøòÂéü realm config
    if [ -f "$backup_dir/config.json.bak" ]; then
        cp "$backup_dir/config.json.bak" /etc/realm/config.json
        echo -e "${gl_lv}‚úÖ Â∑≤ËøòÂéü /etc/realm/config.json${gl_bai}"
    fi
    
    echo ""
    
    # ÈáçÂêØÊúçÂä°
    echo -e "${gl_zi}Ê≠£Âú®ÈáçÂêØ Realm ÊúçÂä°...${gl_bai}"
    
    if systemctl restart realm 2>/dev/null; then
        sleep 2
        
        if systemctl is-active --quiet realm; then
            echo -e "${gl_lv}‚úÖ Realm ÊúçÂä°ÈáçÂêØÊàêÂäü${gl_bai}"
        else
            echo -e "${gl_hong}‚ùå Realm ÊúçÂä°ÂêØÂä®Â§±Ë¥•${gl_bai}"
        fi
    else
        echo -e "${gl_huang}‚ö†Ô∏è  Êú™ÊâæÂà∞ realm systemd ÊúçÂä°${gl_bai}"
    fi
    
    echo ""
    echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆËøòÂéüÂÆåÊàêÔºÅ${gl_bai}"
    echo ""
    
    break_end
}

# Realm IPv4 ÁÆ°ÁêÜ‰∏ªËèúÂçï
realm_ipv4_management() {
    while true; do
        clear
        echo -e "${gl_kjlan}=========================================="
        echo "      Realm ËΩ¨ÂèëÂº∫Âà∂‰ΩøÁî® IPv4"
        echo -e "==========================================${gl_bai}"
        echo ""
        
        # ÊòæÁ§∫ÂΩìÂâçÁä∂ÊÄÅ
        echo -e "${gl_zi}ÂΩìÂâçÁä∂ÊÄÅ:${gl_bai}"
        
        # Ê£ÄÊü•Â§á‰ªΩ
        if [ -d /root/.realm_backup ] && [ -f /root/.realm_backup/config.json.bak ]; then
            echo -e "Â§á‰ªΩÁä∂ÊÄÅ: ${gl_lv}‚úÖ Â∑≤Â§á‰ªΩ${gl_bai}"
            if [ -f /root/.realm_backup/backup_time.txt ]; then
                echo -n "Â§á‰ªΩÊó∂Èó¥: "
                cat /root/.realm_backup/backup_time.txt
            fi
        else
            echo -e "Â§á‰ªΩÁä∂ÊÄÅ: ${gl_huang}‚ö†Ô∏è  Êú™Â§á‰ªΩ${gl_bai}"
        fi
        
        # Ê£ÄÊü• Realm ÈÖçÁΩÆ
        if [ -f /etc/realm/config.json ]; then
            if grep -q '"resolve".*"ipv4"' /etc/realm/config.json 2>/dev/null; then
                echo -e "IPv4Âº∫Âà∂: ${gl_lv}‚úÖ Â∑≤ÂêØÁî®${gl_bai}"
            else
                echo -e "IPv4Âº∫Âà∂: ${gl_huang}‚ö†Ô∏è  Êú™ÂêØÁî®${gl_bai}"
            fi
            
            local listen_ipv6=$(grep -c ':::' /etc/realm/config.json 2>/dev/null || echo "0")
            if [ "$listen_ipv6" -gt 0 ]; then
                echo -e "ÁõëÂê¨Âú∞ÂùÄ: ${gl_huang}Ê£ÄÊµãÂà∞ ${listen_ipv6} ‰∏™ IPv6 ÁõëÂê¨${gl_bai}"
            else
                echo -e "ÁõëÂê¨Âú∞ÂùÄ: ${gl_lv}‚úÖ IPv4 Ê†ºÂºè${gl_bai}"
            fi
        else
            echo -e "ÈÖçÁΩÆÊñá‰ª∂: ${gl_hong}‚ùå ‰∏çÂ≠òÂú®${gl_bai}"
        fi
        
        # Ê£ÄÊü• DNS
        if [ -f /etc/resolv.conf ]; then
            local ipv6_dns=$(grep -c 'nameserver.*:' /etc/resolv.conf 2>/dev/null || echo "0")
            if [ "$ipv6_dns" -gt 0 ]; then
                echo -e "DNSÈÖçÁΩÆ: ${gl_huang}Ê£ÄÊµãÂà∞ ${ipv6_dns} ‰∏™ IPv6 DNS${gl_bai}"
            else
                echo -e "DNSÈÖçÁΩÆ: ${gl_lv}‚úÖ ‰ªÖ IPv4 DNS${gl_bai}"
            fi
        fi
        
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo ""
        echo "1. ÂêØÁî® IPv4 Âº∫Âà∂ËΩ¨ÂèëÔºà‰ºöÂÖàÂ§á‰ªΩÔºâ"
        echo "2. ËøòÂéüÂà∞ÂéüÂßãÈÖçÁΩÆ"
        echo "3. Êü•ÁúãËØ¶ÁªÜÈÖçÁΩÆ"
        echo "0. ËøîÂõû‰∏ªËèúÂçï"
        echo ""
        
        read -p "ËØ∑ÈÄâÊã©Êìç‰Ωú [0-3]: " choice
        
        case $choice in
            1)
                enable_realm_ipv4
                ;;
            2)
                restore_realm_config
                ;;
            3)
                clear
                echo -e "${gl_kjlan}=========================================="
                echo "           ËØ¶ÁªÜÈÖçÁΩÆ‰ø°ÊÅØ"
                echo -e "==========================================${gl_bai}"
                echo ""
                
                echo -e "${gl_huang}=== DNS ÈÖçÁΩÆ ===${gl_bai}"
                cat /etc/resolv.conf 2>/dev/null || echo "Êñá‰ª∂‰∏çÂ≠òÂú®"
                echo ""
                
                echo -e "${gl_huang}=== Realm ÈÖçÁΩÆ ===${gl_bai}"
                cat /etc/realm/config.json 2>/dev/null || echo "Êñá‰ª∂‰∏çÂ≠òÂú®"
                echo ""
                
                echo -e "${gl_huang}=== Realm ÁõëÂê¨Á´ØÂè£ ===${gl_bai}"
                ss -tlnp 2>/dev/null | grep realm || echo "Êó†ÁõëÂê¨Á´ØÂè£"
                echo ""
                
                break_end
                ;;
            0)
                return 0
                ;;
            *)
                echo ""
                echo -e "${gl_hong}Êó†ÊïàÈÄâÊã©${gl_bai}"
                sleep 1
                ;;
        esac
    done
}

#=============================================================================
# IPv4/IPv6 ËøûÊé•Ê£ÄÊµãÂ∑•ÂÖ∑
#=============================================================================

# Âá∫Á´ôËøûÊé•Ê£ÄÊµã
check_outbound_connections() {
    local target_ipv4="$1"
    local target_ipv6="$2"
    
    clear
    echo -e "${gl_kjlan}=========================================="
    echo "Âá∫Á´ôËøûÊé•Ê£ÄÊµã - Êú¨Êú∫Âà∞ÁõÆÊ†áÊúçÂä°Âô®"
    echo -e "==========================================${gl_bai}"
    echo ""
    echo -e "ÁõÆÊ†áIPv4: ${gl_huang}${target_ipv4}${gl_bai}"
    echo -e "ÁõÆÊ†áIPv6: ${gl_huang}${target_ipv6}${gl_bai}"
    echo ""
    
    echo -e "${gl_zi}„Äê1/4„ÄëIPv4ËøûÊé•Êï∞Ôºö${gl_bai}"
    local ipv4_count=$(ss -4 -tn 2>/dev/null | grep -c "$target_ipv4")
    echo "$ipv4_count"
    
    echo ""
    echo -e "${gl_zi}„Äê2/4„ÄëIPv6ËøûÊé•Êï∞ÔºàÂ∫îËØ•ÊòØ0ÔºâÔºö${gl_bai}"
    local ipv6_count=$(ss -6 -tn 2>/dev/null | grep -c "$target_ipv6")
    echo "$ipv6_count"
    
    echo ""
    echo -e "${gl_zi}„Äê3/4„ÄëËøûÊé•ËØ¶ÊÉÖÔºàÂâç5Êù°ÔºâÔºö${gl_bai}"
    ss -tn 2>/dev/null | grep -E "($target_ipv4|$target_ipv6)" | head -5
    
    echo ""
    echo -e "${gl_zi}„Äê4/4„ÄëÊúÄÁªàÂà§Êñ≠Ôºö${gl_bai}"
    echo -e "IPv4ËøûÊé•: ${gl_lv}$ipv4_count${gl_bai} ‰∏™"
    echo -e "IPv6ËøûÊé•: ${gl_hong}$ipv6_count${gl_bai} ‰∏™"
    
    echo ""
    if [ "$ipv4_count" -gt 0 ] && [ "$ipv6_count" -eq 0 ]; then
        echo -e "${gl_lv}‚úì‚úì‚úì ÁªìËÆ∫Ôºö100% ‰ΩøÁî® IPv4 ÈìæË∑Ø ‚úì‚úì‚úì${gl_bai}"
    elif [ "$ipv6_count" -gt 0 ]; then
        echo -e "${gl_hong}‚ö†Ô∏è Ë≠¶ÂëäÔºöÊ£ÄÊµãÂà∞ IPv6 ËøûÊé•ÔºÅ${gl_bai}"
    else
        echo -e "${gl_huang}ÂΩìÂâçÊó†Ê¥ªÂä®ËøûÊé•${gl_bai}"
    fi
    
    echo ""
    break_end
}

# ÂÖ•Á´ôËøûÊé•Ê£ÄÊµã
check_inbound_connections() {
    local source_ipv4="$1"
    local source_ipv6="$2"
    
    clear
    echo -e "${gl_kjlan}=========================================="
    echo "ÂÖ•Á´ôËøûÊé•Ê£ÄÊµã - Êù•Ëá™Ê∫êÊúçÂä°Âô®ÁöÑËøûÊé•"
    echo -e "==========================================${gl_bai}"
    echo ""
    echo -e "Ê∫êIPv4: ${gl_huang}${source_ipv4}${gl_bai}"
    echo -e "Ê∫êIPv6: ${gl_huang}${source_ipv6}${gl_bai}"
    echo ""
    
    echo -e "${gl_zi}„Äê1/5„ÄëÊü•ÁúãÊâÄÊúâestablishedËøûÊé•ÔºàÂâç10Êù°ÔºâÔºö${gl_bai}"
    ss -tn state established 2>/dev/null | head -11
    
    echo ""
    echo -e "${gl_zi}„Äê2/5„ÄëÊü•ÁúãÊâÄÊúâÂåÖÂê´Ê∫ê IPv4 ÁöÑËøûÊé•Ôºö${gl_bai}"
    local ipv4_result=$(ss -tn 2>/dev/null | grep "$source_ipv4")
    if [ -n "$ipv4_result" ]; then
        echo "$ipv4_result"
    else
        echo "Êó†ËøûÊé•"
    fi
    
    echo ""
    echo -e "${gl_zi}„Äê3/5„ÄëÁªüËÆ°Êù•Ëá™Ê∫êÊúçÂä°Âô®ÁöÑËøûÊé•Êï∞Ôºö${gl_bai}"
    local ipv4_conn_count=$(ss -tn state established 2>/dev/null | grep -c "$source_ipv4")
    local ipv6_conn_count=$(ss -tn state established 2>/dev/null | grep -c "$source_ipv6")
    echo -e "Êù•Ëá™ ${gl_lv}${source_ipv4}${gl_bai} ÁöÑËøûÊé•: ${gl_lv}$ipv4_conn_count${gl_bai} ‰∏™"
    echo -e "Êù•Ëá™ ${gl_hong}${source_ipv6}${gl_bai} ÁöÑËøûÊé•: ${gl_hong}$ipv6_conn_count${gl_bai} ‰∏™"
    
    echo ""
    echo -e "${gl_zi}„Äê4/5„ÄëÊü•ÁúãÁõëÂê¨ÁöÑÁ´ØÂè£ÔºàÂâç5‰∏™ÔºâÔºö${gl_bai}"
    ss -tln 2>/dev/null | grep LISTEN | head -5
    
    echo ""
    echo -e "${gl_zi}„Äê5/5„ÄëÊü•ÁúãÊâÄÊúâÂÖ•Á´ôËøûÊé•ÔºàÊåâÊ∫êIPÁªüËÆ°ÔºåÂâç10‰∏™ÔºâÔºö${gl_bai}"
    ss -tn state established 2>/dev/null | awk '{print $4}' | grep -v "Peer" | cut -d: -f1 | sort | uniq -c | sort -rn | head -10
    
    echo ""
    echo -e "${gl_kjlan}==========================================${gl_bai}"
    echo -e "${gl_zi}ÊúÄÁªàÂà§Êñ≠Ôºö${gl_bai}"
    if [ "$ipv4_conn_count" -gt 0 ] && [ "$ipv6_conn_count" -eq 0 ]; then
        echo -e "${gl_lv}‚úì‚úì‚úì ÁªìËÆ∫Ôºö100% ‰ΩøÁî® IPv4 ÈìæË∑Ø ‚úì‚úì‚úì${gl_bai}"
    elif [ "$ipv6_conn_count" -gt 0 ]; then
        echo -e "${gl_hong}‚ö†Ô∏è Ë≠¶ÂëäÔºöÊ£ÄÊµãÂà∞ IPv6 ËøûÊé•ÔºÅ${gl_bai}"
    else
        echo -e "${gl_huang}ÂΩìÂâçÊó†Ê¥ªÂä®ËøûÊé•${gl_bai}"
    fi
    echo -e "${gl_kjlan}==========================================${gl_bai}"
    
    echo ""
    break_end
}

# Ëá™Âä®Ê£ÄÊµãÊâÄÊúâÂÖ•Á´ôËøûÊé•
check_all_inbound_connections() {
    clear
    echo -e "${gl_kjlan}=========================================="
    echo "Ëá™Âä®Ê£ÄÊµãÊâÄÊúâÂÖ•Á´ôËøûÊé•"
    echo -e "==========================================${gl_bai}"
    echo ""
    
    echo -e "${gl_zi}[1/3] Ëé∑ÂèñÊâÄÊúâ ESTABLISHED ÂÖ•Á´ôËøûÊé•...${gl_bai}"
    echo ""
    
    # Ëé∑ÂèñÊâÄÊúâ ESTABLISHED ËøûÊé•ÁöÑËøúÁ®ãÂú∞ÂùÄÔºàÂÖºÂÆπÂ§öÁßçssÁâàÊú¨Ôºâ
    # Â∞ùËØïÂ§öÁßçÊñπÂºèËé∑ÂèñËøûÊé•
    local connections=""
    
    # ÊñπÊ≥ï1Ôºö‰ΩøÁî® state ÂèÇÊï∞ÔºàÊñ∞ÁâàssÔºâ
    if ss -tn state established &>/dev/null; then
        connections=$(ss -tn state established 2>/dev/null | awk 'NR>1 && $1=="ESTAB" {print $5}' | grep -v "^$")
    fi
    
    # ÊñπÊ≥ï2Ôºö‰ΩøÁî® grep ESTABÔºàÂÖºÂÆπÊóßÁâàssÔºâ
    if [ -z "$connections" ]; then
        connections=$(ss -tn 2>/dev/null | grep ESTAB | awk '{print $5}' | grep -v "^$")
    fi
    
    # ÊñπÊ≥ï3Ôºö‰ΩøÁî® netstat ‰Ωú‰∏∫ÂêéÂ§á
    if [ -z "$connections" ] && command -v netstat &>/dev/null; then
        connections=$(netstat -tn 2>/dev/null | grep ESTABLISHED | awk '{print $5}' | grep -v "^$")
    fi
    
    # ËøáÊª§Êú¨Âú∞ÂõûÁéØËøûÊé•ÔºàÂèØÈÄâÔºå‰øùÁïôÊâÄÊúâËøûÊé•‰ª•‰æøË∞ÉËØïÔºâ
    # connections=$(echo "$connections" | grep -v "^127.0.0.1" | grep -v "^\[::1\]")
    
    # Ë∞ÉËØï‰ø°ÊÅØ
    local conn_count=$(echo "$connections" | wc -l | tr -d ' ')
    echo -e "${gl_zi}Ê£ÄÊµãÂà∞ ${gl_lv}${conn_count}${gl_zi} ‰∏™ESTABLISHEDËøûÊé•${gl_bai}"
    echo ""
    
    if [ -z "$connections" ] || [ "$conn_count" -eq 0 ]; then
        echo -e "${gl_huang}Êú™ÂèëÁé∞‰ªª‰ΩïÊ¥ªË∑ÉËøûÊé•${gl_bai}"
        echo ""
        echo "ÂèØËÉΩÁöÑÂéüÂõ†Ôºö"
        echo "1. ÂΩìÂâçÁ°ÆÂÆûÊ≤°ÊúâÂª∫Á´ãÁöÑTCPËøûÊé•"
        echo "2. ÈúÄË¶ÅrootÊùÉÈôêÊü•ÁúãÊâÄÊúâËøûÊé•ÔºàËØ∑‰ΩøÁî® sudo ËøêË°åÔºâ"
        echo "3. ËΩ¨ÂèëÂèØËÉΩ‰ΩøÁî®UDPÂçèËÆÆÔºàËØ∑Ê£ÄÊü• ss -un Êàñ netstat -unÔºâ"
        echo ""
        echo "Âø´ÈÄüÊ£ÄÊü•ÂëΩ‰ª§Ôºö"
        echo "  Êü•ÁúãTCP: ss -tn | grep ESTAB"
        echo "  Êü•ÁúãUDP: ss -un"
        echo "  Êü•ÁúãÁõëÂê¨Á´ØÂè£: ss -tlnp"
        echo "  Êü•ÁúãÊâÄÊúâËøûÊé•: ss -antp"
        echo ""
        
        # ÊòæÁ§∫ÂéüÂßãssËæìÂá∫Áî®‰∫éË∞ÉËØï
        echo -e "${gl_zi}‚ïê‚ïê‚ïê ÂéüÂßãËøûÊé•‰ø°ÊÅØÔºàË∞ÉËØïÁî®Ôºâ ‚ïê‚ïê‚ïê${gl_bai}"
        ss -tn 2>/dev/null | head -20
        echo ""
        
        break_end
        return 1
    fi
    
    echo -e "${gl_zi}[2/3] ÂàÜÊûêËøûÊé•ÂçèËÆÆÁ±ªÂûã...${gl_bai}"
    echo ""
    
    # ÁªüËÆ° IPv4 Âíå IPv6 ËøûÊé•
    # Ê≥®ÊÑèÔºö::ffff: ÂºÄÂ§¥ÁöÑÊòØ IPv4-mapped IPv6ÔºåÊú¨Ë¥®ÊòØ IPv4
    # ÂÖàÂéªÊéâÁ´ØÂè£Âè∑ÔºåÂÜçÁªüËÆ°
    local connections_no_port=$(echo "$connections" | sed 's/:[0-9]*$//')
    
    local ipv4_mapped=$(echo "$connections_no_port" | grep -c "::ffff:")
    local ipv6_real=$(echo "$connections_no_port" | grep ":" | grep -vc "::ffff:")
    local ipv4_pure=$(echo "$connections_no_port" | grep -vc ":")
    local ipv4_connections=$((ipv4_pure + ipv4_mapped))
    local ipv6_connections=$ipv6_real
    local total_connections=$(echo "$connections" | wc -l)
    
    # ÊèêÂèñÂîØ‰∏ÄÁöÑÊ∫ê IPÔºàÂéªÈáçÔºâ
    local unique_sources=$(echo "$connections_no_port" | sort -u)
    local source_count=$(echo "$unique_sources" | wc -l)
    
    echo -e "${gl_zi}[3/3] ÁîüÊàêÁªüËÆ°Êä•Âëä...${gl_bai}"
    echo ""
    
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "            ËøûÊé•ÁªüËÆ°ÊÄªËßà"
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    echo -e "  ‚Ä¢ ÊÄªËøûÊé•Êï∞:       ${gl_lv}${total_connections}${gl_bai}"
    echo -e "  ‚Ä¢ ÂîØ‰∏ÄÊ∫êIPÊï∞:     ${gl_huang}${source_count}${gl_bai}"
    echo ""
    echo -e "  ${gl_zi}ÂçèËÆÆÂàÜÂ∏ÉÔºö${gl_bai}"
    echo -e "    - IPv4ÔºàÁ∫ØÔºâ:    ${gl_lv}${ipv4_pure}${gl_bai} ‰∏™"
    echo -e "    - IPv4ÔºàÊò†Â∞ÑÔºâ:  ${gl_lv}${ipv4_mapped}${gl_bai} ‰∏™"
    echo -e "    - IPv4 ÊÄªËÆ°:     ${gl_lv}${ipv4_connections}${gl_bai} ‰∏™"
    echo -e "    - IPv6ÔºàÁúüÔºâ:    ${ipv6_connections} ‰∏™"
    echo ""
    
    if [ "$ipv6_connections" -eq 0 ]; then
        echo -e "  ${gl_lv}‚úÖ 100% ‰ΩøÁî® IPv4 ÈìæË∑ØÔºàÂåÖÂê´Êò†Â∞ÑÊ†ºÂºèÔºâ${gl_bai}"
    else
        local ipv4_percent=$((ipv4_connections * 100 / total_connections))
        local ipv6_percent=$((ipv6_connections * 100 / total_connections))
        echo -e "  ${gl_huang}‚ö†Ô∏è  Ê∑∑ÂêàÈìæË∑Ø: IPv4 ${ipv4_percent}% | IPv6 ${ipv6_percent}%${gl_bai}"
    fi
    
    echo ""
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    
    # ÊòæÁ§∫ Top 10 Ê∫ê IPÔºàÂ¢ûÂº∫ÁâàÔºöÂ∏¶ÂΩíÂ±û‰ø°ÊÅØÔºâ
    echo -e "${gl_zi}Top 10 ËøûÊé•Ê∫êËØ¶ÊÉÖÔºàÊåâËøûÊé•Êï∞ÊéíÂ∫èÔºâÔºö${gl_bai}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    local source_num=1
    echo "$connections" | sed 's/:[0-9]*$//' | sort | uniq -c | sort -rn | head -10 | while read count ip; do
        # ÊèêÂèñÁ∫Ø IPÔºàÂéªÈô§ÊñπÊã¨Âè∑Ôºâ
        local clean_ip=$(echo "$ip" | sed 's/\[::ffff://; s/\]//')
        
        # Âà§Êñ≠ÂçèËÆÆÁ±ªÂûã
        local protocol_type=""
        local protocol_color=""
        if echo "$ip" | grep -q "::ffff:"; then
            protocol_type="IPv4ÔºàÊò†Â∞ÑÊ†ºÂºèÔºâ"
            protocol_color="${gl_lv}"
        elif echo "$ip" | grep -q ":"; then
            protocol_type="IPv6ÔºàÁúüÔºâ"
            protocol_color="${gl_hong}"
        else
            protocol_type="Á∫ØIPv4"
            protocol_color="${gl_lv}"
            clean_ip="$ip"
        fi
        
        # IP ÂΩíÂ±ûÊü•ËØ¢
        local ip_location="Êü•ËØ¢‰∏≠..."
        local ip_as="Êú™Áü•"
        
        if command -v curl &>/dev/null; then
            local ip_info=$(timeout 2 curl -s "http://ip-api.com/json/${clean_ip}?lang=zh-CN&fields=country,regionName,city,isp,as" 2>/dev/null)
            if [ $? -eq 0 ] && [ -n "$ip_info" ]; then
                local country=$(echo "$ip_info" | grep -o '"country":"[^"]*"' | cut -d'"' -f4)
                local region=$(echo "$ip_info" | grep -o '"regionName":"[^"]*"' | cut -d'"' -f4)
                local city=$(echo "$ip_info" | grep -o '"city":"[^"]*"' | cut -d'"' -f4)
                local isp=$(echo "$ip_info" | grep -o '"isp":"[^"]*"' | cut -d'"' -f4)
                local as_num=$(echo "$ip_info" | grep -o '"as":"[^"]*"' | cut -d'"' -f4)
                
                ip_location="${country} ${region} ${city} ${isp}"
                [ -n "$as_num" ] && ip_as="$as_num" || ip_as="Êú™Áü•"
            else
                ip_location="Êü•ËØ¢Â§±Ë¥•"
                ip_as="Êú™Áü•"
            fi
        else
            ip_location="ÈúÄË¶Å curl ÂëΩ‰ª§"
            ip_as="Êú™Áü•"
        fi
        
        # ÁæéÂåñÊòæÁ§∫
        echo -e "‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ËøûÊé•Ê∫ê #${source_num} ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê"
        echo -e "‚îÇ  Ê∫êIPÂú∞ÂùÄ:   ${gl_huang}${clean_ip}${gl_bai}"
        echo -e "‚îÇ  IPÂΩíÂ±û:     ${ip_location}"
        [ -n "$ip_as" ] && echo -e "‚îÇ  ASÂè∑:       ${ip_as}"
        echo -e "‚îÇ  ËøûÊé•Êï∞:     ${gl_lv}${count}${gl_bai} ‰∏™"
        echo -e "‚îÇ  ÂçèËÆÆÁ±ªÂûã:   ${protocol_color}‚úÖ ${protocol_type}${gl_bai}"
        echo -e "‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò"
        echo ""
        
        source_num=$((source_num + 1))
    done
    
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    # ÊòæÁ§∫ÁõëÂê¨Á´ØÂè£
    echo -e "${gl_zi}Êú¨Âú∞ÁõëÂê¨Á´ØÂè£ÔºàTop 5ÔºâÔºö${gl_bai}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    ss -tln 2>/dev/null | awk 'NR>1 {print $4}' | sed 's/.*://' | sort | uniq -c | sort -rn | head -5 | while read count port; do
        echo -e "  Á´ØÂè£ ${gl_huang}${port}${gl_bai} - ${count} ‰∏™ÁõëÂê¨"
    done
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    break_end
}

# IPv4/IPv6 ËøûÊé•Ê£ÄÊµã‰∏ªËèúÂçï
check_ipv4v6_connections() {
    while true; do
        clear
        echo -e "${gl_kjlan}=== IPv4/IPv6 ËøûÊé•Ê£ÄÊµãÂ∑•ÂÖ∑ ===${gl_bai}"
        echo ""
        echo "Ê≠§Â∑•ÂÖ∑Áî®‰∫éÊ£ÄÊµãÁΩëÁªúËøûÊé•‰ΩøÁî®ÁöÑÊòØIPv4ËøòÊòØIPv6"
        echo "------------------------------------------------"
        echo "1. Ëá™Âä®Ê£ÄÊµãÊâÄÊúâÂÖ•Á´ôËøûÊé•ÔºàÊé®ËçêÔºåÊó†ÈúÄËæìÂÖ•IPÔºâ"
        echo "2. Âá∫Á´ôÊ£ÄÊµãÔºàÊ£ÄÊµãÊú¨Êú∫Âà∞ÁõÆÊ†áÊúçÂä°Âô®ÁöÑËøûÊé•Ôºâ"
        echo "3. ÂÖ•Á´ôÊ£ÄÊµãÔºàÊ£ÄÊµãÊù•Ëá™ÊåáÂÆöÊ∫êÊúçÂä°Âô®ÁöÑËøûÊé•Ôºâ"
        echo "0. ËøîÂõû‰∏ªËèúÂçï"
        echo "------------------------------------------------"
        read -e -p "ËØ∑ËæìÂÖ•ÈÄâÊã©: " choice
        
        case "$choice" in
            1)
                # Ëá™Âä®Ê£ÄÊµãÊâÄÊúâÂÖ•Á´ô
                check_all_inbound_connections
                ;;
            2)
                # Âá∫Á´ôÊ£ÄÊµã
                clear
                echo -e "${gl_kjlan}=== Âá∫Á´ôËøûÊé•Ê£ÄÊµã ===${gl_bai}"
                echo ""
                echo "ËØ∑ËæìÂÖ•ÁõÆÊ†áÊúçÂä°Âô®ÁöÑIPÂú∞ÂùÄ"
                echo "------------------------------------------------"
                
                # ËæìÂÖ•ÁõÆÊ†áIPv4Âú∞ÂùÄÔºàÂøÖÂ°´Ôºâ
                local target_ipv4=""
                while true; do
                    read -e -p "$(echo -e "${gl_huang}ÁõÆÊ†áÊúçÂä°Âô® IPv4 Âú∞ÂùÄ: ${gl_bai}")" target_ipv4
                    
                    if [ -z "$target_ipv4" ]; then
                        echo -e "${gl_hong}‚ùå IPv4Âú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
                    elif [[ "$target_ipv4" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
                        echo -e "${gl_lv}‚úÖ IPv4: ${target_ipv4}${gl_bai}"
                        break
                    else
                        echo -e "${gl_hong}‚ùå Êó†ÊïàÁöÑIPv4Âú∞ÂùÄÊ†ºÂºè${gl_bai}"
                    fi
                done
                
                # ËæìÂÖ•ÁõÆÊ†áIPv6Âú∞ÂùÄÔºàÂøÖÂ°´Ôºâ
                local target_ipv6=""
                while true; do
                    read -e -p "$(echo -e "${gl_huang}ÁõÆÊ†áÊúçÂä°Âô® IPv6 Âú∞ÂùÄ: ${gl_bai}")" target_ipv6
                    
                    if [ -z "$target_ipv6" ]; then
                        echo -e "${gl_hong}‚ùå IPv6Âú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
                    elif [[ "$target_ipv6" =~ : ]]; then
                        echo -e "${gl_lv}‚úÖ IPv6: ${target_ipv6}${gl_bai}"
                        break
                    else
                        echo -e "${gl_hong}‚ùå Êó†ÊïàÁöÑIPv6Âú∞ÂùÄÊ†ºÂºèÔºàÂ∫îÂåÖÂê´ÂÜíÂè∑Ôºâ${gl_bai}"
                    fi
                done
                
                # ÊâßË°åÊ£ÄÊµã
                check_outbound_connections "$target_ipv4" "$target_ipv6"
                ;;
            3)
                # ÂÖ•Á´ôÊ£ÄÊµã
                clear
                echo -e "${gl_kjlan}=== ÂÖ•Á´ôËøûÊé•Ê£ÄÊµã ===${gl_bai}"
                echo ""
                echo "ËØ∑ËæìÂÖ•Ê∫êÊúçÂä°Âô®ÁöÑIPÂú∞ÂùÄ"
                echo "------------------------------------------------"
                
                # ËæìÂÖ•Ê∫êIPv4Âú∞ÂùÄÔºàÂøÖÂ°´Ôºâ
                local source_ipv4=""
                while true; do
                    read -e -p "$(echo -e "${gl_huang}Ê∫êÊúçÂä°Âô® IPv4 Âú∞ÂùÄ: ${gl_bai}")" source_ipv4
                    
                    if [ -z "$source_ipv4" ]; then
                        echo -e "${gl_hong}‚ùå IPv4Âú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
                    elif [[ "$source_ipv4" =~ ^([0-9]{1,3}\.){3}[0-9]{1,3}$ ]]; then
                        echo -e "${gl_lv}‚úÖ IPv4: ${source_ipv4}${gl_bai}"
                        break
                    else
                        echo -e "${gl_hong}‚ùå Êó†ÊïàÁöÑIPv4Âú∞ÂùÄÊ†ºÂºè${gl_bai}"
                    fi
                done
                
                # ËæìÂÖ•Ê∫êIPv6Âú∞ÂùÄÔºàÂøÖÂ°´Ôºâ
                local source_ipv6=""
                while true; do
                    read -e -p "$(echo -e "${gl_huang}Ê∫êÊúçÂä°Âô® IPv6 Âú∞ÂùÄ: ${gl_bai}")" source_ipv6
                    
                    if [ -z "$source_ipv6" ]; then
                        echo -e "${gl_hong}‚ùå IPv6Âú∞ÂùÄ‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
                    elif [[ "$source_ipv6" =~ : ]]; then
                        echo -e "${gl_lv}‚úÖ IPv6: ${source_ipv6}${gl_bai}"
                        break
                    else
                        echo -e "${gl_hong}‚ùå Êó†ÊïàÁöÑIPv6Âú∞ÂùÄÊ†ºÂºèÔºàÂ∫îÂåÖÂê´ÂÜíÂè∑Ôºâ${gl_bai}"
                    fi
                done
                
                # ÊâßË°åÊ£ÄÊµã
                check_inbound_connections "$source_ipv4" "$source_ipv6"
                ;;
            0)
                return
                ;;
            *)
                echo "Êó†ÊïàÈÄâÊã©"
                sleep 2
                ;;
        esac
    done
}

show_xray_config() {
    clear
    echo -e "${gl_kjlan}=== Êü•Áúã Xray ÈÖçÁΩÆ ===${gl_bai}"
    echo ""

    if [ ! -f /usr/local/etc/xray/config.json ]; then
        echo -e "${gl_hong}ÈîôËØØ: Xray ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®${gl_bai}"
        echo "Ë∑ØÂæÑ: /usr/local/etc/xray/config.json"
        echo ""
        break_end
        return 1
    fi

    echo "Xray ÈÖçÁΩÆÊñá‰ª∂ÂÜÖÂÆπÔºö"
    echo "------------------------------------------------"
    cat /usr/local/etc/xray/config.json
    echo ""
    echo "------------------------------------------------"

    break_end
}

set_xray_ipv6_outbound() {
    clear
    echo -e "${gl_kjlan}=== ËÆæÁΩÆ Xray IPv6 Âá∫Á´ô ===${gl_bai}"
    echo ""

    # Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
    if [ ! -f /usr/local/etc/xray/config.json ]; then
        echo -e "${gl_hong}ÈîôËØØ: Xray ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®${gl_bai}"
        echo "Ë∑ØÂæÑ: /usr/local/etc/xray/config.json"
        echo ""
        break_end
        return 1
    fi

    # Ê£ÄÊü• jq ÊòØÂê¶ÂÆâË£Ö
    if ! command -v jq &>/dev/null; then
        echo -e "${gl_huang}jq Êú™ÂÆâË£ÖÔºåÊ≠£Âú®ÂÆâË£Ö...${gl_bai}"
        install_package jq
    fi

    # Ê£ÄÊü• xray ÂëΩ‰ª§ÊòØÂê¶Â≠òÂú®
    if ! command -v xray &>/dev/null; then
        echo -e "${gl_hong}ÈîôËØØ: xray ÂëΩ‰ª§‰∏çÂ≠òÂú®${gl_bai}"
        echo ""
        break_end
        return 1
    fi

    echo "Ê≠£Âú®Â§á‰ªΩÂΩìÂâçÈÖçÁΩÆ..."
    local backup_timestamp=$(date +%F-%H%M%S)
    cp /usr/local/etc/xray/config.json /usr/local/etc/xray/config.json.bak.${backup_timestamp}
    echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÂ∑≤Â§á‰ªΩ${gl_bai}"
    echo ""

    echo "Ê≠£Âú®‰øÆÊîπ‰∏∫ IPv6 Âá∫Á´ôÈÖçÁΩÆ..."
    jq '
      .outbounds = [
        {
          "protocol": "freedom",
          "settings": { "domainStrategy": "UseIPv4v6" },
          "sendThrough": "::"
        }
      ]
    ' /usr/local/etc/xray/config.json > /usr/local/etc/xray/config.json.new && \
    mv /usr/local/etc/xray/config.json.new /usr/local/etc/xray/config.json

    echo "Ê≠£Âú®ÊµãËØïÈÖçÁΩÆ..."
    if xray -test -config /usr/local/etc/xray/config.json; then
        echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÊµãËØïÈÄöËøá${gl_bai}"
        echo ""
        echo "Ê≠£Âú®ÈáçÂêØ Xray ÊúçÂä°..."
        systemctl restart xray
        echo -e "${gl_lv}‚úÖ Xray IPv6 Âá∫Á´ôÈÖçÁΩÆÂÆåÊàêÔºÅ${gl_bai}"
    else
        echo -e "${gl_hong}‚ùå ÈÖçÁΩÆÊµãËØïÂ§±Ë¥•ÔºåÂ∑≤ÂõûÊªö${gl_bai}"
        mv /usr/local/etc/xray/config.json.bak.${backup_timestamp} /usr/local/etc/xray/config.json
    fi

    echo ""
    break_end
}

restore_xray_default() {
    clear
    echo -e "${gl_kjlan}=== ÊÅ¢Â§ç Xray ÈªòËÆ§ÈÖçÁΩÆ ===${gl_bai}"
    echo ""

    # Ê£ÄÊü•ÈÖçÁΩÆÊñá‰ª∂ÊòØÂê¶Â≠òÂú®
    if [ ! -f /usr/local/etc/xray/config.json ]; then
        echo -e "${gl_hong}ÈîôËØØ: Xray ÈÖçÁΩÆÊñá‰ª∂‰∏çÂ≠òÂú®${gl_bai}"
        echo "Ë∑ØÂæÑ: /usr/local/etc/xray/config.json"
        echo ""
        break_end
        return 1
    fi

    # Ê£ÄÊü• jq ÊòØÂê¶ÂÆâË£Ö
    if ! command -v jq &>/dev/null; then
        echo -e "${gl_huang}jq Êú™ÂÆâË£ÖÔºåÊ≠£Âú®ÂÆâË£Ö...${gl_bai}"
        install_package jq
    fi

    # Ê£ÄÊü• xray ÂëΩ‰ª§ÊòØÂê¶Â≠òÂú®
    if ! command -v xray &>/dev/null; then
        echo -e "${gl_hong}ÈîôËØØ: xray ÂëΩ‰ª§‰∏çÂ≠òÂú®${gl_bai}"
        echo ""
        break_end
        return 1
    fi

    echo "Ê≠£Âú®Â§á‰ªΩÂΩìÂâçÈÖçÁΩÆ..."
    local backup_timestamp=$(date +%F-%H%M%S)
    cp /usr/local/etc/xray/config.json /usr/local/etc/xray/config.json.bak.${backup_timestamp}
    echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÂ∑≤Â§á‰ªΩ${gl_bai}"
    echo ""

    echo "Ê≠£Âú®ÊÅ¢Â§çÂèåÊ†àÊ®°Âºè..."
    jq '
      .outbounds = [
        {
          "protocol": "freedom",
          "settings": { "domainStrategy": "UseIPv4v6" }
        }
      ]
    ' /usr/local/etc/xray/config.json > /usr/local/etc/xray/config.json.new && \
    mv /usr/local/etc/xray/config.json.new /usr/local/etc/xray/config.json

    echo "Ê≠£Âú®ÊµãËØïÈÖçÁΩÆ..."
    if xray -test -config /usr/local/etc/xray/config.json; then
        echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÊµãËØïÈÄöËøá${gl_bai}"
        echo ""
        echo "Ê≠£Âú®ÈáçÂêØ Xray ÊúçÂä°..."
        systemctl restart xray
        echo -e "${gl_lv}‚úÖ Xray ÈªòËÆ§ÈÖçÁΩÆÂ∑≤ÊÅ¢Â§çÔºÅ${gl_bai}"
    else
        echo -e "${gl_hong}‚ùå ÈÖçÁΩÆÊµãËØïÂ§±Ë¥•ÔºåÂ∑≤ÂõûÊªö${gl_bai}"
        mv /usr/local/etc/xray/config.json.bak.${backup_timestamp} /usr/local/etc/xray/config.json
    fi

    echo ""
    break_end
}

server_reboot() {
    read -e -p "$(echo -e "${gl_huang}ÊèêÁ§∫: ${gl_bai}Áé∞Âú®ÈáçÂêØÊúçÂä°Âô®‰ΩøÈÖçÁΩÆÁîüÊïàÂêóÔºü(Y/N): ")" rboot
    case "$rboot" in
        [Yy])
            echo "Ê≠£Âú®ÈáçÂêØ..."
            reboot
            ;;
        *)
            echo "Â∑≤ÂèñÊ∂àÔºåËØ∑Á®çÂêéÊâãÂä®ÊâßË°å: reboot"
            ;;
    esac
}

#=============================================================================
# Â∏¶ÂÆΩÊ£ÄÊµãÂíåÁºìÂÜ≤Âå∫ËÆ°ÁÆóÂáΩÊï∞
#=============================================================================

# Â∏¶ÂÆΩÊ£ÄÊµãÂáΩÊï∞
detect_bandwidth() {
    # ÊâÄÊúâ‰∫§‰∫íÂºèËæìÂá∫ÈáçÂÆöÂêëÂà∞stderrÔºåÈÅøÂÖçË¢´ÂëΩ‰ª§ÊõøÊç¢ÊçïËé∑
    echo "" >&2
    echo -e "${gl_kjlan}=== ÊúçÂä°Âô®Â∏¶ÂÆΩÊ£ÄÊµã ===${gl_bai}" >&2
    echo "" >&2
    echo "ËØ∑ÈÄâÊã©Â∏¶ÂÆΩÈÖçÁΩÆÊñπÂºèÔºö" >&2
    echo "1. Ëá™Âä®Ê£ÄÊµãÔºàÊé®ËçêÔºåËá™Âä®ÈÄâÊã©ÊúÄËøëÊúçÂä°Âô®Ôºâ" >&2
    echo "2. ÊâãÂä®ÊåáÂÆöÊµãÈÄüÊúçÂä°Âô®ÔºàÊåáÂÆöÊúçÂä°Âô®IDÔºâ" >&2
    echo "3. ‰ΩøÁî®ÈªòËÆ§ÂÄºÔºà1000 Mbps / 1 GbpsÔºåË∑≥ËøáÊ£ÄÊµãÔºâ" >&2
    echo "" >&2
    
    read -e -p "ËØ∑ËæìÂÖ•ÈÄâÊã© [1]: " bw_choice
    bw_choice=${bw_choice:-1}
    
    case "$bw_choice" in
        1)
            # Ëá™Âä®Ê£ÄÊµãÂ∏¶ÂÆΩ - ÈÄâÊã©ÊúÄËøëÊúçÂä°Âô®
            echo "" >&2
            echo -e "${gl_huang}Ê≠£Âú®ËøêË°å speedtest ÊµãÈÄü...${gl_bai}" >&2
            echo -e "${gl_zi}ÊèêÁ§∫: Ëá™Âä®ÈÄâÊã©Ë∑ùÁ¶ªÊúÄËøëÁöÑÊúçÂä°Âô®${gl_bai}" >&2
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
            echo "" >&2
            
            # Ê£ÄÊü•speedtestÊòØÂê¶ÂÆâË£Ö
            if ! command -v speedtest &>/dev/null; then
                echo -e "${gl_huang}speedtest Êú™ÂÆâË£ÖÔºåÊ≠£Âú®ÂÆâË£Ö...${gl_bai}" >&2
                # Ë∞ÉÁî®ËÑöÊú¨‰∏≠Â∑≤ÊúâÁöÑÂÆâË£ÖÈÄªËæëÔºàÁÆÄÂåñÁâàÔºâ
                local cpu_arch=$(uname -m)
                local download_url
                case "$cpu_arch" in
                    x86_64)
                        download_url="https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-x86_64.tgz"
                        ;;
                    aarch64)
                        download_url="https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-aarch64.tgz"
                        ;;
                    *)
                        echo -e "${gl_hong}ÈîôËØØ: ‰∏çÊîØÊåÅÁöÑÊû∂ÊûÑ ${cpu_arch}${gl_bai}" >&2
                        echo "Â∞Ü‰ΩøÁî®ÈÄöÁî®ÂÄº 16MB" >&2
                        echo "500"
                        return 1
                        ;;
                esac
                
                cd /tmp
                wget -q "$download_url" -O speedtest.tgz && \
                tar -xzf speedtest.tgz && \
                mv speedtest /usr/local/bin/ && \
                rm -f speedtest.tgz
                
                if [ $? -ne 0 ]; then
                    echo -e "${gl_hong}ÂÆâË£ÖÂ§±Ë¥•ÔºåÂ∞Ü‰ΩøÁî®ÈÄöÁî®ÂÄº${gl_bai}" >&2
                    echo "500"
                    return 1
                fi
            fi
            
            # Êô∫ËÉΩÊµãÈÄüÔºöËé∑ÂèñÈôÑËøëÊúçÂä°Âô®ÂàóË°®ÔºåÊåâË∑ùÁ¶ª‰æùÊ¨°Â∞ùËØï
            echo -e "${gl_zi}Ê≠£Âú®ÊêúÁ¥¢ÈôÑËøëÊµãÈÄüÊúçÂä°Âô®...${gl_bai}" >&2
            
            # Ëé∑ÂèñÈôÑËøëÊúçÂä°Âô®ÂàóË°®ÔºàÊåâÂª∂ËøüÊéíÂ∫èÔºâ
            local servers_list=$(speedtest --accept-license --servers 2>/dev/null | grep -oP '^\s*\K[0-9]+' | head -n 10)
            
            if [ -z "$servers_list" ]; then
                echo -e "${gl_huang}Êó†Ê≥ïËé∑ÂèñÊúçÂä°Âô®ÂàóË°®Ôºå‰ΩøÁî®Ëá™Âä®ÈÄâÊã©...${gl_bai}" >&2
                servers_list="auto"
            else
                local server_count=$(echo "$servers_list" | wc -l)
                echo -e "${gl_lv}‚úÖ ÊâæÂà∞ ${server_count} ‰∏™ÈôÑËøëÊúçÂä°Âô®${gl_bai}" >&2
            fi
            echo "" >&2
            
            local speedtest_output=""
            local upload_speed=""
            local attempt=0
            local max_attempts=5  # ÊúÄÂ§öÂ∞ùËØï5‰∏™ÊúçÂä°Âô®
            
            # ÈÄê‰∏™Â∞ùËØïÊúçÂä°Âô®
            for server_id in $servers_list; do
                attempt=$((attempt + 1))
                
                if [ $attempt -gt $max_attempts ]; then
                    echo -e "${gl_huang}Â∑≤Â∞ùËØï ${max_attempts} ‰∏™ÊúçÂä°Âô®ÔºåÂÅúÊ≠¢Â∞ùËØï${gl_bai}" >&2
                    break
                fi
                
                if [ "$server_id" = "auto" ]; then
                    echo -e "${gl_zi}[Â∞ùËØï ${attempt}] Ëá™Âä®ÈÄâÊã©ÊúÄËøëÊúçÂä°Âô®...${gl_bai}" >&2
                    speedtest_output=$(speedtest --accept-license 2>&1)
                else
                    echo -e "${gl_zi}[Â∞ùËØï ${attempt}] ÊµãËØïÊúçÂä°Âô® #${server_id}...${gl_bai}" >&2
                    speedtest_output=$(speedtest --accept-license --server-id="$server_id" 2>&1)
                fi
                
                echo "$speedtest_output" >&2
                echo "" >&2
                
                # ÊèêÂèñ‰∏ä‰º†ÈÄüÂ∫¶
                upload_speed=""
                if echo "$speedtest_output" | grep -q "Upload:"; then
                    upload_speed=$(echo "$speedtest_output" | grep -i "Upload:" | grep -oP '\d+\.\d+' 2>/dev/null | head -n1)
                fi
                if [ -z "$upload_speed" ]; then
                    upload_speed=$(echo "$speedtest_output" | grep -i "Upload:" | awk '{for(i=1;i<=NF;i++) if($i ~ /^[0-9]+\.[0-9]+$/) {print $i; exit}}')
                fi
                
                # Ê£ÄÊü•ÊòØÂê¶ÊàêÂäü
                if [ -n "$upload_speed" ] && ! echo "$speedtest_output" | grep -qi "FAILED\|error"; then
                    local success_server=$(echo "$speedtest_output" | grep "Server:" | head -n1 | sed 's/.*Server: //')
                    echo -e "${gl_lv}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}" >&2
                    echo -e "${gl_lv}‚úÖ ÊµãÈÄüÊàêÂäüÔºÅ${gl_bai}" >&2
                    echo -e "${gl_zi}‰ΩøÁî®ÊúçÂä°Âô®: ${success_server}${gl_bai}" >&2
                    echo -e "${gl_lv}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}" >&2
                    echo "" >&2
                    break
                else
                    local failed_server=$(echo "$speedtest_output" | grep "Server:" | head -n1 | sed 's/.*Server: //' | sed 's/[[:space:]]*$//')
                    if [ -n "$failed_server" ]; then
                        echo -e "${gl_huang}‚ö†Ô∏è  Â§±Ë¥•: ${failed_server}${gl_bai}" >&2
                    else
                        echo -e "${gl_huang}‚ö†Ô∏è  Ê≠§ÊúçÂä°Âô®Â§±Ë¥•${gl_bai}" >&2
                    fi
                    echo -e "${gl_zi}ÁªßÁª≠Â∞ùËØï‰∏ã‰∏Ä‰∏™ÊúçÂä°Âô®...${gl_bai}" >&2
                    echo "" >&2
                fi
            done
            
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
            echo "" >&2
            
            # ÊâÄÊúâÂ∞ùËØïÈÉΩÂ§±Ë¥•‰∫Ü
            if [ -z "$upload_speed" ] || echo "$speedtest_output" | grep -qi "FAILED\|error"; then
                echo -e "${gl_huang}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}" >&2
                echo -e "${gl_huang}‚ö†Ô∏è  Êó†Ê≥ïËá™Âä®Ê£ÄÊµãÂ∏¶ÂÆΩ${gl_bai}" >&2
                echo -e "${gl_huang}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}" >&2
                echo "" >&2
                echo -e "${gl_zi}ÂéüÂõ†: ÊµãÈÄüÊúçÂä°Âô®ÂèØËÉΩÊöÇÊó∂‰∏çÂèØÁî®${gl_bai}" >&2
                echo "" >&2
                echo -e "${gl_kjlan}ÈªòËÆ§ÈÖçÁΩÆÊñπÊ°àÔºö${gl_bai}" >&2
                echo -e "  Â∏¶ÂÆΩ:       ${gl_huang}1000 Mbps (1 Gbps)${gl_bai}" >&2
                echo -e "  ÁºìÂÜ≤Âå∫:     ${gl_huang}16 MB${gl_bai}" >&2
                echo -e "  ÈÄÇÁî®Âú∫ÊôØ:   ${gl_zi}Ê†áÂáÜ 1Gbps ÊúçÂä°Âô®ÔºàË¶ÜÁõñÂ§ßÂ§öÊï∞Âú∫ÊôØÔºâ${gl_bai}" >&2
                echo "" >&2
                echo -e "${gl_huang}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}" >&2
                echo "" >&2
                
                # ËØ¢ÈóÆÁî®Êà∑Á°ÆËÆ§
                read -e -p "ÊòØÂê¶‰ΩøÁî®ÈªòËÆ§ÂÄº 1000 MbpsÔºü(Y/N) [Y]: " use_default
                use_default=${use_default:-Y}
                
                case "$use_default" in
                    [Yy])
                        echo "" >&2
                        echo -e "${gl_lv}‚úÖ ‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ: 1000 MbpsÔºà16 MB ÁºìÂÜ≤Âå∫Ôºâ${gl_bai}" >&2
                        echo "1000"
                        return 0
                        ;;
                    [Nn])
                        echo "" >&2
                        echo -e "${gl_zi}ËØ∑ÊâãÂä®ËæìÂÖ•Â∏¶ÂÆΩÂÄº${gl_bai}" >&2
                        local manual_bandwidth=""
                        while true; do
                            read -e -p "ËØ∑ËæìÂÖ•‰∏ä‰º†Â∏¶ÂÆΩÔºàÂçï‰ΩçÔºöMbpsÔºåÂ¶Ç 500„ÄÅ1000„ÄÅ2000Ôºâ: " manual_bandwidth
                            if [[ "$manual_bandwidth" =~ ^[0-9]+$ ]] && [ "$manual_bandwidth" -gt 0 ]; then
                                echo "" >&2
                                echo -e "${gl_lv}‚úÖ ‰ΩøÁî®Ëá™ÂÆö‰πâÂÄº: ${manual_bandwidth} Mbps${gl_bai}" >&2
                                echo "$manual_bandwidth"
                                return 0
                            else
                                echo -e "${gl_hong}‚ùå ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊï∞Â≠ó${gl_bai}" >&2
                            fi
                        done
                        ;;
                    *)
                        echo "" >&2
                        echo -e "${gl_huang}ËæìÂÖ•Êó†ÊïàÔºå‰ΩøÁî®ÈªòËÆ§ÂÄº 1000 Mbps${gl_bai}" >&2
                        echo "1000"
                        return 0
                        ;;
                esac
            fi
            
            # ËΩ¨‰∏∫Êï¥Êï∞
            local upload_mbps=${upload_speed%.*}
            
            echo -e "${gl_lv}‚úÖ Ê£ÄÊµãÂà∞‰∏ä‰º†Â∏¶ÂÆΩ: ${upload_mbps} Mbps${gl_bai}" >&2
            echo "" >&2
            
            # ËøîÂõûÂ∏¶ÂÆΩÂÄº
            echo "$upload_mbps"
            return 0
            ;;
        2)
            # ÊâãÂä®ÊåáÂÆöÊµãÈÄüÊúçÂä°Âô®ID
            echo "" >&2
            echo -e "${gl_kjlan}=== ÊâãÂä®ÊåáÂÆöÊµãÈÄüÊúçÂä°Âô® ===${gl_bai}" >&2
            echo "" >&2
            
            # Ê£ÄÊü•speedtestÊòØÂê¶ÂÆâË£Ö
            if ! command -v speedtest &>/dev/null; then
                echo -e "${gl_huang}speedtest Êú™ÂÆâË£ÖÔºåÊ≠£Âú®ÂÆâË£Ö...${gl_bai}" >&2
                local cpu_arch=$(uname -m)
                local download_url
                case "$cpu_arch" in
                    x86_64)
                        download_url="https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-x86_64.tgz"
                        ;;
                    aarch64)
                        download_url="https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-aarch64.tgz"
                        ;;
                    *)
                        echo -e "${gl_hong}ÈîôËØØ: ‰∏çÊîØÊåÅÁöÑÊû∂ÊûÑ ${cpu_arch}${gl_bai}" >&2
                        echo "Â∞Ü‰ΩøÁî®ÈÄöÁî®ÂÄº 1000 Mbps" >&2
                        echo "1000"
                        return 1
                        ;;
                esac
                
                cd /tmp
                wget -q "$download_url" -O speedtest.tgz && \
                tar -xzf speedtest.tgz && \
                mv speedtest /usr/local/bin/ && \
                rm -f speedtest.tgz
                
                if [ $? -ne 0 ]; then
                    echo -e "${gl_hong}ÂÆâË£ÖÂ§±Ë¥•ÔºåÂ∞Ü‰ΩøÁî®ÈªòËÆ§ÂÄº 1000 Mbps${gl_bai}" >&2
                    echo "1000"
                    return 1
                fi
                echo -e "${gl_lv}‚úÖ speedtest ÂÆâË£ÖÊàêÂäü${gl_bai}" >&2
                echo "" >&2
            fi
            
            # ÊòæÁ§∫Â¶Ç‰ΩïÊü•ÁúãÊúçÂä°Âô®ÂàóË°®
            echo -e "${gl_zi}üìã Â¶Ç‰ΩïÊü•ÁúãÂèØÁî®ÁöÑÊµãÈÄüÊúçÂä°Âô®Ôºö${gl_bai}" >&2
            echo "" >&2
            echo -e "  ÊñπÊ≥ï1ÔºöÊü•ÁúãÊâÄÊúâÊúçÂä°Âô®ÂàóË°®" >&2
            echo -e "  ${gl_huang}speedtest --servers${gl_bai}" >&2
            echo "" >&2
            echo -e "  ÊñπÊ≥ï2ÔºöÂè™ÊòæÁ§∫ÈôÑËøëÊúçÂä°Âô®ÔºàÊé®ËçêÔºâ" >&2
            echo -e "  ${gl_huang}speedtest --servers | head -n 20${gl_bai}" >&2
            echo "" >&2
            echo -e "${gl_zi}üí° ÊúçÂä°Âô®ÂàóË°®Ê†ºÂºèËØ¥ÊòéÔºö${gl_bai}" >&2
            echo -e "  ÊØèË°åÂºÄÂ§¥ÁöÑÊï∞Â≠óÂ∞±ÊòØÊúçÂä°Âô®ID" >&2
            echo -e "  ‰æãÂ¶Ç: ${gl_huang}12345${gl_bai}) ÊúçÂä°ÂïÜÂêçÁß∞ (‰ΩçÁΩÆ, Ë∑ùÁ¶ª)" >&2
            echo "" >&2
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
            echo "" >&2
            
            # ËØ¢ÈóÆÊòØÂê¶Áé∞Âú®Êü•ÁúãÊúçÂä°Âô®ÂàóË°®
            read -e -p "ÊòØÂê¶Áé∞Âú®Êü•ÁúãÈôÑËøëÁöÑÊµãÈÄüÊúçÂä°Âô®ÂàóË°®Ôºü(Y/N) [Y]: " show_list
            show_list=${show_list:-Y}
            
            if [[ "$show_list" =~ ^[Yy]$ ]]; then
                echo "" >&2
                echo -e "${gl_kjlan}ÈôÑËøëÁöÑÊµãÈÄüÊúçÂä°Âô®ÂàóË°®Ôºö${gl_bai}" >&2
                echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
                speedtest --accept-license --servers 2>/dev/null | head -n 20 >&2
                echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
                echo "" >&2
            fi
            
            # ËæìÂÖ•ÊúçÂä°Âô®ID
            local server_id=""
            while true; do
                read -e -p "$(echo -e "${gl_huang}ËØ∑ËæìÂÖ•ÊµãÈÄüÊúçÂä°Âô®IDÔºàÁ∫ØÊï∞Â≠óÔºâ: ${gl_bai}")" server_id
                
                if [[ "$server_id" =~ ^[0-9]+$ ]]; then
                    break
                else
                    echo -e "${gl_hong}‚ùå Êó†ÊïàËæìÂÖ•ÔºåËØ∑ËæìÂÖ•Á∫ØÊï∞Â≠óÁöÑÊúçÂä°Âô®ID${gl_bai}" >&2
                fi
            done
            
            # ‰ΩøÁî®ÊåáÂÆöÊúçÂä°Âô®ÊµãÈÄü
            echo "" >&2
            echo -e "${gl_huang}Ê≠£Âú®‰ΩøÁî®ÊúçÂä°Âô® #${server_id} ÊµãÈÄü...${gl_bai}" >&2
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
            echo "" >&2
            
            local speedtest_output=$(speedtest --accept-license --server-id="$server_id" 2>&1)
            echo "$speedtest_output" >&2
            echo "" >&2
            
            # ÊèêÂèñ‰∏ä‰º†ÈÄüÂ∫¶
            local upload_speed=""
            if echo "$speedtest_output" | grep -q "Upload:"; then
                upload_speed=$(echo "$speedtest_output" | grep -i "Upload:" | grep -oP '\d+\.\d+' 2>/dev/null | head -n1)
            fi
            if [ -z "$upload_speed" ]; then
                upload_speed=$(echo "$speedtest_output" | grep -i "Upload:" | awk '{for(i=1;i<=NF;i++) if($i ~ /^[0-9]+\.[0-9]+$/) {print $i; exit}}')
            fi
            
            # Ê£ÄÊü•ÊµãÈÄüÊòØÂê¶ÊàêÂäü
            if [ -n "$upload_speed" ] && ! echo "$speedtest_output" | grep -qi "FAILED\|error"; then
                local upload_mbps=${upload_speed%.*}
                echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
                echo -e "${gl_lv}‚úÖ ÊµãÈÄüÊàêÂäüÔºÅ${gl_bai}" >&2
                echo -e "${gl_lv}Ê£ÄÊµãÂà∞‰∏ä‰º†Â∏¶ÂÆΩ: ${upload_mbps} Mbps${gl_bai}" >&2
                echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
                echo "" >&2
                echo "$upload_mbps"
                return 0
            else
                echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
                echo -e "${gl_hong}‚ùå ÊµãÈÄüÂ§±Ë¥•${gl_bai}" >&2
                echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
                echo "" >&2
                echo -e "${gl_zi}ÂèØËÉΩÂéüÂõ†Ôºö${gl_bai}" >&2
                echo "  - ÊúçÂä°Âô®ID‰∏çÂ≠òÂú®ÊàñÂ∑≤‰∏ãÁ∫ø" >&2
                echo "  - ÁΩëÁªúËøûÊé•ÈóÆÈ¢ò" >&2
                echo "  - ËØ•ÊúçÂä°Âô®ÊöÇÊó∂‰∏çÂèØÁî®" >&2
                echo "" >&2
                
                read -e -p "ÊòØÂê¶‰ΩøÁî®ÈªòËÆ§ÂÄº 1000 MbpsÔºü(Y/N) [Y]: " use_default
                use_default=${use_default:-Y}
                
                if [[ "$use_default" =~ ^[Yy]$ ]]; then
                    echo "" >&2
                    echo -e "${gl_lv}‚úÖ ‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ: 1000 MbpsÔºà16 MB ÁºìÂÜ≤Âå∫Ôºâ${gl_bai}" >&2
                    echo "1000"
                    return 0
                else
                    echo "" >&2
                    echo -e "${gl_zi}ËØ∑ÊâãÂä®ËæìÂÖ•Â∏¶ÂÆΩÂÄº${gl_bai}" >&2
                    local manual_bandwidth=""
                    while true; do
                        read -e -p "ËØ∑ËæìÂÖ•‰∏ä‰º†Â∏¶ÂÆΩÔºàÂçï‰ΩçÔºöMbpsÔºåÂ¶Ç 500„ÄÅ1000„ÄÅ2000Ôºâ: " manual_bandwidth
                        if [[ "$manual_bandwidth" =~ ^[0-9]+$ ]] && [ "$manual_bandwidth" -gt 0 ]; then
                            echo "" >&2
                            echo -e "${gl_lv}‚úÖ ‰ΩøÁî®Ëá™ÂÆö‰πâÂÄº: ${manual_bandwidth} Mbps${gl_bai}" >&2
                            echo "$manual_bandwidth"
                            return 0
                        else
                            echo -e "${gl_hong}‚ùå ËØ∑ËæìÂÖ•ÊúâÊïàÁöÑÊï∞Â≠ó${gl_bai}" >&2
                        fi
                    done
                fi
            fi
            ;;
        3)
            # ‰ΩøÁî®ÈªòËÆ§ÂÄº
            echo "" >&2
            echo -e "${gl_lv}‰ΩøÁî®ÈªòËÆ§ÈÖçÁΩÆ: 1000 MbpsÔºà16 MB ÁºìÂÜ≤Âå∫Ôºâ${gl_bai}" >&2
            echo -e "${gl_zi}ËØ¥Êòé: ÈÄÇÂêàÊ†áÂáÜ 1Gbps ÊúçÂä°Âô®ÔºåË¶ÜÁõñÂ§ßÂ§öÊï∞Âú∫ÊôØ${gl_bai}" >&2
            echo "" >&2
            echo "1000"
            return 0
            ;;
        *)
            echo -e "${gl_huang}Êó†ÊïàÈÄâÊã©Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº 1000 Mbps${gl_bai}" >&2
            echo "1000"
            return 1
            ;;
    esac
}

# ÁºìÂÜ≤Âå∫Â§ßÂ∞èËÆ°ÁÆóÂáΩÊï∞
calculate_buffer_size() {
    local bandwidth=$1
    local buffer_mb
    local bandwidth_level
    
    # Ê†πÊçÆÂ∏¶ÂÆΩËåÉÂõ¥ËÆ°ÁÆóÊé®ËçêÁºìÂÜ≤Âå∫
    if [ "$bandwidth" -lt 500 ]; then
        buffer_mb=8
        bandwidth_level="Â∞èÂ∏¶ÂÆΩÔºà< 500 MbpsÔºâ"
    elif [ "$bandwidth" -lt 1000 ]; then
        buffer_mb=12
        bandwidth_level="‰∏≠Á≠âÂ∏¶ÂÆΩÔºà500-1000 MbpsÔºâ"
    elif [ "$bandwidth" -lt 2000 ]; then
        buffer_mb=16
        bandwidth_level="Ê†áÂáÜÂ∏¶ÂÆΩÔºà1-2 GbpsÔºâ"
    elif [ "$bandwidth" -lt 5000 ]; then
        buffer_mb=24
        bandwidth_level="È´òÂ∏¶ÂÆΩÔºà2-5 GbpsÔºâ"
    elif [ "$bandwidth" -lt 10000 ]; then
        buffer_mb=28
        bandwidth_level="Ë∂ÖÈ´òÂ∏¶ÂÆΩÔºà5-10 GbpsÔºâ"
    else
        buffer_mb=32
        bandwidth_level="ÊûÅÈ´òÂ∏¶ÂÆΩÔºà> 10 GbpsÔºâ"
    fi
    
    # ÊòæÁ§∫ËÆ°ÁÆóÁªìÊûúÔºàËæìÂá∫Âà∞stderrÔºâ
    echo "" >&2
    echo -e "${gl_kjlan}Ê†πÊçÆÂ∏¶ÂÆΩËÆ°ÁÆóÊúÄ‰ºòÁºìÂÜ≤Âå∫:${gl_bai}" >&2
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
    echo -e "  Ê£ÄÊµãÂ∏¶ÂÆΩ: ${gl_huang}${bandwidth} Mbps${gl_bai}" >&2
    echo -e "  Â∏¶ÂÆΩÁ≠âÁ∫ß: ${bandwidth_level}" >&2
    echo -e "  Êé®ËçêÁºìÂÜ≤Âå∫: ${gl_lv}${buffer_mb} MB${gl_bai}" >&2
    echo -e "  ËØ¥Êòé: ÈÄÇÂêàËØ•Â∏¶ÂÆΩÁöÑÊúÄ‰ºòÈÖçÁΩÆ" >&2
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ" >&2
    echo "" >&2
    
    # ËØ¢ÈóÆÁ°ÆËÆ§
    read -e -p "$(echo -e "${gl_huang}ÊòØÂê¶‰ΩøÁî®Êé®ËçêÂÄº ${buffer_mb}MBÔºü(Y/N) [Y]: ${gl_bai}")" confirm
    confirm=${confirm:-Y}
    
    case "$confirm" in
        [Yy])
            # ËøîÂõûÁºìÂÜ≤Âå∫Â§ßÂ∞èÔºàMBÔºâ
            echo "$buffer_mb"
            return 0
            ;;
        *)
            echo "" >&2
            echo -e "${gl_huang}Â∑≤ÂèñÊ∂àÔºåÂ∞Ü‰ΩøÁî®ÈÄöÁî®ÂÄº 16MB${gl_bai}" >&2
            echo "16"
            return 1
            ;;
    esac
}

#=============================================================================
# SWAPÊô∫ËÉΩÊ£ÄÊµãÂíåÂª∫ËÆÆÂáΩÊï∞ÔºàÈõÜÊàêÂà∞ÈÄâÈ°π2/3Ôºâ
#=============================================================================
check_and_suggest_swap() {
    local mem_total=$(free -m | awk 'NR==2{print $2}')
    local swap_total=$(free -m | awk 'NR==3{print $2}')
    local recommended_swap
    local need_swap=0
    
    # Âà§Êñ≠ÊòØÂê¶ÈúÄË¶ÅSWAP
    if [ "$mem_total" -lt 2048 ]; then
        # Â∞è‰∫é2GBÂÜÖÂ≠òÔºåÂº∫ÁÉàÂª∫ËÆÆÈÖçÁΩÆSWAP
        need_swap=1
    elif [ "$mem_total" -lt 4096 ] && [ "$swap_total" -eq 0 ]; then
        # 2-4GBÂÜÖÂ≠ò‰∏îÊ≤°ÊúâSWAPÔºåÂª∫ËÆÆÈÖçÁΩÆ
        need_swap=1
    fi
    
    # Â¶ÇÊûú‰∏çÈúÄË¶ÅSWAPÔºåÁõ¥Êé•ËøîÂõû
    if [ "$need_swap" -eq 0 ]; then
        return 0
    fi
    
    # ËÆ°ÁÆóÊé®ËçêÁöÑSWAPÂ§ßÂ∞è
    if [ "$mem_total" -lt 512 ]; then
        recommended_swap=1024
    elif [ "$mem_total" -lt 1024 ]; then
        recommended_swap=$((mem_total * 2))
    elif [ "$mem_total" -lt 2048 ]; then
        recommended_swap=$((mem_total * 3 / 2))
    elif [ "$mem_total" -lt 4096 ]; then
        recommended_swap=$mem_total
    else
        recommended_swap=4096
    fi
    
    # ÊòæÁ§∫Âª∫ËÆÆ‰ø°ÊÅØ
    echo ""
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "${gl_huang}Ê£ÄÊµãÂà∞ËôöÊãüÂÜÖÂ≠òÔºàSWAPÔºâÈúÄË¶Å‰ºòÂåñ${gl_bai}"
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    echo -e "  Áâ©ÁêÜÂÜÖÂ≠ò:       ${gl_huang}${mem_total}MB${gl_bai}"
    echo -e "  ÂΩìÂâç SWAP:      ${gl_huang}${swap_total}MB${gl_bai}"
    echo -e "  Êé®Ëçê SWAP:      ${gl_lv}${recommended_swap}MB${gl_bai}"
    echo ""
    
    if [ "$mem_total" -lt 1024 ]; then
        echo -e "${gl_zi}ÂéüÂõ†: Â∞èÂÜÖÂ≠òÊú∫Âô®Ôºà<1GBÔºâÂº∫ÁÉàÂª∫ËÆÆÈÖçÁΩÆSWAPÔºåÈÅøÂÖçÂÜÖÂ≠ò‰∏çË∂≥ÂØºËá¥Á®ãÂ∫èÂ¥©Ê∫É${gl_bai}"
    elif [ "$mem_total" -lt 2048 ]; then
        echo -e "${gl_zi}ÂéüÂõ†: 1-2GBÂÜÖÂ≠òÂª∫ËÆÆÈÖçÁΩÆSWAPÔºåÊèê‰æõÁºìÂÜ≤Á©∫Èó¥${gl_bai}"
    elif [ "$mem_total" -lt 4096 ]; then
        echo -e "${gl_zi}ÂéüÂõ†: 2-4GBÂÜÖÂ≠òÂª∫ËÆÆÈÖçÁΩÆÂ∞ëÈáèSWAP‰Ωú‰∏∫‰øùÈô©${gl_bai}"
    fi
    
    echo ""
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    
    # ËØ¢ÈóÆÁî®Êà∑
    read -e -p "$(echo -e "${gl_huang}ÊòØÂê¶Áé∞Âú®ÈÖçÁΩÆËôöÊãüÂÜÖÂ≠òÔºü(Y/N): ${gl_bai}")" confirm
    
    case "$confirm" in
        [Yy])
            echo ""
            echo -e "${gl_lv}ÂºÄÂßãÈÖçÁΩÆËôöÊãüÂÜÖÂ≠ò...${gl_bai}"
            echo ""
            add_swap "$recommended_swap"
            echo ""
            echo -e "${gl_lv}‚úÖ ËôöÊãüÂÜÖÂ≠òÈÖçÁΩÆÂÆåÊàêÔºÅ${gl_bai}"
            echo ""
            echo -e "${gl_zi}ÁªßÁª≠ÊâßË°å BBR ‰ºòÂåñÈÖçÁΩÆ...${gl_bai}"
            sleep 2
            return 0
            ;;
        [Nn])
            echo ""
            echo -e "${gl_huang}Â∑≤Ë∑≥ËøáËôöÊãüÂÜÖÂ≠òÈÖçÁΩÆ${gl_bai}"
            echo -e "${gl_zi}ÁªßÁª≠ÊâßË°å BBR ‰ºòÂåñÈÖçÁΩÆ...${gl_bai}"
            echo ""
            sleep 2
            return 1
            ;;
        *)
            echo ""
            echo -e "${gl_huang}ËæìÂÖ•Êó†ÊïàÔºåÂ∑≤Ë∑≥ËøáËôöÊãüÂÜÖÂ≠òÈÖçÁΩÆ${gl_bai}"
            echo -e "${gl_zi}ÁªßÁª≠ÊâßË°å BBR ‰ºòÂåñÈÖçÁΩÆ...${gl_bai}"
            echo ""
            sleep 2
            return 1
            ;;
    esac
}

#=============================================================================
# ÈÖçÁΩÆÂÜ≤Á™ÅÊ£ÄÊµã‰∏éÊ∏ÖÁêÜÔºàÈÅøÂÖçË¢´ÂÖ∂‰ªñ sysctl Ë¶ÜÁõñÔºâ
#=============================================================================
check_and_clean_conflicts() {
    echo -e "${gl_kjlan}=== Ê£ÄÊü• sysctl ÈÖçÁΩÆÂÜ≤Á™Å ===${gl_bai}"
    local conflicts=()
    # ÊêúÁ¥¢ /etc/sysctl.d/ ‰∏ãÂèØËÉΩË¶ÜÁõñ tcp_rmem/tcp_wmem ÁöÑÈ´òÂ∫èÂè∑Êñá‰ª∂
    for conf in /etc/sysctl.d/[0-9]*-*.conf /etc/sysctl.d/[0-9][0-9][0-9]-*.conf; do
        [ -f "$conf" ] || continue
        [ "$conf" = "$SYSCTL_CONF" ] && continue
        if grep -qE "(^|\s)net\.ipv4\.tcp_(rmem|wmem)" "$conf" 2>/dev/null; then
            base=$(basename "$conf")
            num=$(echo "$base" | sed -n 's/^\([0-9]\+\).*/\1/p')
            # 99 Âèä‰ª•‰∏ä‰ºòÂÖàÁîüÊïàÔºåÂèØËÉΩË¶ÜÁõñÊú¨ËÑöÊú¨
            if [ -n "$num" ] && [ "$num" -ge 99 ]; then
                conflicts+=("$conf")
            fi
        fi
    done

    # ‰∏ªÈÖçÁΩÆÊñá‰ª∂Áõ¥Êé•ËÆæÁΩÆ‰πü‰ºöË¶ÜÁõñ
    local has_sysctl_conflict=0
    if [ -f /etc/sysctl.conf ] && grep -qE "(^|\s)net\.ipv4\.tcp_(rmem|wmem)" /etc/sysctl.conf 2>/dev/null; then
        has_sysctl_conflict=1
    fi

    if [ ${#conflicts[@]} -eq 0 ] && [ $has_sysctl_conflict -eq 0 ]; then
        echo -e "${gl_lv}‚úì Êú™ÂèëÁé∞ÂèØËÉΩÁöÑË¶ÜÁõñÈÖçÁΩÆ${gl_bai}"
        return 0
    fi

    echo -e "${gl_huang}ÂèëÁé∞ÂèØËÉΩÁöÑË¶ÜÁõñÈÖçÁΩÆÔºö${gl_bai}"
    for f in "${conflicts[@]}"; do
        echo "  - $f"; grep -E "net\.ipv4\.tcp_(rmem|wmem)" "$f" | sed 's/^/      /'
    done
    [ $has_sysctl_conflict -eq 1 ] && echo "  - /etc/sysctl.conf (Âê´ tcp_rmem/tcp_wmem)"

    read -e -p "ÊòØÂê¶Ëá™Âä®Á¶ÅÁî®/Ê≥®ÈáäËøô‰∫õË¶ÜÁõñÈÖçÁΩÆÔºü(Y/N): " ans
    case "$ans" in
        [Yy])
            # Ê≥®Èáä /etc/sysctl.conf ‰∏≠Áõ∏ÂÖ≥Ë°å
            if [ $has_sysctl_conflict -eq 1 ]; then
                sed -i.bak '/^net\.ipv4\.tcp_wmem/s/^/# /' /etc/sysctl.conf 2>/dev/null
                sed -i.bak '/^net\.ipv4\.tcp_rmem/s/^/# /' /etc/sysctl.conf 2>/dev/null
                sed -i.bak '/^net\.core\.rmem_max/s/^/# /' /etc/sysctl.conf 2>/dev/null
                sed -i.bak '/^net\.core\.wmem_max/s/^/# /' /etc/sysctl.conf 2>/dev/null
                echo -e "${gl_lv}‚úì Â∑≤Ê≥®Èáä /etc/sysctl.conf ‰∏≠ÁöÑÁõ∏ÂÖ≥ÈÖçÁΩÆ${gl_bai}"
            fi
            # Â∞ÜÈ´ò‰ºòÂÖàÁ∫ßÂÜ≤Á™ÅÊñá‰ª∂ÈáçÂëΩÂêçÁ¶ÅÁî®
            for f in "${conflicts[@]}"; do
                mv "$f" "${f}.disabled.$(date +%Y%m%d_%H%M%S)" 2>/dev/null && \
                  echo -e "${gl_lv}‚úì Â∑≤Á¶ÅÁî®: $(basename "$f")${gl_bai}"
            done
            ;;
        *)
            echo -e "${gl_huang}Â∑≤Ë∑≥ËøáËá™Âä®Ê∏ÖÁêÜÔºåÂèØËÉΩÂØºËá¥Êñ∞ÈÖçÁΩÆÊú™ÂÆåÂÖ®ÁîüÊïà${gl_bai}"
            ;;
    esac
}

#=============================================================================
# Á´ãÂç≥ÁîüÊïà‰∏éÈò≤ÂàÜÁâáÂáΩÊï∞ÔºàÊó†ÈúÄÈáçÂêØÔºâ
#=============================================================================

# Ëé∑ÂèñÈúÄÂ∫îÁî® qdisc ÁöÑÁΩëÂç°ÔºàÊéíÈô§Â∏∏ËßÅËôöÊãüÊé•Âè£Ôºâ
eligible_ifaces() {
    for d in /sys/class/net/*; do
        [ -e "$d" ] || continue
        dev=$(basename "$d")
        case "$dev" in
            lo|docker*|veth*|br-*|virbr*|zt*|tailscale*|wg*|tun*|tap*) continue;;
        esac
        echo "$dev"
    done
}

# tc fq Á´ãÂç≥ÁîüÊïàÔºàÊó†ÈúÄÈáçÂêØÔºâ
apply_tc_fq_now() {
    if ! command -v tc >/dev/null 2>&1; then
        echo -e "${gl_huang}Ë≠¶Âëä: Êú™Ê£ÄÊµãÂà∞ tcÔºàiproute2ÔºâÔºåË∑≥Ëøá fq Â∫îÁî®${gl_bai}"
        return 0
    fi
    local applied=0
    for dev in $(eligible_ifaces); do
        tc qdisc replace dev "$dev" root fq 2>/dev/null && applied=$((applied+1))
    done
    [ $applied -gt 0 ] && echo -e "${gl_lv}Â∑≤ÂØπ $applied ‰∏™ÁΩëÂç°Â∫îÁî® fqÔºàÂç≥Êó∂ÁîüÊïàÔºâ${gl_bai}" || echo -e "${gl_huang}Êú™ÂèëÁé∞ÂèØÂ∫îÁî® fq ÁöÑÁΩëÂç°${gl_bai}"
}

# MSS clampÔºàÈò≤ÂàÜÁâáÔºâËá™Âä®ÂêØÁî®
apply_mss_clamp() {
    local action=$1  # enable|disable
    if ! command -v iptables >/dev/null 2>&1; then
        echo -e "${gl_huang}Ë≠¶Âëä: Êú™Ê£ÄÊµãÂà∞ iptablesÔºåË∑≥Ëøá MSS clamp${gl_bai}"
        return 0
    fi
    if [ "$action" = "enable" ]; then
        iptables -t mangle -C FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu >/dev/null 2>&1 \
          || iptables -t mangle -A FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
    else
        iptables -t mangle -D FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu >/dev/null 2>&1 || true
    fi
}

#=============================================================================
# BBR ÈÖçÁΩÆÂáΩÊï∞ÔºàÊô∫ËÉΩÊ£ÄÊµãÁâàÔºâ
#=============================================================================

# Áõ¥Ëøû/ËêΩÂú∞‰ºòÂåñÈÖçÁΩÆ
bbr_configure_direct() {
    echo -e "${gl_kjlan}=== ÈÖçÁΩÆ BBR v3 + FQ Áõ¥Ëøû/ËêΩÂú∞‰ºòÂåñÔºàÊô∫ËÉΩÊ£ÄÊµãÁâàÔºâ ===${gl_bai}"
    echo ""
    
    # Ê≠•È™§ 0ÔºöSWAPÊô∫ËÉΩÊ£ÄÊµãÂíåÂª∫ËÆÆ
    echo -e "${gl_zi}[Ê≠•È™§ 1/6] Ê£ÄÊµãËôöÊãüÂÜÖÂ≠òÔºàSWAPÔºâÈÖçÁΩÆ...${gl_bai}"
    check_and_suggest_swap
    
    # Ê≠•È™§ 0.5ÔºöÂ∏¶ÂÆΩÊ£ÄÊµãÂíåÁºìÂÜ≤Âå∫ËÆ°ÁÆó
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 2/6] Ê£ÄÊµãÊúçÂä°Âô®Â∏¶ÂÆΩÂπ∂ËÆ°ÁÆóÊúÄ‰ºòÁºìÂÜ≤Âå∫...${gl_bai}"
    
    local detected_bandwidth=$(detect_bandwidth)
    local buffer_mb=$(calculate_buffer_size "$detected_bandwidth")
    local buffer_bytes=$((buffer_mb * 1024 * 1024))
    
    echo -e "${gl_lv}‚úÖ Â∞Ü‰ΩøÁî® ${buffer_mb}MB ÁºìÂÜ≤Âå∫ÈÖçÁΩÆ${gl_bai}"
    sleep 2
    
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 3/6] Ê∏ÖÁêÜÈÖçÁΩÆÂÜ≤Á™Å...${gl_bai}"
    echo "Ê≠£Âú®Ê£ÄÊü•ÈÖçÁΩÆÂÜ≤Á™Å..."
    
    # Â§á‰ªΩ‰∏ªÈÖçÁΩÆÊñá‰ª∂ÔºàÂ¶ÇÊûúËøòÊ≤°Â§á‰ªΩÔºâ
    if [ -f /etc/sysctl.conf ] && ! [ -f /etc/sysctl.conf.bak.original ]; then
        cp /etc/sysctl.conf /etc/sysctl.conf.bak.original
        echo "Â∑≤Â§á‰ªΩ: /etc/sysctl.conf -> /etc/sysctl.conf.bak.original"
    fi
    
    # Ê≥®ÈáäÊéâ /etc/sysctl.conf ‰∏≠ÁöÑ TCP ÁºìÂÜ≤Âå∫ÈÖçÁΩÆÔºàÈÅøÂÖçË¶ÜÁõñÔºâ
    if [ -f /etc/sysctl.conf ]; then
        sed -i '/^net.ipv4.tcp_wmem/s/^/# /' /etc/sysctl.conf 2>/dev/null
        sed -i '/^net.ipv4.tcp_rmem/s/^/# /' /etc/sysctl.conf 2>/dev/null
        sed -i '/^net.core.rmem_max/s/^/# /' /etc/sysctl.conf 2>/dev/null
        sed -i '/^net.core.wmem_max/s/^/# /' /etc/sysctl.conf 2>/dev/null
        sed -i '/^net.core.default_qdisc/s/^/# /' /etc/sysctl.conf 2>/dev/null
        sed -i '/^net.ipv4.tcp_congestion_control/s/^/# /' /etc/sysctl.conf 2>/dev/null
        echo "Â∑≤Ê∏ÖÁêÜ /etc/sysctl.conf ‰∏≠ÁöÑÂÜ≤Á™ÅÈÖçÁΩÆ"
    fi
    
    # Âà†Èô§ÂèØËÉΩÂ≠òÂú®ÁöÑËΩØÈìæÊé•
    if [ -L /etc/sysctl.d/99-sysctl.conf ]; then
        rm -f /etc/sysctl.d/99-sysctl.conf
        echo "Â∑≤Âà†Èô§ÈÖçÁΩÆËΩØÈìæÊé•"
    fi
    
    # Ê£ÄÊü•Âπ∂Ê∏ÖÁêÜÂèØËÉΩË¶ÜÁõñÁöÑÊñ∞ÊóßÈÖçÁΩÆÂÜ≤Á™Å
    check_and_clean_conflicts

    # Ê≠•È™§ 3ÔºöÂàõÂª∫Áã¨Á´ãÈÖçÁΩÆÊñá‰ª∂Ôºà‰ΩøÁî®Âä®ÊÄÅÁºìÂÜ≤Âå∫Ôºâ
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 4/6] ÂàõÂª∫ÈÖçÁΩÆÊñá‰ª∂...${gl_bai}"
    echo "Ê≠£Âú®ÂàõÂª∫Êñ∞ÈÖçÁΩÆ..."
    
    # Ëé∑ÂèñÁâ©ÁêÜÂÜÖÂ≠òÁî®‰∫éËôöÊãüÂÜÖÂ≠òÂèÇÊï∞Ë∞ÉÊï¥
    local mem_total=$(free -m | awk 'NR==2{print $2}')
    local vm_swappiness=10
    local vm_dirty_ratio=15
    local vm_min_free_kbytes=65536
    
    # Ê†πÊçÆÂÜÖÂ≠òÂ§ßÂ∞èÂæÆË∞ÉËôöÊãüÂÜÖÂ≠òÂèÇÊï∞
    if [ "$mem_total" -lt 2048 ]; then
        vm_swappiness=20
        vm_dirty_ratio=20
        vm_min_free_kbytes=32768
    fi
    
    cat > "$SYSCTL_CONF" << EOF
# BBR v3 Direct/Endpoint Configuration (Intelligent Detection Edition)
# Generated on $(date)
# Bandwidth: ${detected_bandwidth} Mbps | Buffer: ${buffer_mb} MB

# ÈòüÂàóË∞ÉÂ∫¶ÁÆóÊ≥ï
net.core.default_qdisc=fq

# Êã•Â°ûÊéßÂà∂ÁÆóÊ≥ï
net.ipv4.tcp_congestion_control=bbr

# TCP ÁºìÂÜ≤Âå∫‰ºòÂåñÔºàÊô∫ËÉΩÊ£ÄÊµãÔºö${buffer_mb}MBÔºâ
net.core.rmem_max=${buffer_bytes}
net.core.wmem_max=${buffer_bytes}
net.ipv4.tcp_rmem=4096 87380 ${buffer_bytes}
net.ipv4.tcp_wmem=4096 65536 ${buffer_bytes}

# ===== Áõ¥Ëøû/ËêΩÂú∞‰ºòÂåñÂèÇÊï∞ =====

# TIME_WAIT ÈáçÁî®ÔºàÂêØÁî®ÔºåÊèêÈ´òÂπ∂ÂèëÔºâ
net.ipv4.tcp_tw_reuse=1

# Á´ØÂè£ËåÉÂõ¥ÔºàÊúÄÂ§ßÂåñÔºâ
net.ipv4.ip_local_port_range=1024 65535

# ËøûÊé•ÈòüÂàóÔºàÈ´òÊÄßËÉΩÔºâ
net.core.somaxconn=4096
net.ipv4.tcp_max_syn_backlog=8192

# ÁΩëÁªúÈòüÂàóÔºàÈ´òÂ∏¶ÂÆΩ‰ºòÂåñÔºâ
net.core.netdev_max_backlog=16384

# È´òÁ∫ßTCP‰ºòÂåñ
net.ipv4.tcp_slow_start_after_idle=0
net.ipv4.tcp_mtu_probing=1

# ËôöÊãüÂÜÖÂ≠ò‰ºòÂåñÔºàÊ†πÊçÆÁâ©ÁêÜÂÜÖÂ≠òË∞ÉÊï¥Ôºâ
vm.swappiness=${vm_swappiness}
vm.dirty_ratio=${vm_dirty_ratio}
vm.dirty_background_ratio=5
vm.overcommit_memory=1
vm.min_free_kbytes=${vm_min_free_kbytes}
vm.vfs_cache_pressure=50

# CPUË∞ÉÂ∫¶‰ºòÂåñ
kernel.sched_autogroup_enabled=0
kernel.numa_balancing=0
EOF

    # Ê≠•È™§ 4ÔºöÂ∫îÁî®ÈÖçÁΩÆ
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 5/6] Â∫îÁî®ÊâÄÊúâ‰ºòÂåñÂèÇÊï∞...${gl_bai}"
    echo "Ê≠£Âú®Â∫îÁî®ÈÖçÁΩÆ..."
    sysctl -p "$SYSCTL_CONF" > /dev/null 2>&1
    
    # Á´ãÂç≥Â∫îÁî® fqÔºåÂπ∂ÂêØÁî® MSS clampÔºàÊó†ÈúÄÈáçÂêØÔºâ
    echo "Ê≠£Âú®Â∫îÁî®ÈòüÂàó‰∏éÈò≤ÂàÜÁâáÔºàÊó†ÈúÄÈáçÂêØÔºâ..."
    apply_tc_fq_now >/dev/null 2>&1
    apply_mss_clamp enable >/dev/null 2>&1
    
    # ÈÖçÁΩÆÊñá‰ª∂ÊèèËø∞Á¨¶ÈôêÂà∂
    echo "Ê≠£Âú®‰ºòÂåñÊñá‰ª∂ÊèèËø∞Á¨¶ÈôêÂà∂..."
    if ! grep -q "BBR - Êñá‰ª∂ÊèèËø∞Á¨¶‰ºòÂåñ" /etc/security/limits.conf 2>/dev/null; then
        cat >> /etc/security/limits.conf << 'LIMITSEOF'
# BBR - Êñá‰ª∂ÊèèËø∞Á¨¶‰ºòÂåñ
* soft nofile 65535
* hard nofile 65535
LIMITSEOF
    fi
    ulimit -n 65535 2>/dev/null
    
    # Á¶ÅÁî®ÈÄèÊòéÂ§ßÈ°µÈù¢
    if [ -f /sys/kernel/mm/transparent_hugepage/enabled ]; then
        echo never > /sys/kernel/mm/transparent_hugepage/enabled 2>/dev/null
    fi

    # Ê≠•È™§ 5ÔºöÈ™åËØÅÈÖçÁΩÆÊòØÂê¶ÁúüÊ≠£ÁîüÊïà
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 6/6] È™åËØÅÈÖçÁΩÆ...${gl_bai}"
    
    local actual_qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null)
    local actual_cc=$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null)
    local actual_wmem=$(sysctl -n net.ipv4.tcp_wmem 2>/dev/null | awk '{print $3}')
    local actual_rmem=$(sysctl -n net.ipv4.tcp_rmem 2>/dev/null | awk '{print $3}')
    
    echo ""
    echo -e "${gl_kjlan}=== ÈÖçÁΩÆÈ™åËØÅ ===${gl_bai}"
    
    # È™åËØÅÈòüÂàóÁÆóÊ≥ï
    if [ "$actual_qdisc" = "fq" ]; then
        echo -e "ÈòüÂàóÁÆóÊ≥ï: ${gl_lv}$actual_qdisc ‚úì${gl_bai}"
    else
        echo -e "ÈòüÂàóÁÆóÊ≥ï: ${gl_huang}$actual_qdisc (ÊúüÊúõ: fq) ‚ö†${gl_bai}"
    fi
    
    # È™åËØÅÊã•Â°ûÊéßÂà∂
    if [ "$actual_cc" = "bbr" ]; then
        echo -e "Êã•Â°ûÊéßÂà∂: ${gl_lv}$actual_cc ‚úì${gl_bai}"
    else
        echo -e "Êã•Â°ûÊéßÂà∂: ${gl_huang}$actual_cc (ÊúüÊúõ: bbr) ‚ö†${gl_bai}"
    fi
    
    # È™åËØÅÁºìÂÜ≤Âå∫ÔºàÂä®ÊÄÅÔºâ
    local actual_wmem_mb=$((actual_wmem / 1048576))
    local actual_rmem_mb=$((actual_rmem / 1048576))
    
    if [ "$actual_wmem" = "$buffer_bytes" ]; then
        echo -e "ÂèëÈÄÅÁºìÂÜ≤Âå∫: ${gl_lv}${buffer_mb}MB ‚úì${gl_bai}"
    else
        echo -e "ÂèëÈÄÅÁºìÂÜ≤Âå∫: ${gl_huang}${actual_wmem_mb}MB (ÊúüÊúõ: ${buffer_mb}MB) ‚ö†${gl_bai}"
    fi
    
    if [ "$actual_rmem" = "$buffer_bytes" ]; then
        echo -e "Êé•Êî∂ÁºìÂÜ≤Âå∫: ${gl_lv}${buffer_mb}MB ‚úì${gl_bai}"
    else
        echo -e "Êé•Êî∂ÁºìÂÜ≤Âå∫: ${gl_huang}${actual_rmem_mb}MB (ÊúüÊúõ: ${buffer_mb}MB) ‚ö†${gl_bai}"
    fi
    
    echo ""
    
    # ÊúÄÁªàÂà§Êñ≠
    if [ "$actual_qdisc" = "fq" ] && [ "$actual_cc" = "bbr" ] && \
       [ "$actual_wmem" = "$buffer_bytes" ] && [ "$actual_rmem" = "$buffer_bytes" ]; then
        echo -e "${gl_lv}‚úÖ BBR v3 Áõ¥Ëøû/ËêΩÂú∞‰ºòÂåñÈÖçÁΩÆÂÆåÊàêÂπ∂Â∑≤ÁîüÊïàÔºÅ${gl_bai}"
        echo -e "${gl_zi}ÈÖçÁΩÆËØ¥Êòé: ${buffer_mb}MB ÁºìÂÜ≤Âå∫Ôºà${detected_bandwidth} Mbps Â∏¶ÂÆΩÔºâÔºåÈÄÇÂêàÁõ¥Ëøû/ËêΩÂú∞Âú∫ÊôØ${gl_bai}"
    else
        echo -e "${gl_huang}‚ö†Ô∏è ÈÖçÁΩÆÂ∑≤‰øùÂ≠ò‰ΩÜÈÉ®ÂàÜÂèÇÊï∞Êú™ÁîüÊïà${gl_bai}"
        echo -e "${gl_huang}Âª∫ËÆÆÊâßË°å‰ª•‰∏ãÊìç‰ΩúÔºö${gl_bai}"
        echo "1. Ê£ÄÊü•ÊòØÂê¶ÊúâÂÖ∂‰ªñÈÖçÁΩÆÊñá‰ª∂ÂÜ≤Á™Å"
        echo "2. ÈáçÂêØÊúçÂä°Âô®‰ΩøÈÖçÁΩÆÂÆåÂÖ®ÁîüÊïà: reboot"
    fi
}

#=============================================================================
# Áä∂ÊÄÅÊ£ÄÊü•ÂáΩÊï∞
#=============================================================================

check_bbr_status() {
    echo -e "${gl_kjlan}=== ÂΩìÂâçÁ≥ªÁªüÁä∂ÊÄÅ ===${gl_bai}"
    echo "ÂÜÖÊ†∏ÁâàÊú¨: $(uname -r)"
    
    if command -v sysctl &>/dev/null; then
        local congestion=$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null || echo "Êú™Áü•")
        local qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null || echo "Êú™Áü•")
        echo "Êã•Â°ûÊéßÂà∂ÁÆóÊ≥ï: $congestion"
        echo "ÈòüÂàóË∞ÉÂ∫¶ÁÆóÊ≥ï: $qdisc"
        
        # Ê£ÄÊü• BBR ÁâàÊú¨
        if command -v modinfo &>/dev/null; then
            local bbr_version=$(modinfo tcp_bbr 2>/dev/null | awk '/^version:/ {print $2}')
            if [ -n "$bbr_version" ]; then
                if [ "$bbr_version" = "3" ]; then
                    echo -e "BBR ÁâàÊú¨: ${gl_lv}v${bbr_version} ‚úì${gl_bai}"
                else
                    echo -e "BBR ÁâàÊú¨: ${gl_huang}v${bbr_version} (‰∏çÊòØ v3)${gl_bai}"
                fi
            fi
        fi
    fi
    
    if dpkg -l 2>/dev/null | grep -q 'linux-xanmod'; then
        echo -e "XanMod ÂÜÖÊ†∏: ${gl_lv}Â∑≤ÂÆâË£Ö ‚úì${gl_bai}"
        return 0
    else
        echo -e "XanMod ÂÜÖÊ†∏: ${gl_huang}Êú™ÂÆâË£Ö${gl_bai}"
        return 1
    fi
}


apply_bbr_preferences() {
    echo -e "${gl_kjlan}=== ÈÖçÁΩÆ BBR/BBR2 ‰∏éÈòüÂàóÁÆóÊ≥ï ===${gl_bai}"

    if ! command -v sysctl &>/dev/null; then
        echo -e "${gl_hong}ÈîôËØØ: Êú™Ê£ÄÊµãÂà∞ sysctlÔºåÊó†Ê≥ïÈÖçÁΩÆÁΩëÁªúÂèÇÊï∞${gl_bai}"
        return 1
    fi

    local available_cc
    available_cc=$(sysctl -n net.ipv4.tcp_available_congestion_control 2>/dev/null)

    local selected_cc=""
    if echo "$available_cc" | grep -qw "bbr2"; then
        selected_cc="bbr2"
    elif echo "$available_cc" | grep -qw "bbr"; then
        selected_cc="bbr"
    fi

    if [ -n "$selected_cc" ]; then
        if sysctl -w net.ipv4.tcp_congestion_control="$selected_cc" >/dev/null 2>&1; then
            echo -e "Êã•Â°ûÊéßÂà∂ÁÆóÊ≥ï: ${gl_lv}${selected_cc} ‚úì${gl_bai}"
        else
            echo -e "${gl_huang}Ë≠¶Âëä: Êó†Ê≥ïÁ´ãÂç≥Â∫îÁî® ${selected_cc}ÔºåÂèØËÉΩÈúÄË¶ÅÈáçÂêØ„ÄÇ${gl_bai}"
        fi
    else
        echo -e "${gl_huang}Ë≠¶Âëä: ÂΩìÂâçÂÜÖÊ†∏Êú™Êèê‰æõ bbr/bbr2 Êã•Â°ûÊéßÂà∂ÁÆóÊ≥ï${gl_bai}"
    fi

    local target_qdisc="fq"
    if command -v modprobe &>/dev/null; then
        if ! modprobe -q sch_fq 2>/dev/null; then
            if modprobe -q sch_fq_codel 2>/dev/null; then
                target_qdisc="fq_codel"
                echo -e "${gl_huang}ÊèêÁ§∫: sch_fq Ê®°Âùó‰∏çÂèØÁî®ÔºåÂ∑≤ÂõûÈÄÄËá≥ fq_codel${gl_bai}"
            else
                target_qdisc=""
                echo -e "${gl_huang}Ë≠¶Âëä: sch_fq / sch_fq_codel Ê®°Âùó‰∏çÂèØÁî®Ôºå‰øùÊåÅÁ≥ªÁªüÈªòËÆ§ÈòüÂàó${gl_bai}"
            fi
        fi
    fi

    if [ -n "$target_qdisc" ]; then
        if sysctl -w net.core.default_qdisc="$target_qdisc" >/dev/null 2>&1; then
            echo -e "ÈªòËÆ§ÈòüÂàóÁÆóÊ≥ï: ${gl_lv}${target_qdisc} ‚úì${gl_bai}"
        else
            echo -e "${gl_huang}Ë≠¶Âëä: Êó†Ê≥ïÁ´ãÂç≥ËÆæÁΩÆÈªòËÆ§ÈòüÂàóÔºåÂèØËÉΩÈúÄË¶ÅÈáçÂêØ„ÄÇ${gl_bai}"
        fi
    fi

    if [ -n "$selected_cc" ] || [ -n "$target_qdisc" ]; then
        mkdir -p /etc/sysctl.d
        {
            echo "# Generated by net-tcp-tune.sh (ARM64 BBR ÈÖçÁΩÆ)"
            echo "# $(date '+%Y-%m-%d %H:%M:%S')"
            if [ -n "$target_qdisc" ]; then
                echo "net.core.default_qdisc=$target_qdisc"
            fi
            if [ -n "$selected_cc" ]; then
                echo "net.ipv4.tcp_congestion_control=$selected_cc"
            fi
        } > "$SYSCTL_CONF"

        if sysctl -p "$SYSCTL_CONF" >/dev/null 2>&1; then
            echo -e "${gl_lv}ÊåÅ‰πÖÂåñÈÖçÁΩÆÂ∑≤ÂÜôÂÖ• ${SYSCTL_CONF}${gl_bai}"
        else
            echo -e "${gl_huang}Ë≠¶Âëä: sysctl -p Â∫îÁî®Â§±Ë¥•ÔºåËØ∑Á®çÂêéÊâãÂä®ÊâßË°å: sysctl -p ${SYSCTL_CONF}${gl_bai}"
        fi
    else
        echo -e "${gl_huang}ÊèêÁ§∫: Êú™ÂÜôÂÖ•ÊåÅ‰πÖÂåñÈÖçÁΩÆÔºàÁº∫Â∞ëÂèØÁî®ÁöÑ BBR/ÈòüÂàóÂèÇÊï∞Ôºâ${gl_bai}"
    fi

    local current_cc="Êú™Áü•"
    local current_qdisc="Êú™Áü•"
    current_cc=$(sysctl -n net.ipv4.tcp_congestion_control 2>/dev/null || echo "Êú™Áü•")
    current_qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null || echo "Êú™Áü•")

    echo "ÂΩìÂâçÊã•Â°ûÊéßÂà∂: $current_cc"
    echo "ÂΩìÂâçÈªòËÆ§ÈòüÂàó: $current_qdisc"
    echo "ÂΩìÂâçÂÜÖÊ†∏ÁâàÊú¨: $(uname -r)"
}

try_install_xanmod_arm64() {
    ARM64_LAST_ERROR=""
    echo -e "${gl_kjlan}‚Üí Â∞ùËØïÈÄöËøá XanMod APT ‰ªìÂ∫ìÂÆâË£Ö ARM64 ÂÜÖÊ†∏${gl_bai}"

    local arch=""
    arch=$(dpkg --print-architecture 2>/dev/null || true)
    if [ -z "$arch" ]; then
        arch=$(uname -m 2>/dev/null)
    fi
    case "$arch" in
        arm64|aarch64)
            ;;
        *)
            ARM64_LAST_ERROR="ÂΩìÂâçÊû∂ÊûÑ (${arch:-Êú™Áü•}) Èùû ARM64"
            return 1
            ;;
    esac

    local keyring="/usr/share/keyrings/xanmod-archive-keyring.gpg"
    local repo_file="/etc/apt/sources.list.d/xanmod-release.list"
    local key_installed=0

    if [ -s "$keyring" ]; then
        key_installed=1
    else
        local key_tmp
        key_tmp=$(mktemp 2>/dev/null)
        if [ -n "$key_tmp" ]; then
            if download_repo_resource "xanmod_archive_key" "$key_tmp" "XanMod ‰ªìÂ∫ìÂØÜÈí•"; then
                if gpg --dearmor -o "$keyring" --yes "$key_tmp"; then
                    key_installed=1
                else
                    echo -e "${gl_huang}ÂØÜÈí•ÂØºÂÖ•Â§±Ë¥•ÔºåÂ∞ùËØïÂÆòÊñπÊ∫ê${gl_bai}"
                fi
            else
                echo -e "${gl_huang}Êú™ËÉΩ‰ªéËá™Êúâ‰ªìÂ∫ìËé∑Âèñ XanMod ÂØÜÈí•ÔºåÂ∞ùËØïÂÆòÊñπÊ∫ê${gl_bai}"
            fi

            if [ "$key_installed" -ne 1 ]; then
                rm -f "$key_tmp"
                key_tmp=$(mktemp 2>/dev/null)
                if [ -n "$key_tmp" ] && download_with_retry "https://dl.xanmod.org/archive.key" "$key_tmp"; then
                    if gpg --dearmor -o "$keyring" --yes "$key_tmp"; then
                        key_installed=1
                    fi
                fi
            fi

            rm -f "$key_tmp"
        fi
    fi

    if [ "$key_installed" -ne 1 ]; then
        ARM64_LAST_ERROR="Êó†Ê≥ïËé∑Âèñ XanMod ‰ªìÂ∫ìÂØÜÈí•"
        return 1
    fi

    local repo_preexisting=0
    if [ -f "$repo_file" ]; then
        repo_preexisting=1
    fi
    echo "deb [signed-by=${keyring}] http://deb.xanmod.org releases main" | tee "$repo_file" > /dev/null
    echo -e "${gl_kjlan}Â∑≤ÂÜôÂÖ• XanMod APT ‰ªìÂ∫ì: ${repo_file}${gl_bai}"

    if ! apt update; then
        ARM64_LAST_ERROR="apt update Â§±Ë¥•ÔºàXanMod ‰ªìÂ∫ì‰∏çÂèØÁî®ÊàñÁΩëÁªúÂºÇÂ∏∏Ôºâ"
        if [ "$repo_preexisting" -eq 0 ]; then
            rm -f "$repo_file"
        fi
        return 1
    fi

    local package=""
    local -a prefer_pkgs=(
        "linux-xanmod-lts"
        "linux-image-xanmod-lts"
        "linux-xanmod"
        "linux-image-xanmod"
    )

    local pkg
    for pkg in "${prefer_pkgs[@]}"; do
        if apt-cache show "$pkg" >/dev/null 2>&1; then
            package="$pkg"
            break
        fi
    done

    if [ -z "$package" ]; then
        package=$(apt-cache search --names-only '^linux.*xanmod' 2>/dev/null | awk '{print $1}' | head -n1)
    fi

    if [ -z "$package" ]; then
        ARM64_LAST_ERROR="XanMod ‰ªìÂ∫ì‰∏≠Êú™ÊâæÂà∞ ARM64 ÂÜÖÊ†∏ÂåÖ"
        if [ "$repo_preexisting" -eq 0 ]; then
            rm -f "$repo_file"
        fi
        return 1
    fi

    echo -e "${gl_kjlan}Ê£ÄÊµãÂà∞ÂèØÁî®ÂÜÖÊ†∏ÂåÖ:${gl_bai} ${package}"
    if ! apt install -y "$package"; then
        ARM64_LAST_ERROR="apt ÂÆâË£Ö ${package} Â§±Ë¥•"
        if [ "$repo_preexisting" -eq 0 ]; then
            rm -f "$repo_file"
        fi
        return 1
    fi

    local header_pkg=""
    local candidate_header=""
    case "$package" in
        linux-image-*)
            candidate_header="${package/linux-image/linux-headers}"
            if apt-cache show "$candidate_header" >/dev/null 2>&1; then
                header_pkg="$candidate_header"
            fi
            ;;
        linux-xanmod*)
            if apt-cache show linux-headers-xanmod >/dev/null 2>&1; then
                header_pkg="linux-headers-xanmod"
            fi
            ;;
    esac

    if [ -n "$header_pkg" ]; then
        echo -e "${gl_kjlan}Â∞ùËØïÂÆâË£ÖÂ§¥Êñá‰ª∂:${gl_bai} ${header_pkg}"
        apt install -y "$header_pkg" >/dev/null 2>&1 || true
    fi

    echo -e "${gl_lv}Â∑≤ÂÆâË£Ö XanMod ARM64 ÂÜÖÊ†∏ (${package})${gl_bai}"
    return 0
}

try_install_debian_backports_kernel() {
    ARM64_LAST_ERROR=""

    local os_id=""
    local codename=""

    if [ -r /etc/os-release ]; then
        . /etc/os-release
        os_id="${ID,,}"
        codename="$VERSION_CODENAME"
    fi

    if [ "$os_id" != "debian" ]; then
        ARM64_LAST_ERROR="ÂΩìÂâçÁ≥ªÁªü‰∏çÊòØ DebianÔºåË∑≥Ëøá backports"
        return 1
    fi

    if [ -z "$codename" ] && command -v lsb_release &>/dev/null; then
        codename=$(lsb_release -sc 2>/dev/null)
    fi

    if [ -z "$codename" ]; then
        ARM64_LAST_ERROR="Êó†Ê≥ïËØÜÂà´ Debian ÂèëË°å‰ª£Âè∑"
        return 1
    fi

    local list_file="/etc/apt/sources.list.d/${codename}-backports.list"
    if [ -f "$list_file" ]; then
        if ! grep -q "${codename}-backports" "$list_file"; then
            echo "deb http://deb.debian.org/debian ${codename}-backports main" >> "$list_file"
        fi
    else
        echo "deb http://deb.debian.org/debian ${codename}-backports main" > "$list_file"
    fi

    if ! apt update -y; then
        ARM64_LAST_ERROR="apt update Â§±Ë¥•Ôºà${codename}-backportsÔºâ"
        return 1
    fi

    if apt install -y -t "${codename}-backports" linux-image-arm64; then
        apt install -y -t "${codename}-backports" linux-headers-arm64 >/dev/null 2>&1 || true
        echo -e "${gl_lv}Â∑≤ÈÄöËøá Debian ${codename}-backports ÂÆâË£ÖÊúÄÊñ∞ ARM64 ÂÜÖÊ†∏${gl_bai}"
        return 0
    fi

    ARM64_LAST_ERROR="ÂÆâË£Ö linux-image-arm64 Â§±Ë¥•"
    return 1
}

try_install_ubuntu_hwe_kernel() {
    ARM64_LAST_ERROR=""

    local os_id=""
    local version_id=""

    if [ -r /etc/os-release ]; then
        . /etc/os-release
        os_id="${ID,,}"
        version_id="$VERSION_ID"
    fi

    if [ "$os_id" != "ubuntu" ]; then
        ARM64_LAST_ERROR="ÂΩìÂâçÁ≥ªÁªü‰∏çÊòØ UbuntuÔºåË∑≥Ëøá HWE"
        return 1
    fi

    if [ -z "$version_id" ] && command -v lsb_release &>/dev/null; then
        version_id=$(lsb_release -sr 2>/dev/null)
    fi

    if [ -z "$version_id" ]; then
        ARM64_LAST_ERROR="Êó†Ê≥ïËØÜÂà´ Ubuntu ÁâàÊú¨Âè∑"
        return 1
    fi

    local hwe_pkg="linux-generic-hwe-${version_id}"
    hwe_pkg=${hwe_pkg// /}

    if ! apt-cache show "$hwe_pkg" >/dev/null 2>&1; then
        if apt-cache show linux-generic >/dev/null 2>&1; then
            hwe_pkg="linux-generic"
        else
            ARM64_LAST_ERROR="Êú™ÊâæÂà∞ÂèØÁî®ÁöÑ HWE ÂÖÉÂåÖ"
            return 1
        fi
    fi

    if apt install -y "$hwe_pkg"; then
        echo -e "${gl_lv}Â∑≤ÂÆâË£Ö Ubuntu HWE ÂÜÖÊ†∏ (${hwe_pkg})${gl_bai}"
        return 0
    fi

    ARM64_LAST_ERROR="ÂÆâË£Ö ${hwe_pkg} Â§±Ë¥•"
    return 1
}

install_arm64_kernel_stack() {
    echo -e "${gl_kjlan}=== ARM64 ÂÜÖÊ†∏ÂÆâË£ÖÊµÅÁ®ã ===${gl_bai}"
    echo -e "${gl_kjlan}Á≠ñÁï•È°∫Â∫è:${gl_bai} XanMod APT ‚Üí Debian Backports ‚Üí Ubuntu HWE ‚Üí BBR/BBR2 + fq"

    check_disk_space 3

    if ! install_package curl wget ca-certificates gnupg xz-utils python3 lsb-release; then
        echo -e "${gl_huang}Ë≠¶Âëä: ‰æùËµñÂÆâË£ÖÂ§±Ë¥•ÔºåÂ∞ÜÂ∞ùËØï‰ΩøÁî®ÂΩìÂâçÁéØÂ¢ÉÁªßÁª≠${gl_bai}"
    fi

    local kernel_installed=false
    local install_source=""
    local failure_msgs=()

    if try_install_xanmod_arm64; then
        kernel_installed=true
        install_source="XanMod APT ‰ªìÂ∫ì"
    else
        local reason="${ARM64_LAST_ERROR:-Êú™Áü•ÂéüÂõ†}"
        failure_msgs+=("XanMod APT: ${reason}")
    fi

    if [ "$kernel_installed" = false ]; then
        if try_install_debian_backports_kernel; then
            kernel_installed=true
            install_source="Debian Backports"
        else
            local reason="${ARM64_LAST_ERROR:-Êú™Áü•ÂéüÂõ†}"
            failure_msgs+=("Debian Backports: ${reason}")
        fi
    fi

    if [ "$kernel_installed" = false ]; then
        if try_install_ubuntu_hwe_kernel; then
            kernel_installed=true
            install_source="Ubuntu HWE"
        else
            local reason="${ARM64_LAST_ERROR:-Êú™Áü•ÂéüÂõ†}"
            failure_msgs+=("Ubuntu HWE: ${reason}")
        fi
    fi

    if [ "$kernel_installed" = true ]; then
        echo -e "${gl_lv}ÂÜÖÊ†∏ÂÆâË£ÖÊàêÂäüÔºåÊù•Ê∫ê: ${install_source}${gl_bai}"
        echo -e "${gl_kjlan}Á≠ñÁï•ÁªìÊûú:${gl_bai} ${install_source}"
        echo -e "${gl_huang}ÊèêÁ§∫: ËØ∑ÈáçÂêØÁ≥ªÁªü‰ª•Âä†ËΩΩÊñ∞ÂÜÖÊ†∏ (reboot)${gl_bai}"
    else
        echo -e "${gl_huang}Êú™ËÉΩÂÆâË£ÖÊñ∞ÁöÑ ARM64 ÂÜÖÊ†∏ÔºåÂáÜÂ§áÂú®Áé∞ÊúâÂÜÖÊ†∏‰∏äÂêØÁî® BBR/BBR2${gl_bai}"
        for item in "${failure_msgs[@]}"; do
            [ -n "$item" ] && echo -e "${gl_huang}  ‚Ä¢ ${item}${gl_bai}"
        done
        echo -e "${gl_kjlan}Á≠ñÁï•ÁªìÊûú:${gl_bai} ‰ΩøÁî®ÂΩìÂâçÂÜÖÊ†∏ + BBR/BBR2 + fq"
    fi

    echo -e "${gl_kjlan}ÈÖçÁΩÆÊã•Â°ûÊéßÂà∂‰∏éÈªòËÆ§ÈòüÂàó...${gl_bai}"
    if ! apply_bbr_preferences; then
        echo -e "${gl_huang}Ë≠¶Âëä: BBR/ÈòüÂàóÈÖçÁΩÆÊú™ÂÆåÂÖ®ÊàêÂäüÔºåËØ∑ÊâãÂä®Ê£ÄÊü•${gl_bai}"
    fi

    echo ""
    check_bbr_status

    if [ "$kernel_installed" = true ]; then
        if command -v update-grub &>/dev/null; then
            echo ""
            echo -e "${gl_zi}ÊèêÁ§∫: ‰ΩøÁî® GRUB ÁöÑÁ≥ªÁªüÂª∫ËÆÆËøêË°å update-grub ÂêéÈáçÂêØ„ÄÇ${gl_bai}"
        fi
    fi

    return 0
}

#=============================================================================
# XanMod ÂÜÖÊ†∏ÂÆâË£ÖÔºàÂÆòÊñπÊ∫êÔºâ
#=============================================================================

install_xanmod_kernel() {
    clear
    echo -e "${gl_kjlan}=== ÂÆâË£Ö XanMod ÂÜÖÊ†∏‰∏é BBR v3 ===${gl_bai}"
    echo "ËßÜÈ¢ëÊïôÁ®ã: https://www.bilibili.com/video/BV14K421x7BS"
    echo "------------------------------------------------"
    echo "ÊîØÊåÅÁ≥ªÁªü: Debian/Ubuntu (x86_64 & ARM64)"
    echo -e "${gl_huang}Ë≠¶Âëä: Â∞ÜÂçáÁ∫ß Linux ÂÜÖÊ†∏ÔºåËØ∑ÊèêÂâçÂ§á‰ªΩÈáçË¶ÅÊï∞ÊçÆÔºÅ${gl_bai}"
    echo "------------------------------------------------"
    read -e -p "Á°ÆÂÆöÁªßÁª≠ÂÆâË£ÖÂêóÔºü(Y/N): " choice

    case "$choice" in
        [Yy])
            ;;
        *)
            echo "Â∑≤ÂèñÊ∂àÂÆâË£Ö"
            return 1
            ;;
    esac
    
    # Ê£ÄÊµã CPU Êû∂ÊûÑ
    local cpu_arch=$(uname -m)
    
    # ARM Êû∂ÊûÑÁâπÊÆäÂ§ÑÁêÜ
    if [ "$cpu_arch" = "aarch64" ]; then
        install_arm64_kernel_stack
        return $?
    fi
    
    # x86_64 Êû∂ÊûÑÂÆâË£ÖÊµÅÁ®ã
    # Ê£ÄÊü•Á≥ªÁªüÊîØÊåÅ
    if [ -r /etc/os-release ]; then
        . /etc/os-release
        if [ "$ID" != "debian" ] && [ "$ID" != "ubuntu" ]; then
            echo -e "${gl_hong}ÈîôËØØ: ‰ªÖÊîØÊåÅ Debian Âíå Ubuntu Á≥ªÁªü${gl_bai}"
            return 1
        fi
    else
        echo -e "${gl_hong}ÈîôËØØ: Êó†Ê≥ïÁ°ÆÂÆöÊìç‰ΩúÁ≥ªÁªüÁ±ªÂûã${gl_bai}"
        return 1
    fi
    
    # ÁéØÂ¢ÉÂáÜÂ§á
    check_disk_space 3
    check_swap
    install_package wget gnupg
    
    # Ê∑ªÂä† XanMod GPG ÂØÜÈí•
    echo "Ê≠£Âú®Ê∑ªÂä† XanMod ‰ªìÂ∫ìÂØÜÈí•..."
    local xanmod_key_tmp
    xanmod_key_tmp=$(mktemp)
    local key_imported=0

    if download_repo_resource "xanmod_archive_key" "$xanmod_key_tmp" "XanMod ‰ªìÂ∫ìÂØÜÈí•"; then
        if gpg --dearmor -o /usr/share/keyrings/xanmod-archive-keyring.gpg --yes "$xanmod_key_tmp"; then
            key_imported=1
        else
            echo -e "${gl_huang}ÂØÜÈí•ÂØºÂÖ•Â§±Ë¥•ÔºåÂ∞ùËØïÂÆòÊñπÊ∫ê...${gl_bai}"
        fi
    else
        echo -e "${gl_huang}Êú™ËÉΩ‰ªéËá™Êúâ‰ªìÂ∫ìËé∑Âèñ XanMod ÂØÜÈí•ÔºåÂ∞ùËØïÂÆòÊñπÊ∫ê...${gl_bai}"
    fi

    if [ $key_imported -ne 1 ]; then
        if download_with_retry "https://dl.xanmod.org/archive.key" "$xanmod_key_tmp"; then
            if gpg --dearmor -o /usr/share/keyrings/xanmod-archive-keyring.gpg --yes "$xanmod_key_tmp"; then
                key_imported=1
            else
                echo -e "${gl_hong}ÂØÜÈí•ÂØºÂÖ•Â§±Ë¥•${gl_bai}"
            fi
        else
            echo -e "${gl_hong}ÂØÜÈí•‰∏ãËΩΩÂ§±Ë¥•${gl_bai}"
        fi
    fi

    rm -f "$xanmod_key_tmp"

    if [ $key_imported -ne 1 ]; then
        echo -e "${gl_hong}Êó†Ê≥ïËé∑Âèñ XanMod ‰ªìÂ∫ìÂØÜÈí•ÔºåÁªàÊ≠¢ÂÆâË£Ö${gl_bai}"
        return 1
    fi

    local xanmod_repo_file="/etc/apt/sources.list.d/xanmod-release.list"

    # Ê∑ªÂä† XanMod ‰ªìÂ∫ì
    echo 'deb [signed-by=/usr/share/keyrings/xanmod-archive-keyring.gpg] http://deb.xanmod.org releases main' | \
        tee "$xanmod_repo_file" > /dev/null
    
    # Ê£ÄÊµã CPU Êû∂ÊûÑÁâàÊú¨
    echo "Ê≠£Âú®Ê£ÄÊµã CPU ÊîØÊåÅÁöÑÊúÄ‰ºòÂÜÖÊ†∏ÁâàÊú¨..."
    local version=""
    local check_script_tmp
    check_script_tmp=$(mktemp)

    if download_repo_resource "xanmod_check_script" "$check_script_tmp" "XanMod Êû∂ÊûÑÊ£ÄÊµãËÑöÊú¨"; then
        chmod +x "$check_script_tmp"
        local detect_output
        detect_output=$(bash "$check_script_tmp" 2>/dev/null)
        version=$(echo "$detect_output" | grep -oP 'x86-64-v\K\d+|x86-64-v\d+' | head -n1)
        if [[ "$version" =~ ^x86-64-v([0-9]+)$ ]]; then
            version="${BASH_REMATCH[1]}"
        fi
    fi

    rm -f "$check_script_tmp"

    if [ -z "$version" ]; then
        echo -e "${gl_huang}Ëá™Âä®Ê£ÄÊµãÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÁâàÊú¨ v3${gl_bai}"
        version="3"
    fi
    
    echo -e "${gl_lv}Â∞ÜÂÆâË£Ö: linux-xanmod-x64v${version}${gl_bai}"
    
    # ÂÆâË£Ö XanMod ÂÜÖÊ†∏
    apt update -y
    apt install -y linux-xanmod-x64v$version
    
    if [ $? -ne 0 ]; then
        echo -e "${gl_hong}ÂÜÖÊ†∏ÂÆâË£ÖÂ§±Ë¥•ÔºÅ${gl_bai}"
        rm -f "$xanmod_repo_file"
        return 1
    fi

    echo -e "${gl_lv}XanMod ÂÜÖÊ†∏ÂÆâË£ÖÊàêÂäüÔºÅ${gl_bai}"
    echo -e "${gl_huang}ÊèêÁ§∫: ËØ∑ÂÖàÈáçÂêØÁ≥ªÁªüÂä†ËΩΩÊñ∞ÂÜÖÊ†∏ÔºåÁÑ∂ÂêéÂÜçÈÖçÁΩÆ BBR${gl_bai}"
    echo -e "${gl_kjlan}ÂêéÁª≠Êõ¥Êñ∞: ÂèØÊâßË°å ${gl_bai}sudo apt update && sudo apt upgrade${gl_kjlan} ‰ª•Ëé∑ÂèñÊúÄÊñ∞ÂÜÖÊ†∏${gl_bai}"

    read -e -p "ÊòØÂê¶‰øùÁïô XanMod ËΩØ‰ª∂Ê∫ê‰ª•‰æøÂêéÁª≠Ëá™Âä®Ëé∑ÂèñÊõ¥Êñ∞Ôºü(Y/n): " keep_repo
    case "${keep_repo:-Y}" in
        [Nn])
            echo -e "${gl_huang}ÁßªÈô§ËΩØ‰ª∂Ê∫êÂêéÂ∞ÜÊó†Ê≥ïÈÄöËøá apt upgrade Ëá™Âä®Ëé∑ÂèñÂÜÖÊ†∏Êõ¥Êñ∞ÔºåÂ¶ÇÈúÄÊõ¥Êñ∞ÈúÄÈáçÊñ∞Ê∑ªÂä†‰ªìÂ∫ì„ÄÇ${gl_bai}"
            read -e -p "Á°ÆËÆ§‰ªçË¶ÅÁßªÈô§ XanMod ËΩØ‰ª∂Ê∫êÂêóÔºü(Y/N): " remove_repo
            case "$remove_repo" in
                [Yy])
                    rm -f "$xanmod_repo_file"
                    echo -e "${gl_huang}Â∑≤ÊåâË¶ÅÊ±ÇÁßªÈô§ XanMod ËΩØ‰ª∂Ê∫ê„ÄÇ${gl_bai}"
                    ;;
                *)
                    echo -e "${gl_lv}Â∑≤‰øùÁïô XanMod ËΩØ‰ª∂Ê∫ê„ÄÇ${gl_bai}"
                    ;;
            esac
            ;;
        *)
            echo -e "${gl_lv}Â∑≤‰øùÁïô XanMod ËΩØ‰ª∂Ê∫êÔºåÁ≥ªÁªüÂèØÈÄöËøá apt upgrade Ëé∑ÂèñÊú™Êù•ÁöÑÂÜÖÊ†∏Êõ¥Êñ∞„ÄÇ${gl_bai}"
            ;;
    esac

    return 0
}


#=============================================================================
# IPÂú∞ÂùÄËé∑ÂèñÂáΩÊï∞
#=============================================================================

ip_address() {
    local public_ip=""
    local candidate=""
    local external_api_success=false
    local last_curl_status=0
    local external_api_notice=""

    if candidate=$(curl -4 -fsS --max-time 2 https://ipinfo.io/ip 2>/dev/null); then
        candidate=$(echo "$candidate" | tr -d '\r\n')
        if [ -n "$candidate" ]; then
            public_ip="$candidate"
            external_api_success=true
        fi
    else
        last_curl_status=$?
    fi

    if [ "$external_api_success" = false ]; then
        if candidate=$(curl -4 -fsS --max-time 2 https://api.ip.sb/ip 2>/dev/null); then
            candidate=$(echo "$candidate" | tr -d '\r\n')
            if [ -n "$candidate" ]; then
                public_ip="$candidate"
                external_api_success=true
            fi
        else
            last_curl_status=$?
        fi
    fi

    if [ "$external_api_success" = false ]; then
        if candidate=$(curl -4 -fsS --max-time 2 https://ifconfig.me/ip 2>/dev/null); then
            candidate=$(echo "$candidate" | tr -d '\r\n')
            if [ -n "$candidate" ]; then
                public_ip="$candidate"
                external_api_success=true
            fi
        else
            last_curl_status=$?
        fi
    fi

    if [ "$external_api_success" = false ]; then
        public_ip=$(ip -4 route get 1.1.1.1 2>/dev/null | awk '{for (i=1; i<=NF; i++) if ($i == "src") {print $(i+1); exit}}')
    fi

    if [ -z "$public_ip" ]; then
        public_ip=$(hostname -I 2>/dev/null | awk '{print $1}')
    fi

    if [ -z "$public_ip" ]; then
        public_ip="Â§ñÈÉ®Êé•Âè£‰∏çÂèØËææ"
    fi

    if [ "$external_api_success" = false ]; then
        external_api_notice="Â§ñÈÉ®Êé•Âè£‰∏çÂèØËææ"
        if [ "$last_curl_status" -ne 0 ]; then
            external_api_notice+=" (curl ËøîÂõûÁ†Å $last_curl_status)"
        fi
    fi

    local local_ipv4=""
    local_ipv4=$(ip -4 route get 1.1.1.1 2>/dev/null | awk '{for (i=1; i<=NF; i++) if ($i == "src") {print $(i+1); exit}}')
    if [ -z "$local_ipv4" ]; then
        local_ipv4=$(hostname -I 2>/dev/null | awk '{print $1}')
    fi
    if [ -z "$local_ipv4" ]; then
        local_ipv4="Â§ñÈÉ®Êé•Âè£‰∏çÂèØËææ"
    fi

    if ! isp_info=$(curl -fsS --max-time 2 http://ipinfo.io/org 2>/dev/null); then
        isp_info=""
    else
        isp_info=$(echo "$isp_info" | tr -d '\r\n')
    fi

    if [ -z "$isp_info" ] && [ -n "$external_api_notice" ]; then
        isp_info="$external_api_notice"
    fi

    if echo "$isp_info" | grep -Eiq 'mobile|unicom|telecom'; then
        ipv4_address="$local_ipv4"
    else
        ipv4_address="$public_ip"
    fi

    if [ -z "$ipv4_address" ]; then
        ipv4_address="$local_ipv4"
    fi

    if ! ipv6_address=$(curl -fsS --max-time 2 https://v6.ipinfo.io/ip 2>/dev/null); then
        ipv6_address=""
    else
        ipv6_address=$(echo "$ipv6_address" | tr -d '\r\n')
    fi

    if [ -n "$external_api_notice" ] && [ -z "$isp_info" ]; then
        isp_info="$external_api_notice"
    fi

    if [ -z "$isp_info" ]; then
        isp_info="Êú™Ëé∑ÂèñÂà∞ËøêËê•ÂïÜ‰ø°ÊÅØ"
    fi
}
#=============================================================================
# ÁΩëÁªúÊµÅÈáèÁªüËÆ°ÂáΩÊï∞
#=============================================================================

output_status() {
    output=$(awk 'BEGIN { rx_total = 0; tx_total = 0 }
        $1 ~ /^(eth|ens|enp|eno)[0-9]+/ {
            rx_total += $2
            tx_total += $10
        }
        END {
            rx_units = "Bytes";
            tx_units = "Bytes";
            if (rx_total > 1024) { rx_total /= 1024; rx_units = "K"; }
            if (rx_total > 1024) { rx_total /= 1024; rx_units = "M"; }
            if (rx_total > 1024) { rx_total /= 1024; rx_units = "G"; }

            if (tx_total > 1024) { tx_total /= 1024; tx_units = "K"; }
            if (tx_total > 1024) { tx_total /= 1024; tx_units = "M"; }
            if (tx_total > 1024) { tx_total /= 1024; tx_units = "G"; }

            printf("%.2f%s %.2f%s\n", rx_total, rx_units, tx_total, tx_units);
        }' /proc/net/dev)

    rx=$(echo "$output" | awk '{print $1}')
    tx=$(echo "$output" | awk '{print $2}')
}

#=============================================================================
# Êó∂Âå∫Ëé∑ÂèñÂáΩÊï∞
#=============================================================================

current_timezone() {
    if grep -q 'Alpine' /etc/issue 2>/dev/null; then
        date +"%Z %z"
    else
        timedatectl | grep "Time zone" | awk '{print $3}'
    fi
}

#=============================================================================
# ËØ¶ÁªÜÁ≥ªÁªü‰ø°ÊÅØÊòæÁ§∫
#=============================================================================

show_detailed_status() {
    clear

    ip_address

    local cpu_info=$(lscpu | awk -F': +' '/Model name:/ {print $2; exit}')

    local cpu_usage_percent=$(awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else printf "%.0f\n", (($2+$4-u1) * 100 / (t-t1))}' \
        <(grep 'cpu ' /proc/stat) <(sleep 1; grep 'cpu ' /proc/stat))

    local cpu_cores=$(nproc)

    local cpu_freq=$(cat /proc/cpuinfo | grep "MHz" | head -n 1 | awk '{printf "%.1f GHz\n", $4/1000}')

    local mem_info=$(free -b | awk 'NR==2{printf "%.2f/%.2fM (%.2f%%)", $3/1024/1024, $2/1024/1024, $3*100/$2}')

    local disk_info=$(df -h | awk '$NF=="/"{printf "%s/%s (%s)", $3, $2, $5}')

    local ipinfo=$(curl -s ipinfo.io)
    local country=$(echo "$ipinfo" | grep 'country' | awk -F': ' '{print $2}' | tr -d '",')
    local city=$(echo "$ipinfo" | grep 'city' | awk -F': ' '{print $2}' | tr -d '",')
    local isp_info=$(echo "$ipinfo" | grep 'org' | awk -F': ' '{print $2}' | tr -d '",')

    local load=$(uptime | awk '{print $(NF-2), $(NF-1), $NF}')
    local dns_addresses=$(awk '/^nameserver/{printf "%s ", $2} END {print ""}' /etc/resolv.conf)

    local cpu_arch=$(uname -m)
    local hostname=$(uname -n)
    local kernel_version=$(uname -r)

    local congestion_algorithm=$(sysctl -n net.ipv4.tcp_congestion_control)
    local queue_algorithm=$(sysctl -n net.core.default_qdisc)

    local os_info=$(grep PRETTY_NAME /etc/os-release | cut -d '=' -f2 | tr -d '"')

    output_status

    local current_time=$(date "+%Y-%m-%d %I:%M %p")

    local swap_info=$(free -m | awk 'NR==3{used=$3; total=$2; if (total == 0) {percentage=0} else {percentage=used*100/total}; printf "%dM/%dM (%d%%)", used, total, percentage}')

    local runtime=$(cat /proc/uptime | awk -F. '{run_days=int($1 / 86400);run_hours=int(($1 % 86400) / 3600);run_minutes=int(($1 % 3600) / 60); if (run_days > 0) printf("%dÂ§© ", run_days); if (run_hours > 0) printf("%dÊó∂ ", run_hours); printf("%dÂàÜ\n", run_minutes)}')

    local timezone=$(current_timezone)

    echo ""
    echo -e "Á≥ªÁªü‰ø°ÊÅØÊü•ËØ¢"
    echo -e "${gl_kjlan}-------------"
    echo -e "${gl_kjlan}‰∏ªÊú∫Âêç:       ${gl_bai}$hostname"
    echo -e "${gl_kjlan}Á≥ªÁªüÁâàÊú¨:     ${gl_bai}$os_info"
    echo -e "${gl_kjlan}LinuxÁâàÊú¨:    ${gl_bai}$kernel_version"
    echo -e "${gl_kjlan}-------------"
    echo -e "${gl_kjlan}CPUÊû∂ÊûÑ:      ${gl_bai}$cpu_arch"
    echo -e "${gl_kjlan}CPUÂûãÂè∑:      ${gl_bai}$cpu_info"
    echo -e "${gl_kjlan}CPUÊ†∏ÂøÉÊï∞:    ${gl_bai}$cpu_cores"
    echo -e "${gl_kjlan}CPUÈ¢ëÁéá:      ${gl_bai}$cpu_freq"
    echo -e "${gl_kjlan}-------------"
    echo -e "${gl_kjlan}CPUÂç†Áî®:      ${gl_bai}$cpu_usage_percent%"
    echo -e "${gl_kjlan}Á≥ªÁªüË¥üËΩΩ:     ${gl_bai}$load"
    echo -e "${gl_kjlan}Áâ©ÁêÜÂÜÖÂ≠ò:     ${gl_bai}$mem_info"
    echo -e "${gl_kjlan}ËôöÊãüÂÜÖÂ≠ò:     ${gl_bai}$swap_info"
    echo -e "${gl_kjlan}Á°¨ÁõòÂç†Áî®:     ${gl_bai}$disk_info"
    echo -e "${gl_kjlan}-------------"
    echo -e "${gl_kjlan}ÊÄªÊé•Êî∂:       ${gl_bai}$rx"
    echo -e "${gl_kjlan}ÊÄªÂèëÈÄÅ:       ${gl_bai}$tx"
    echo -e "${gl_kjlan}-------------"
    echo -e "${gl_kjlan}ÁΩëÁªúÁÆóÊ≥ï:     ${gl_bai}$congestion_algorithm $queue_algorithm"
    echo -e "${gl_kjlan}-------------"
    echo -e "${gl_kjlan}ËøêËê•ÂïÜ:       ${gl_bai}$isp_info"
    if [ -n "$ipv4_address" ]; then
        echo -e "${gl_kjlan}IPv4Âú∞ÂùÄ:     ${gl_bai}$ipv4_address"
    fi

    if [ -n "$ipv6_address" ]; then
        echo -e "${gl_kjlan}IPv6Âú∞ÂùÄ:     ${gl_bai}$ipv6_address"
    fi
    echo -e "${gl_kjlan}DNSÂú∞ÂùÄ:      ${gl_bai}$dns_addresses"
    echo -e "${gl_kjlan}Âú∞ÁêÜ‰ΩçÁΩÆ:     ${gl_bai}$country $city"
    echo -e "${gl_kjlan}Á≥ªÁªüÊó∂Èó¥:     ${gl_bai}$timezone $current_time"
    echo -e "${gl_kjlan}-------------"
    echo -e "${gl_kjlan}ËøêË°åÊó∂Èïø:     ${gl_bai}$runtime"
    echo

    break_end
}

#=============================================================================
# ÂÜÖÊ†∏ÂèÇÊï∞‰ºòÂåñ - ÊòüËæ∞Â§ßÊµ∑„Éæ‰ºòÂåñÊ®°ÂºèÔºàVLESS Reality/AnyTLS‰∏ìÁî®Ôºâ
#=============================================================================

optimize_xinchendahai() {
    echo -e "${gl_lv}ÂàáÊç¢Âà∞ÊòüËæ∞Â§ßÊµ∑„Éæ‰ºòÂåñÊ®°Âºè...${gl_bai}"
    echo -e "${gl_zi}ÈíàÂØπ VLESS Reality/AnyTLS ËäÇÁÇπÊ∑±Â∫¶‰ºòÂåñ${gl_bai}"
    echo ""
    echo -e "${gl_hong}‚ö†Ô∏è  ÈáçË¶ÅÊèêÁ§∫ ‚ö†Ô∏è${gl_bai}"
    echo -e "${gl_huang}Êú¨ÈÖçÁΩÆ‰∏∫‰∏¥Êó∂ÁîüÊïàÔºà‰ΩøÁî® sysctl -w ÂëΩ‰ª§Ôºâ${gl_bai}"
    echo -e "${gl_huang}ÈáçÂêØÂêéÂ∞ÜÊÅ¢Â§çÂà∞Ê∞∏‰πÖÈÖçÁΩÆÊñá‰ª∂ÁöÑËÆæÁΩÆ${gl_bai}"
    echo ""
    echo "Â¶ÇÊûú‰Ω†‰πãÂâçÊâßË°åËøáÔºö"
    echo "  - CAKEË∞É‰ºò / Debian12Ë∞É‰ºò / BBRÁõ¥Ëøû‰ºòÂåñ"
    echo "ÈáçÂêØÂêé‰ºöÊÅ¢Â§çÂà∞ÈÇ£‰∫õÈÖçÁΩÆÔºåÊú¨Ê¨°‰ºòÂåñ‰ºöÊ∂àÂ§±ÔºÅ"
    echo ""
    read -e -p "ÊòØÂê¶ÁªßÁª≠Ôºü(Y/N) [Y]: " confirm
    confirm=${confirm:-Y}
    if [[ "$confirm" =~ ^[Nn]$ ]]; then
        echo "Â∑≤ÂèñÊ∂à"
        return
    fi
    echo ""

    # Êñá‰ª∂ÊèèËø∞Á¨¶‰ºòÂåñ
    echo -e "${gl_lv}‰ºòÂåñÊñá‰ª∂ÊèèËø∞Á¨¶...${gl_bai}"
    ulimit -n 131072
    echo "  ‚úì Êñá‰ª∂ÊèèËø∞Á¨¶: 131072 (13‰∏á)"

    # ÂÜÖÂ≠òÁÆ°ÁêÜ‰ºòÂåñ
    echo -e "${gl_lv}‰ºòÂåñÂÜÖÂ≠òÁÆ°ÁêÜ...${gl_bai}"
    sysctl -w vm.swappiness=5 2>/dev/null
    echo "  ‚úì swappiness = 5 ÔºàÂÆâÂÖ®ÂÄºÔºâ"
    sysctl -w vm.dirty_ratio=15 2>/dev/null
    echo "  ‚úì dirty_ratio = 15"
    sysctl -w vm.dirty_background_ratio=5 2>/dev/null
    echo "  ‚úì dirty_background_ratio = 5"
    sysctl -w vm.overcommit_memory=1 2>/dev/null
    echo "  ‚úì overcommit_memory = 1"

    # TCPÊã•Â°ûÊéßÂà∂Ôºà‰øùÊåÅÁî®Êà∑ÁöÑÈòüÂàóÁÆóÊ≥ïÔºå‰∏çË¶ÜÁõñCAKEÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPÊã•Â°ûÊéßÂà∂...${gl_bai}"
    sysctl -w net.ipv4.tcp_congestion_control=bbr 2>/dev/null
    echo "  ‚úì tcp_congestion_control = bbr"
    current_qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null)
    if [ "$current_qdisc" = "cake" ]; then
        echo "  ‚úì default_qdisc = cake Ôºà‰øùÊåÅÁî®Êà∑ËÆæÁΩÆÔºâ"
    else
        echo "  ‚Ñπ default_qdisc = $current_qdisc Ôºà‰øùÊåÅ‰∏çÂèòÔºâ"
    fi

    # TCPËøûÊé•‰ºòÂåñÔºàTLSÊè°ÊâãÂä†ÈÄüÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPËøûÊé•ÔºàTLSÊè°ÊâãÂä†ÈÄüÔºâ...${gl_bai}"
    sysctl -w net.ipv4.tcp_fastopen=3 2>/dev/null
    echo "  ‚úì tcp_fastopen = 3"
    sysctl -w net.ipv4.tcp_slow_start_after_idle=0 2>/dev/null
    echo "  ‚úì tcp_slow_start_after_idle = 0 ÔºàÂÖ≥ÈîÆ‰ºòÂåñÔºâ"
    sysctl -w net.ipv4.tcp_tw_reuse=1 2>/dev/null
    echo "  ‚úì tcp_tw_reuse = 1"
    sysctl -w net.ipv4.tcp_fin_timeout=30 2>/dev/null
    echo "  ‚úì tcp_fin_timeout = 30"
    sysctl -w net.ipv4.tcp_max_syn_backlog=8192 2>/dev/null
    echo "  ‚úì tcp_max_syn_backlog = 8192"

    # TCP‰øùÊ¥ªËÆæÁΩÆ
    echo -e "${gl_lv}‰ºòÂåñTCP‰øùÊ¥ª...${gl_bai}"
    sysctl -w net.ipv4.tcp_keepalive_time=600 2>/dev/null
    echo "  ‚úì tcp_keepalive_time = 600s (10ÂàÜÈíü)"
    sysctl -w net.ipv4.tcp_keepalive_intvl=30 2>/dev/null
    echo "  ‚úì tcp_keepalive_intvl = 30s"
    sysctl -w net.ipv4.tcp_keepalive_probes=5 2>/dev/null
    echo "  ‚úì tcp_keepalive_probes = 5"

    # TCPÁºìÂÜ≤Âå∫‰ºòÂåñÔºà16MBÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPÁºìÂÜ≤Âå∫Ôºà16MBÔºâ...${gl_bai}"
    sysctl -w net.core.rmem_max=16777216 2>/dev/null
    echo "  ‚úì rmem_max = 16MB"
    sysctl -w net.core.wmem_max=16777216 2>/dev/null
    echo "  ‚úì wmem_max = 16MB"
    sysctl -w net.ipv4.tcp_rmem='4096 87380 16777216' 2>/dev/null
    echo "  ‚úì tcp_rmem = 4K 85K 16MB"
    sysctl -w net.ipv4.tcp_wmem='4096 65536 16777216' 2>/dev/null
    echo "  ‚úì tcp_wmem = 4K 64K 16MB"

    # UDP‰ºòÂåñÔºàQUICÊîØÊåÅÔºâ
    echo -e "${gl_lv}‰ºòÂåñUDPÔºàQUICÊîØÊåÅÔºâ...${gl_bai}"
    sysctl -w net.ipv4.udp_rmem_min=8192 2>/dev/null
    echo "  ‚úì udp_rmem_min = 8192"
    sysctl -w net.ipv4.udp_wmem_min=8192 2>/dev/null
    echo "  ‚úì udp_wmem_min = 8192"

    # ËøûÊé•ÈòüÂàó‰ºòÂåñ
    echo -e "${gl_lv}‰ºòÂåñËøûÊé•ÈòüÂàó...${gl_bai}"
    sysctl -w net.core.somaxconn=4096 2>/dev/null
    echo "  ‚úì somaxconn = 4096"
    sysctl -w net.core.netdev_max_backlog=5000 2>/dev/null
    echo "  ‚úì netdev_max_backlog = 5000 Ôºà‰øÆÊ≠£ËøáÈ´òÂÄºÔºâ"
    sysctl -w net.ipv4.ip_local_port_range='1024 65535' 2>/dev/null
    echo "  ‚úì ip_local_port_range = 1024-65535"

    echo ""
    echo -e "${gl_lv}ÊòüËæ∞Â§ßÊµ∑„Éæ‰ºòÂåñÊ®°ÂºèËÆæÁΩÆÂÆåÊàêÔºÅ${gl_bai}"
    echo -e "${gl_zi}ÈÖçÁΩÆÁâπÁÇπ: TLSÊè°ÊâãÂä†ÈÄü + QUICÊîØÊåÅ + Â§ßÂπ∂Âèë‰ºòÂåñ + CAKEÂÖºÂÆπ${gl_bai}"
    echo -e "${gl_huang}‰ºòÂåñËØ¥Êòé: Â∑≤‰øÆÊ≠£ËøáÊøÄÂèÇÊï∞Ôºå‰øùÊåÅÁî®Êà∑CAKEËÆæÁΩÆÔºåÈÄÇÈÖç‚â•2GBÂÜÖÂ≠ò${gl_bai}"
}

#=============================================================================
# ÂÜÖÊ†∏ÂèÇÊï∞‰ºòÂåñ - RealityÁªàÊûÅ‰ºòÂåñÔºàÊñπÊ°àEÔºâ
#=============================================================================

optimize_reality_ultimate() {
    echo -e "${gl_lv}ÂàáÊç¢Âà∞RealityÁªàÊûÅ‰ºòÂåñÊ®°Âºè...${gl_bai}"
    echo -e "${gl_zi}Âü∫‰∫éÊòüËæ∞Â§ßÊµ∑Ê∑±Â∫¶ÊîπËøõÔºåÊÄßËÉΩÊèêÂçá5-10%ÔºåËµÑÊ∫êÊ∂àËÄóÈôç‰Ωé25%${gl_bai}"
    echo ""
    echo -e "${gl_hong}‚ö†Ô∏è  ÈáçË¶ÅÊèêÁ§∫ ‚ö†Ô∏è${gl_bai}"
    echo -e "${gl_huang}Êú¨ÈÖçÁΩÆ‰∏∫‰∏¥Êó∂ÁîüÊïàÔºà‰ΩøÁî® sysctl -w ÂëΩ‰ª§Ôºâ${gl_bai}"
    echo -e "${gl_huang}ÈáçÂêØÂêéÂ∞ÜÊÅ¢Â§çÂà∞Ê∞∏‰πÖÈÖçÁΩÆÊñá‰ª∂ÁöÑËÆæÁΩÆ${gl_bai}"
    echo ""
    echo "Â¶ÇÊûú‰Ω†‰πãÂâçÊâßË°åËøáÔºö"
    echo "  - CAKEË∞É‰ºò / Debian12Ë∞É‰ºò / BBRÁõ¥Ëøû‰ºòÂåñ"
    echo "ÈáçÂêØÂêé‰ºöÊÅ¢Â§çÂà∞ÈÇ£‰∫õÈÖçÁΩÆÔºåÊú¨Ê¨°‰ºòÂåñ‰ºöÊ∂àÂ§±ÔºÅ"
    echo ""
    read -e -p "ÊòØÂê¶ÁªßÁª≠Ôºü(Y/N) [Y]: " confirm
    confirm=${confirm:-Y}
    if [[ "$confirm" =~ ^[Nn]$ ]]; then
        echo "Â∑≤ÂèñÊ∂à"
        return
    fi
    echo ""

    # Êñá‰ª∂ÊèèËø∞Á¨¶‰ºòÂåñ
    echo -e "${gl_lv}‰ºòÂåñÊñá‰ª∂ÊèèËø∞Á¨¶...${gl_bai}"
    ulimit -n 524288
    echo "  ‚úì Êñá‰ª∂ÊèèËø∞Á¨¶: 524288 (50‰∏á)"

    # TCPÊã•Â°ûÊéßÂà∂ÔºàÊ†∏ÂøÉÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPÊã•Â°ûÊéßÂà∂...${gl_bai}"
    sysctl -w net.ipv4.tcp_congestion_control=bbr 2>/dev/null
    echo "  ‚úì tcp_congestion_control = bbr"
    current_qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null)
    if [ "$current_qdisc" = "cake" ]; then
        echo "  ‚úì default_qdisc = cake Ôºà‰øùÊåÅÁî®Êà∑ËÆæÁΩÆÔºâ"
    else
        echo "  ‚Ñπ default_qdisc = $current_qdisc Ôºà‰øùÊåÅ‰∏çÂèòÔºâ"
    fi

    # TCPËøûÊé•‰ºòÂåñÔºàTLSÊè°ÊâãÂä†ÈÄüÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPËøûÊé•ÔºàTLSÊè°ÊâãÂä†ÈÄüÔºâ...${gl_bai}"
    sysctl -w net.ipv4.tcp_fastopen=3 2>/dev/null
    echo "  ‚úì tcp_fastopen = 3"
    sysctl -w net.ipv4.tcp_slow_start_after_idle=0 2>/dev/null
    echo "  ‚úì tcp_slow_start_after_idle = 0 ÔºàÂÖ≥ÈîÆ‰ºòÂåñÔºâ"
    sysctl -w net.ipv4.tcp_tw_reuse=1 2>/dev/null
    echo "  ‚úì tcp_tw_reuse = 1"
    sysctl -w net.ipv4.ip_local_port_range='1024 65535' 2>/dev/null
    echo "  ‚úì ip_local_port_range = 1024-65535"

    # RealityÁâπÊúâ‰ºòÂåñÔºàÊñπÊ°àEÊ†∏ÂøÉ‰∫ÆÁÇπÔºâ
    echo -e "${gl_lv}RealityÁâπÊúâ‰ºòÂåñ...${gl_bai}"
    sysctl -w net.ipv4.tcp_notsent_lowat=16384 2>/dev/null
    echo "  ‚úì tcp_notsent_lowat = 16384 ÔºàÂáèÂ∞ëÂª∂ËøüÔºâ"
    sysctl -w net.ipv4.tcp_fin_timeout=15 2>/dev/null
    echo "  ‚úì tcp_fin_timeout = 15 ÔºàÂø´ÈÄüÂõûÊî∂Ôºâ"
    sysctl -w net.ipv4.tcp_max_tw_buckets=5000 2>/dev/null
    echo "  ‚úì tcp_max_tw_buckets = 5000"

    # TCPÁºìÂÜ≤Âå∫Ôºà12MBÂπ≥Ë°°ÈÖçÁΩÆÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPÁºìÂÜ≤Âå∫Ôºà12MBÔºâ...${gl_bai}"
    sysctl -w net.core.rmem_max=12582912 2>/dev/null
    echo "  ‚úì rmem_max = 12MB"
    sysctl -w net.core.wmem_max=12582912 2>/dev/null
    echo "  ‚úì wmem_max = 12MB"
    sysctl -w net.ipv4.tcp_rmem='4096 87380 12582912' 2>/dev/null
    echo "  ‚úì tcp_rmem = 4K 85K 12MB"
    sysctl -w net.ipv4.tcp_wmem='4096 65536 12582912' 2>/dev/null
    echo "  ‚úì tcp_wmem = 4K 64K 12MB"

    # ÂÜÖÂ≠òÁÆ°ÁêÜ
    echo -e "${gl_lv}‰ºòÂåñÂÜÖÂ≠òÁÆ°ÁêÜ...${gl_bai}"
    sysctl -w vm.swappiness=5 2>/dev/null
    echo "  ‚úì swappiness = 5"
    sysctl -w vm.dirty_ratio=15 2>/dev/null
    echo "  ‚úì dirty_ratio = 15"
    sysctl -w vm.dirty_background_ratio=5 2>/dev/null
    echo "  ‚úì dirty_background_ratio = 5"
    sysctl -w vm.overcommit_memory=1 2>/dev/null
    echo "  ‚úì overcommit_memory = 1"
    sysctl -w vm.vfs_cache_pressure=50 2>/dev/null
    echo "  ‚úì vfs_cache_pressure = 50"

    # ËøûÊé•‰øùÊ¥ªÔºàÊõ¥Áü≠ÁöÑÊ£ÄÊµãÂë®ÊúüÔºâ
    echo -e "${gl_lv}‰ºòÂåñËøûÊé•‰øùÊ¥ª...${gl_bai}"
    sysctl -w net.ipv4.tcp_keepalive_time=300 2>/dev/null
    echo "  ‚úì tcp_keepalive_time = 300s (5ÂàÜÈíü)"
    sysctl -w net.ipv4.tcp_keepalive_intvl=30 2>/dev/null
    echo "  ‚úì tcp_keepalive_intvl = 30s"
    sysctl -w net.ipv4.tcp_keepalive_probes=5 2>/dev/null
    echo "  ‚úì tcp_keepalive_probes = 5"

    # UDP/QUIC‰ºòÂåñ
    echo -e "${gl_lv}‰ºòÂåñUDPÔºàQUICÊîØÊåÅÔºâ...${gl_bai}"
    sysctl -w net.ipv4.udp_rmem_min=8192 2>/dev/null
    echo "  ‚úì udp_rmem_min = 8192"
    sysctl -w net.ipv4.udp_wmem_min=8192 2>/dev/null
    echo "  ‚úì udp_wmem_min = 8192"

    # ËøûÊé•ÈòüÂàó‰ºòÂåñÔºàÁßëÂ≠¶ÈÖçÁΩÆÔºâ
    echo -e "${gl_lv}‰ºòÂåñËøûÊé•ÈòüÂàó...${gl_bai}"
    sysctl -w net.core.somaxconn=4096 2>/dev/null
    echo "  ‚úì somaxconn = 4096"
    sysctl -w net.ipv4.tcp_max_syn_backlog=8192 2>/dev/null
    echo "  ‚úì tcp_max_syn_backlog = 8192"
    sysctl -w net.core.netdev_max_backlog=5000 2>/dev/null
    echo "  ‚úì netdev_max_backlog = 5000 ÔºàÁßëÂ≠¶ÂÄºÔºâ"

    # TCPÂÆâÂÖ®
    echo -e "${gl_lv}TCPÂÆâÂÖ®Â¢ûÂº∫...${gl_bai}"
    sysctl -w net.ipv4.tcp_syncookies=1 2>/dev/null
    echo "  ‚úì tcp_syncookies = 1"
    sysctl -w net.ipv4.tcp_mtu_probing=1 2>/dev/null
    echo "  ‚úì tcp_mtu_probing = 1"

    echo ""
    echo -e "${gl_lv}ÊòüËæ∞Â§ßÊµ∑„Éæ‰ºòÂåñÊ®°ÂºèËÆæÁΩÆÂÆåÊàêÔºÅ${gl_bai}"
    echo -e "${gl_zi}ÈÖçÁΩÆÁâπÁÇπ: TLSÊè°ÊâãÂä†ÈÄü + QUICÊîØÊåÅ + Â§ßÂπ∂Âèë‰ºòÂåñ + CAKEÂÖºÂÆπ${gl_bai}"
    echo -e "${gl_huang}‰ºòÂåñËØ¥Êòé: Â∑≤‰øÆÊ≠£ËøáÊøÄÂèÇÊï∞Ôºå‰øùÊåÅÁî®Êà∑CAKEËÆæÁΩÆÔºåÈÄÇÈÖç‚â•2GBÂÜÖÂ≠ò${gl_bai}"
}

#=============================================================================
# ÂÜÖÊ†∏ÂèÇÊï∞‰ºòÂåñ - RealityÁªàÊûÅ‰ºòÂåñÔºàÊñπÊ°àEÔºâ
#=============================================================================

optimize_reality_ultimate() {
    echo -e "${gl_lv}ÂàáÊç¢Âà∞RealityÁªàÊûÅ‰ºòÂåñÊ®°Âºè...${gl_bai}"
    echo -e "${gl_zi}Âü∫‰∫éÊòüËæ∞Â§ßÊµ∑Ê∑±Â∫¶ÊîπËøõÔºåÊÄßËÉΩÊèêÂçá5-10%ÔºåËµÑÊ∫êÊ∂àËÄóÈôç‰Ωé25%${gl_bai}"
    echo ""
    echo -e "${gl_hong}‚ö†Ô∏è  ÈáçË¶ÅÊèêÁ§∫ ‚ö†Ô∏è${gl_bai}"
    echo -e "${gl_huang}Êú¨ÈÖçÁΩÆ‰∏∫‰∏¥Êó∂ÁîüÊïàÔºà‰ΩøÁî® sysctl -w ÂëΩ‰ª§Ôºâ${gl_bai}"
    echo -e "${gl_huang}ÈáçÂêØÂêéÂ∞ÜÊÅ¢Â§çÂà∞Ê∞∏‰πÖÈÖçÁΩÆÊñá‰ª∂ÁöÑËÆæÁΩÆ${gl_bai}"
    echo ""
    echo "Â¶ÇÊûú‰Ω†‰πãÂâçÊâßË°åËøáÔºö"
    echo "  - CAKEË∞É‰ºò / Debian12Ë∞É‰ºò / BBRÁõ¥Ëøû‰ºòÂåñ"
    echo "ÈáçÂêØÂêé‰ºöÊÅ¢Â§çÂà∞ÈÇ£‰∫õÈÖçÁΩÆÔºåÊú¨Ê¨°‰ºòÂåñ‰ºöÊ∂àÂ§±ÔºÅ"
    echo ""
    read -e -p "ÊòØÂê¶ÁªßÁª≠Ôºü(Y/N) [Y]: " confirm
    confirm=${confirm:-Y}
    if [[ "$confirm" =~ ^[Nn]$ ]]; then
        echo "Â∑≤ÂèñÊ∂à"
        return
    fi
    echo ""

    # Êñá‰ª∂ÊèèËø∞Á¨¶‰ºòÂåñ
    echo -e "${gl_lv}‰ºòÂåñÊñá‰ª∂ÊèèËø∞Á¨¶...${gl_bai}"
    ulimit -n 524288
    echo "  ‚úì Êñá‰ª∂ÊèèËø∞Á¨¶: 524288 (50‰∏á)"

    # TCPÊã•Â°ûÊéßÂà∂ÔºàÊ†∏ÂøÉÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPÊã•Â°ûÊéßÂà∂...${gl_bai}"
    sysctl -w net.ipv4.tcp_congestion_control=bbr 2>/dev/null
    echo "  ‚úì tcp_congestion_control = bbr"
    current_qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null)
    if [ "$current_qdisc" = "cake" ]; then
        echo "  ‚úì default_qdisc = cake Ôºà‰øùÊåÅÁî®Êà∑ËÆæÁΩÆÔºâ"
    else
        echo "  ‚Ñπ default_qdisc = $current_qdisc Ôºà‰øùÊåÅ‰∏çÂèòÔºâ"
    fi

    # TCPËøûÊé•‰ºòÂåñÔºàTLSÊè°ÊâãÂä†ÈÄüÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPËøûÊé•ÔºàTLSÊè°ÊâãÂä†ÈÄüÔºâ...${gl_bai}"
    sysctl -w net.ipv4.tcp_fastopen=3 2>/dev/null
    echo "  ‚úì tcp_fastopen = 3"
    sysctl -w net.ipv4.tcp_slow_start_after_idle=0 2>/dev/null
    echo "  ‚úì tcp_slow_start_after_idle = 0 ÔºàÂÖ≥ÈîÆ‰ºòÂåñÔºâ"
    sysctl -w net.ipv4.tcp_tw_reuse=1 2>/dev/null
    echo "  ‚úì tcp_tw_reuse = 1"
    sysctl -w net.ipv4.ip_local_port_range='1024 65535' 2>/dev/null
    echo "  ‚úì ip_local_port_range = 1024-65535"

    # RealityÁâπÊúâ‰ºòÂåñÔºàÊñπÊ°àEÊ†∏ÂøÉ‰∫ÆÁÇπÔºâ
    echo -e "${gl_lv}RealityÁâπÊúâ‰ºòÂåñ...${gl_bai}"
    sysctl -w net.ipv4.tcp_notsent_lowat=16384 2>/dev/null
    echo "  ‚úì tcp_notsent_lowat = 16384 ÔºàÂáèÂ∞ëÂª∂ËøüÔºâ"
    sysctl -w net.ipv4.tcp_fin_timeout=15 2>/dev/null
    echo "  ‚úì tcp_fin_timeout = 15 ÔºàÂø´ÈÄüÂõûÊî∂Ôºâ"
    sysctl -w net.ipv4.tcp_max_tw_buckets=5000 2>/dev/null
    echo "  ‚úì tcp_max_tw_buckets = 5000"

    # TCPÁºìÂÜ≤Âå∫Ôºà12MBÂπ≥Ë°°ÈÖçÁΩÆÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPÁºìÂÜ≤Âå∫Ôºà12MBÔºâ...${gl_bai}"
    sysctl -w net.core.rmem_max=12582912 2>/dev/null
    echo "  ‚úì rmem_max = 12MB"
    sysctl -w net.core.wmem_max=12582912 2>/dev/null
    echo "  ‚úì wmem_max = 12MB"
    sysctl -w net.ipv4.tcp_rmem='4096 87380 12582912' 2>/dev/null
    echo "  ‚úì tcp_rmem = 4K 85K 12MB"
    sysctl -w net.ipv4.tcp_wmem='4096 65536 12582912' 2>/dev/null
    echo "  ‚úì tcp_wmem = 4K 64K 12MB"

    # ÂÜÖÂ≠òÁÆ°ÁêÜ
    echo -e "${gl_lv}‰ºòÂåñÂÜÖÂ≠òÁÆ°ÁêÜ...${gl_bai}"
    sysctl -w vm.swappiness=5 2>/dev/null
    echo "  ‚úì swappiness = 5"
    sysctl -w vm.dirty_ratio=15 2>/dev/null
    echo "  ‚úì dirty_ratio = 15"
    sysctl -w vm.dirty_background_ratio=5 2>/dev/null
    echo "  ‚úì dirty_background_ratio = 5"
    sysctl -w vm.overcommit_memory=1 2>/dev/null
    echo "  ‚úì overcommit_memory = 1"
    sysctl -w vm.vfs_cache_pressure=50 2>/dev/null
    echo "  ‚úì vfs_cache_pressure = 50"

    # ËøûÊé•‰øùÊ¥ªÔºàÊõ¥Áü≠ÁöÑÊ£ÄÊµãÂë®ÊúüÔºâ
    echo -e "${gl_lv}‰ºòÂåñËøûÊé•‰øùÊ¥ª...${gl_bai}"
    sysctl -w net.ipv4.tcp_keepalive_time=300 2>/dev/null
    echo "  ‚úì tcp_keepalive_time = 300s (5ÂàÜÈíü)"
    sysctl -w net.ipv4.tcp_keepalive_intvl=30 2>/dev/null
    echo "  ‚úì tcp_keepalive_intvl = 30s"
    sysctl -w net.ipv4.tcp_keepalive_probes=5 2>/dev/null
    echo "  ‚úì tcp_keepalive_probes = 5"

    # UDP/QUIC‰ºòÂåñ
    echo -e "${gl_lv}‰ºòÂåñUDPÔºàQUICÊîØÊåÅÔºâ...${gl_bai}"
    sysctl -w net.ipv4.udp_rmem_min=8192 2>/dev/null
    echo "  ‚úì udp_rmem_min = 8192"
    sysctl -w net.ipv4.udp_wmem_min=8192 2>/dev/null
    echo "  ‚úì udp_wmem_min = 8192"

    # ËøûÊé•ÈòüÂàó‰ºòÂåñÔºàÁßëÂ≠¶ÈÖçÁΩÆÔºâ
    echo -e "${gl_lv}‰ºòÂåñËøûÊé•ÈòüÂàó...${gl_bai}"
    sysctl -w net.core.somaxconn=4096 2>/dev/null
    echo "  ‚úì somaxconn = 4096"
    sysctl -w net.ipv4.tcp_max_syn_backlog=8192 2>/dev/null
    echo "  ‚úì tcp_max_syn_backlog = 8192"
    sysctl -w net.core.netdev_max_backlog=5000 2>/dev/null
    echo "  ‚úì netdev_max_backlog = 5000 ÔºàÁßëÂ≠¶ÂÄºÔºâ"

    # TCPÂÆâÂÖ®
    echo -e "${gl_lv}TCPÂÆâÂÖ®Â¢ûÂº∫...${gl_bai}"
    sysctl -w net.ipv4.tcp_syncookies=1 2>/dev/null
    echo "  ‚úì tcp_syncookies = 1"
    sysctl -w net.ipv4.tcp_mtu_probing=1 2>/dev/null
    echo "  ‚úì tcp_mtu_probing = 1"

    echo ""
    echo -e "${gl_lv}RealityÁªàÊûÅ‰ºòÂåñÂÆåÊàêÔºÅ${gl_bai}"
    echo -e "${gl_zi}ÈÖçÁΩÆÁâπÁÇπ: ÊÄßËÉΩÊèêÂçá5-10% + ËµÑÊ∫êÊ∂àËÄóÈôç‰Ωé25% + Êõ¥ÁßëÂ≠¶ÁöÑÂèÇÊï∞ÈÖçÁΩÆ${gl_bai}"
    echo -e "${gl_huang}È¢ÑÊúüÊïàÊûú: ÊØîÊòüËæ∞Â§ßÊµ∑Êõ¥Âπ≥Ë°°ÔºåÈÄÇÈÖçÊÄßÊõ¥Âº∫Ôºà‚â•2GBÂÜÖÂ≠òÂç≥ÂèØÔºâ${gl_bai}"
}

#=============================================================================
# ÂÜÖÊ†∏ÂèÇÊï∞‰ºòÂåñ - ‰ΩéÈÖç‰ºòÂåñÔºà1GBÂÜÖÂ≠ò‰∏ìÁî®Ôºâ
#=============================================================================

optimize_low_spec() {
    echo -e "${gl_lv}ÂàáÊç¢Âà∞‰ΩéÈÖç‰ºòÂåñÊ®°Âºè...${gl_bai}"
    echo -e "${gl_zi}‰∏ì‰∏∫512MB-1GBÂÜÖÂ≠òVPSËÆæËÆ°ÔºåÂÆâÂÖ®Á®≥ÂÆö${gl_bai}"
    echo ""
    echo -e "${gl_hong}‚ö†Ô∏è  ÈáçË¶ÅÊèêÁ§∫ ‚ö†Ô∏è${gl_bai}"
    echo -e "${gl_huang}Êú¨ÈÖçÁΩÆ‰∏∫‰∏¥Êó∂ÁîüÊïàÔºà‰ΩøÁî® sysctl -w ÂëΩ‰ª§Ôºâ${gl_bai}"
    echo -e "${gl_huang}ÈáçÂêØÂêéÂ∞ÜÊÅ¢Â§çÂà∞Ê∞∏‰πÖÈÖçÁΩÆÊñá‰ª∂ÁöÑËÆæÁΩÆ${gl_bai}"
    echo ""
    echo "Â¶ÇÊûú‰Ω†‰πãÂâçÊâßË°åËøáÔºö"
    echo "  - CAKEË∞É‰ºò / Debian12Ë∞É‰ºò / BBRÁõ¥Ëøû‰ºòÂåñ"
    echo "ÈáçÂêØÂêé‰ºöÊÅ¢Â§çÂà∞ÈÇ£‰∫õÈÖçÁΩÆÔºåÊú¨Ê¨°‰ºòÂåñ‰ºöÊ∂àÂ§±ÔºÅ"
    echo ""
    read -e -p "ÊòØÂê¶ÁªßÁª≠Ôºü(Y/N) [Y]: " confirm
    confirm=${confirm:-Y}
    if [[ "$confirm" =~ ^[Nn]$ ]]; then
        echo "Â∑≤ÂèñÊ∂à"
        return
    fi
    echo ""

    # Êñá‰ª∂ÊèèËø∞Á¨¶‰ºòÂåñÔºàÈÄÇÂ∫¶Ôºâ
    echo -e "${gl_lv}‰ºòÂåñÊñá‰ª∂ÊèèËø∞Á¨¶...${gl_bai}"
    ulimit -n 65535
    echo "  ‚úì Êñá‰ª∂ÊèèËø∞Á¨¶: 65535 (6.5‰∏á)"

    # TCPÊã•Â°ûÊéßÂà∂ÔºàÊ†∏ÂøÉÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPÊã•Â°ûÊéßÂà∂...${gl_bai}"
    sysctl -w net.ipv4.tcp_congestion_control=bbr 2>/dev/null
    echo "  ‚úì tcp_congestion_control = bbr"
    current_qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null)
    if [ "$current_qdisc" = "cake" ]; then
        echo "  ‚úì default_qdisc = cake Ôºà‰øùÊåÅÁî®Êà∑ËÆæÁΩÆÔºâ"
    else
        echo "  ‚Ñπ default_qdisc = $current_qdisc Ôºà‰øùÊåÅ‰∏çÂèòÔºâ"
    fi

    # TCPËøûÊé•‰ºòÂåñÔºàÊ†∏ÂøÉÂäüËÉΩÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPËøûÊé•...${gl_bai}"
    sysctl -w net.ipv4.tcp_fastopen=3 2>/dev/null
    echo "  ‚úì tcp_fastopen = 3"
    sysctl -w net.ipv4.tcp_slow_start_after_idle=0 2>/dev/null
    echo "  ‚úì tcp_slow_start_after_idle = 0 ÔºàÂÖ≥ÈîÆ‰ºòÂåñÔºâ"
    sysctl -w net.ipv4.tcp_tw_reuse=1 2>/dev/null
    echo "  ‚úì tcp_tw_reuse = 1"
    sysctl -w net.ipv4.ip_local_port_range='1024 65535' 2>/dev/null
    echo "  ‚úì ip_local_port_range = 1024-65535"

    # TCPÁºìÂÜ≤Âå∫Ôºà8MB‰øùÂÆàÈÖçÁΩÆÔºâ
    echo -e "${gl_lv}‰ºòÂåñTCPÁºìÂÜ≤Âå∫Ôºà8MB‰øùÂÆàÈÖçÁΩÆÔºâ...${gl_bai}"
    sysctl -w net.core.rmem_max=8388608 2>/dev/null
    echo "  ‚úì rmem_max = 8MB"
    sysctl -w net.core.wmem_max=8388608 2>/dev/null
    echo "  ‚úì wmem_max = 8MB"
    sysctl -w net.ipv4.tcp_rmem='4096 87380 8388608' 2>/dev/null
    echo "  ‚úì tcp_rmem = 4K 85K 8MB"
    sysctl -w net.ipv4.tcp_wmem='4096 65536 8388608' 2>/dev/null
    echo "  ‚úì tcp_wmem = 4K 64K 8MB"

    # ÂÜÖÂ≠òÁÆ°ÁêÜÔºà‰øùÂÆàÂÆâÂÖ®Ôºâ
    echo -e "${gl_lv}‰ºòÂåñÂÜÖÂ≠òÁÆ°ÁêÜ...${gl_bai}"
    sysctl -w vm.swappiness=10 2>/dev/null
    echo "  ‚úì swappiness = 10 ÔºàÂÆâÂÖ®ÂÄºÔºâ"
    sysctl -w vm.dirty_ratio=20 2>/dev/null
    echo "  ‚úì dirty_ratio = 20"
    sysctl -w vm.dirty_background_ratio=10 2>/dev/null
    echo "  ‚úì dirty_background_ratio = 10"

    # ËøûÊé•ÈòüÂàóÔºàÈÄÇÂ∫¶ÈÖçÁΩÆÔºâ
    echo -e "${gl_lv}‰ºòÂåñËøûÊé•ÈòüÂàó...${gl_bai}"
    sysctl -w net.core.somaxconn=2048 2>/dev/null
    echo "  ‚úì somaxconn = 2048"
    sysctl -w net.ipv4.tcp_max_syn_backlog=4096 2>/dev/null
    echo "  ‚úì tcp_max_syn_backlog = 4096"
    sysctl -w net.core.netdev_max_backlog=2500 2>/dev/null
    echo "  ‚úì netdev_max_backlog = 2500"

    # TCPÂÆâÂÖ®
    echo -e "${gl_lv}TCPÂÆâÂÖ®Â¢ûÂº∫...${gl_bai}"
    sysctl -w net.ipv4.tcp_syncookies=1 2>/dev/null
    echo "  ‚úì tcp_syncookies = 1"

    echo ""
    echo -e "${gl_lv}‰ΩéÈÖç‰ºòÂåñÂÆåÊàêÔºÅ${gl_bai}"
    echo -e "${gl_zi}ÈÖçÁΩÆÁâπÁÇπ: Ê†∏ÂøÉ‰ºòÂåñ‰øùÁïô + ËµÑÊ∫êÊ∂àËÄóÊúÄ‰Ωé + Á®≥ÂÆöÊÄßÊúÄÈ´ò${gl_bai}"
    echo -e "${gl_huang}ÈÄÇÁî®Âú∫ÊôØ: 512MB-1GBÂÜÖÂ≠òVPSÔºåÊÄßËÉΩÊèêÂçá15-25%${gl_bai}"
}

#=============================================================================
# ÂÜÖÊ†∏ÂèÇÊï∞‰ºòÂåñ - ÊòüËæ∞Â§ßÊµ∑ÂéüÂßãÁâàÔºàÁî®‰∫éÂØπÊØîÊµãËØïÔºâ
#=============================================================================

optimize_xinchendahai_original() {
    echo -e "${gl_lv}ÂàáÊç¢Âà∞ÊòüËæ∞Â§ßÊµ∑„ÉæÂéüÂßãÁâàÊ®°Âºè...${gl_bai}"
    echo -e "${gl_zi}ÈíàÂØπ VLESS Reality/AnyTLS ËäÇÁÇπÊ∑±Â∫¶‰ºòÂåñÔºàÂéüÂßãÂèÇÊï∞Ôºâ${gl_bai}"
    echo ""
    echo -e "${gl_hong}‚ö†Ô∏è  ÈáçË¶ÅÊèêÁ§∫ ‚ö†Ô∏è${gl_bai}"
    echo -e "${gl_huang}Êú¨ÈÖçÁΩÆ‰∏∫‰∏¥Êó∂ÁîüÊïàÔºà‰ΩøÁî® sysctl -w ÂëΩ‰ª§Ôºâ${gl_bai}"
    echo -e "${gl_huang}ÈáçÂêØÂêéÂ∞ÜÊÅ¢Â§çÂà∞Ê∞∏‰πÖÈÖçÁΩÆÊñá‰ª∂ÁöÑËÆæÁΩÆ${gl_bai}"
    echo ""
    echo "Â¶ÇÊûú‰Ω†‰πãÂâçÊâßË°åËøáÔºö"
    echo "  - CAKEË∞É‰ºò / Debian12Ë∞É‰ºò / BBRÁõ¥Ëøû‰ºòÂåñ"
    echo "ÈáçÂêØÂêé‰ºöÊÅ¢Â§çÂà∞ÈÇ£‰∫õÈÖçÁΩÆÔºåÊú¨Ê¨°‰ºòÂåñ‰ºöÊ∂àÂ§±ÔºÅ"
    echo ""
    read -e -p "ÊòØÂê¶ÁªßÁª≠Ôºü(Y/N) [Y]: " confirm
    confirm=${confirm:-Y}
    if [[ "$confirm" =~ ^[Nn]$ ]]; then
        echo "Â∑≤ÂèñÊ∂à"
        return
    fi
    echo ""

    echo -e "${gl_lv}‰ºòÂåñÊñá‰ª∂ÊèèËø∞Á¨¶...${gl_bai}"
    ulimit -n 1048576
    echo "  ‚úì Êñá‰ª∂ÊèèËø∞Á¨¶: 1048576 (100‰∏á)"

    echo -e "${gl_lv}‰ºòÂåñÂÜÖÂ≠òÁÆ°ÁêÜ...${gl_bai}"
    sysctl -w vm.swappiness=1 2>/dev/null
    echo "  ‚úì vm.swappiness = 1"
    sysctl -w vm.dirty_ratio=15 2>/dev/null
    echo "  ‚úì vm.dirty_ratio = 15"
    sysctl -w vm.dirty_background_ratio=5 2>/dev/null
    echo "  ‚úì vm.dirty_background_ratio = 5"
    sysctl -w vm.overcommit_memory=1 2>/dev/null
    echo "  ‚úì vm.overcommit_memory = 1"
    sysctl -w vm.min_free_kbytes=65536 2>/dev/null
    echo "  ‚úì vm.min_free_kbytes = 65536"
    sysctl -w vm.vfs_cache_pressure=50 2>/dev/null
    echo "  ‚úì vm.vfs_cache_pressure = 50"

    echo -e "${gl_lv}‰ºòÂåñTCPÊã•Â°ûÊéßÂà∂...${gl_bai}"
    sysctl -w net.ipv4.tcp_congestion_control=bbr 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_congestion_control = bbr"
    
    # Êô∫ËÉΩÊ£ÄÊµãÂΩìÂâç qdiscÔºåÂ¶ÇÊûúÊòØ cake Âàô‰øùÊåÅÔºåÂê¶ÂàôËÆæ‰∏∫ fq
    current_qdisc=$(sysctl -n net.core.default_qdisc 2>/dev/null || echo "fq")
    if [ "$current_qdisc" = "cake" ]; then
        echo "  ‚úì net.core.default_qdisc = cake (‰øùÊåÅÂΩìÂâçËÆæÁΩÆ)"
    else
        sysctl -w net.core.default_qdisc=fq 2>/dev/null
        echo "  ‚úì net.core.default_qdisc = fq"
    fi

    echo -e "${gl_lv}‰ºòÂåñTCPËøûÊé•ÔºàTLSÊè°ÊâãÂä†ÈÄüÔºâ...${gl_bai}"
    sysctl -w net.ipv4.tcp_fastopen=3 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_fastopen = 3"
    sysctl -w net.ipv4.tcp_fin_timeout=30 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_fin_timeout = 30"
    sysctl -w net.ipv4.tcp_max_syn_backlog=8192 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_max_syn_backlog = 8192"
    sysctl -w net.ipv4.tcp_tw_reuse=1 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_tw_reuse = 1"
    sysctl -w net.ipv4.tcp_slow_start_after_idle=0 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_slow_start_after_idle = 0"
    sysctl -w net.ipv4.tcp_mtu_probing=2 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_mtu_probing = 2"
    sysctl -w net.ipv4.tcp_window_scaling=1 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_window_scaling = 1"
    sysctl -w net.ipv4.tcp_timestamps=1 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_timestamps = 1"

    echo -e "${gl_lv}‰ºòÂåñTCPÂÆâÂÖ®/Á®≥ÊÄÅ...${gl_bai}"
    sysctl -w net.ipv4.tcp_syncookies=1 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_syncookies = 1"
    sysctl -w net.ipv4.tcp_keepalive_time=600 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_keepalive_time = 600"
    sysctl -w net.ipv4.tcp_keepalive_intvl=30 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_keepalive_intvl = 30"
    sysctl -w net.ipv4.tcp_keepalive_probes=5 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_keepalive_probes = 5"

    echo -e "${gl_lv}‰ºòÂåñTCPÁºìÂÜ≤Âå∫...${gl_bai}"
    sysctl -w net.core.rmem_max=16777216 2>/dev/null
    echo "  ‚úì net.core.rmem_max = 16777216"
    sysctl -w net.core.wmem_max=16777216 2>/dev/null
    echo "  ‚úì net.core.wmem_max = 16777216"
    sysctl -w net.core.rmem_default=262144 2>/dev/null
    echo "  ‚úì net.core.rmem_default = 262144"
    sysctl -w net.core.wmem_default=262144 2>/dev/null
    echo "  ‚úì net.core.wmem_default = 262144"
    sysctl -w net.ipv4.tcp_rmem='4096 87380 16777216' 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_rmem = 4096 87380 16777216"
    sysctl -w net.ipv4.tcp_wmem='4096 65536 16777216' 2>/dev/null
    echo "  ‚úì net.ipv4.tcp_wmem = 4096 65536 16777216"

    echo -e "${gl_lv}‰ºòÂåñUDPÔºàQUICÊîØÊåÅÔºâ...${gl_bai}"
    sysctl -w net.ipv4.udp_rmem_min=8192 2>/dev/null
    echo "  ‚úì net.ipv4.udp_rmem_min = 8192"
    sysctl -w net.ipv4.udp_wmem_min=8192 2>/dev/null
    echo "  ‚úì net.ipv4.udp_wmem_min = 8192"

    echo -e "${gl_lv}‰ºòÂåñËøûÊé•ÈòüÂàó...${gl_bai}"
    sysctl -w net.core.somaxconn=4096 2>/dev/null
    echo "  ‚úì net.core.somaxconn = 4096"
    sysctl -w net.core.netdev_max_backlog=250000 2>/dev/null
    echo "  ‚úì net.core.netdev_max_backlog = 250000"
    sysctl -w net.ipv4.ip_local_port_range='1024 65535' 2>/dev/null
    echo "  ‚úì net.ipv4.ip_local_port_range = 1024 65535"

    echo -e "${gl_lv}‰ºòÂåñCPUËÆæÁΩÆ...${gl_bai}"
    sysctl -w kernel.sched_autogroup_enabled=0 2>/dev/null
    echo "  ‚úì kernel.sched_autogroup_enabled = 0"
    sysctl -w kernel.numa_balancing=0 2>/dev/null
    echo "  ‚úì kernel.numa_balancing = 0"

    echo -e "${gl_lv}ÂÖ∂‰ªñ‰ºòÂåñ...${gl_bai}"
    echo never > /sys/kernel/mm/transparent_hugepage/enabled 2>/dev/null
    echo "  ‚úì transparent_hugepage = never"

    echo ""
    echo -e "${gl_lv}ÊòüËæ∞Â§ßÊµ∑„ÉæÂéüÂßãÁâà‰ºòÂåñÊ®°ÂºèËÆæÁΩÆÂÆåÊàêÔºÅ${gl_bai}"
    echo -e "${gl_zi}ÈÖçÁΩÆÁâπÁÇπ: TLSÊè°ÊâãÂä†ÈÄü + QUICÊîØÊåÅ + Â§ßÂπ∂Âèë‰ºòÂåñ${gl_bai}"
    echo -e "${gl_huang}Ê≥®ÊÑè: ËøôÊòØÂéüÂßãÂèÇÊï∞ÁâàÊú¨ÔºåÁî®‰∫éÂØπÊØîÊµãËØïÔºåÂª∫ËÆÆ‚â•4GBÂÜÖÂ≠ò‰ΩøÁî®${gl_bai}"
}

#=============================================================================
# ÂÜÖÊ†∏ÂèÇÊï∞‰ºòÂåñ - ‰∏ªËèúÂçï
#=============================================================================

Kernel_optimize() {
    while true; do
        clear
        echo "LinuxÁ≥ªÁªüÂÜÖÊ†∏ÂèÇÊï∞‰ºòÂåñ - Reality‰∏ìÁî®Ë∞É‰ºò"
        echo "------------------------------------------------"
        echo "ÈíàÂØπVLESS Reality/AnyTLSËäÇÁÇπÊ∑±Â∫¶‰ºòÂåñ"
        echo -e "${gl_huang}ÊèêÁ§∫: ${gl_bai}ÊâÄÊúâÊñπÊ°àÈÉΩÊòØ‰∏¥Êó∂ÁîüÊïàÔºàÈáçÂêØÂêéËá™Âä®ËøòÂéüÔºâ"
        echo "--------------------"
        echo "1. ÊòüËæ∞Â§ßÊµ∑„Éæ‰ºòÂåñÔºö  13‰∏áÊñá‰ª∂ÊèèËø∞Á¨¶Ôºå16MBÁºìÂÜ≤Âå∫ÔºåÂÖºÂÆπCAKE"
        echo "                      ÈÄÇÁî®Ôºö‚â•2GBÂÜÖÂ≠òÔºåÊé®Ëçê‰ΩøÁî®"
        echo "                      ËØÑÂàÜÔºö‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (24/25ÂàÜ) üèÜ"
        echo ""
        echo "2. RealityÁªàÊûÅ‰ºòÂåñÔºö  50‰∏áÊñá‰ª∂ÊèèËø∞Á¨¶Ôºå12MBÁºìÂÜ≤Âå∫"
        echo "                      ÈÄÇÁî®Ôºö‚â•2GBÂÜÖÂ≠òÔºåÊÄßËÉΩ+5-10%ÔºàÊé®ËçêÔºâ"
        echo "                      ËØÑÂàÜÔºö‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (24/25ÂàÜ) üèÜ"
        echo ""
        echo "3. ‰ΩéÈÖç‰ºòÂåñÊ®°ÂºèÔºö     6.5‰∏áÊñá‰ª∂ÊèèËø∞Á¨¶Ôºå8MBÁºìÂÜ≤Âå∫"
        echo "                      ÈÄÇÁî®Ôºö512MB-1GBÂÜÖÂ≠òÔºåÁ®≥ÂÆö‰ºòÂÖà"
        echo "                      ËØÑÂàÜÔºö‚≠ê‚≠ê‚≠ê‚≠ê (20/25ÂàÜ) üí° 1GBÂÜÖÂ≠òÊé®Ëçê"
        echo ""
        echo "4. ÊòüËæ∞Â§ßÊµ∑ÂéüÂßãÁâàÔºö   100‰∏áÊñá‰ª∂ÊèèËø∞Á¨¶Ôºå16MBÁºìÂÜ≤Âå∫ÔºåÂº∫Âà∂fq"
        echo "                      ÈÄÇÁî®Ôºö‚â•4GBÂÜÖÂ≠òÔºåÂØπÊØîÊµãËØïÁî®"
        echo "                      ËØÑÂàÜÔºö‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê (23/25ÂàÜ) üß™ ÊµãËØïÂØπÊØî"
        echo "--------------------"
        echo "0. ËøîÂõû‰∏ªËèúÂçï"
        echo "--------------------"
        read -e -p "ËØ∑ËæìÂÖ•‰Ω†ÁöÑÈÄâÊã©: " sub_choice
        case $sub_choice in
            1)
                cd ~
                clear
                optimize_xinchendahai
                ;;
            2)
                cd ~
                clear
                optimize_reality_ultimate
                ;;
            3)
                cd ~
                clear
                optimize_low_spec
                ;;
            4)
                cd ~
                clear
                optimize_xinchendahai_original
                ;;
            0)
                break
                ;;
            *)
                echo "Êó†ÊïàÁöÑËæìÂÖ•!"
                sleep 1
                ;;
        esac
        break_end
    done
}

run_speedtest() {
    clear
    echo -e "${gl_kjlan}=== ÊúçÂä°Âô®Â∏¶ÂÆΩÊµãËØï ===${gl_bai}"
    echo ""

    # Ê£ÄÊµã CPU Êû∂ÊûÑ
    local cpu_arch=$(uname -m)
    echo "Ê£ÄÊµãÂà∞Á≥ªÁªüÊû∂ÊûÑ: ${gl_huang}${cpu_arch}${gl_bai}"
    echo ""

    # Ê£ÄÊü• speedtest ÊòØÂê¶Â∑≤ÂÆâË£Ö
    if command -v speedtest &>/dev/null; then
        echo -e "${gl_lv}Speedtest Â∑≤ÂÆâË£ÖÔºåÁõ¥Êé•ËøêË°åÊµãËØï...${gl_bai}"
        echo "------------------------------------------------"
        echo ""
        speedtest --accept-license
        echo ""
        echo "------------------------------------------------"
        break_end
        return 0
    fi

    echo "Speedtest Êú™ÂÆâË£ÖÔºåÊ≠£Âú®‰∏ãËΩΩÂÆâË£Ö..."
    echo "------------------------------------------------"
    echo ""

    # Ê†πÊçÆÊû∂ÊûÑÈÄâÊã©‰∏ãËΩΩÈìæÊé•
    local download_url
    local tarball_name

    case "$cpu_arch" in
        x86_64)
            download_url="https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-x86_64.tgz"
            tarball_name="ookla-speedtest-1.2.0-linux-x86_64.tgz"
            echo "‰ΩøÁî® AMD64 Êû∂ÊûÑÁâàÊú¨..."
            ;;
        aarch64)
            download_url="https://install.speedtest.net/app/cli/ookla-speedtest-1.2.0-linux-aarch64.tgz"
            tarball_name="speedtest.tgz"
            echo "‰ΩøÁî® ARM64 Êû∂ÊûÑÁâàÊú¨..."
            ;;
        *)
            echo -e "${gl_hong}ÈîôËØØ: ‰∏çÊîØÊåÅÁöÑÊû∂ÊûÑ ${cpu_arch}${gl_bai}"
            echo "ÁõÆÂâç‰ªÖÊîØÊåÅ x86_64 Âíå aarch64 Êû∂ÊûÑ"
            echo ""
            break_end
            return 1
            ;;
    esac

    # ÂàáÊç¢Âà∞‰∏¥Êó∂ÁõÆÂΩï
    cd /tmp || {
        echo -e "${gl_hong}ÈîôËØØ: Êó†Ê≥ïÂàáÊç¢Âà∞ /tmp ÁõÆÂΩï${gl_bai}"
        break_end
        return 1
    }

    # ‰∏ãËΩΩ
    echo "Ê≠£Âú®‰∏ãËΩΩ..."
    if [ "$cpu_arch" = "aarch64" ]; then
        curl -Lo "$tarball_name" "$download_url"
    else
        wget "$download_url"
    fi

    if [ $? -ne 0 ]; then
        echo -e "${gl_hong}‰∏ãËΩΩÂ§±Ë¥•ÔºÅ${gl_bai}"
        break_end
        return 1
    fi

    # Ëß£Âéã
    echo "Ê≠£Âú®Ëß£Âéã..."
    tar -xvzf "$tarball_name"

    if [ $? -ne 0 ]; then
        echo -e "${gl_hong}Ëß£ÂéãÂ§±Ë¥•ÔºÅ${gl_bai}"
        rm -f "$tarball_name"
        break_end
        return 1
    fi

    # ÁßªÂä®Âà∞Á≥ªÁªüÁõÆÂΩï
    echo "Ê≠£Âú®ÂÆâË£Ö..."
    mv speedtest /usr/local/bin/

    if [ $? -ne 0 ]; then
        echo -e "${gl_hong}ÂÆâË£ÖÂ§±Ë¥•ÔºÅ${gl_bai}"
        rm -f "$tarball_name"
        break_end
        return 1
    fi

    # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
    rm -f "$tarball_name"

    echo -e "${gl_lv}‚úÖ Speedtest ÂÆâË£ÖÊàêÂäüÔºÅ${gl_bai}"
    echo ""
    echo "ÂºÄÂßãÂ∏¶ÂÆΩÊµãËØï..."
    echo "------------------------------------------------"
    echo ""

    # ËøêË°åÊµãËØïÔºàËá™Âä®Êé•ÂèóËÆ∏ÂèØÔºâ
    speedtest --accept-license

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_backtrace() {
    clear
    echo -e "${gl_kjlan}=== ‰∏âÁΩëÂõûÁ®ãË∑ØÁî±ÊµãËØï ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°å‰∏âÁΩëÂõûÁ®ãË∑ØÁî±ÊµãËØïËÑöÊú¨..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°å‰∏âÁΩëÂõûÁ®ãË∑ØÁî±ÊµãËØïËÑöÊú¨
    local backtrace_tmp
    backtrace_tmp=$(mktemp)
    if download_repo_resource "backtrace_install" "$backtrace_tmp" "‰∏âÁΩëÂõûÁ®ãË∑ØÁî±ÊµãËØïËÑöÊú¨"; then
        chmod +x "$backtrace_tmp"
        if ! bash "$backtrace_tmp"; then
            echo -e "${gl_hong}‰∏âÁΩëÂõûÁ®ãË∑ØÁî±ÊµãËØïËÑöÊú¨ÊâßË°åÂ§±Ë¥•${gl_bai}"
        fi
    else
        echo -e "${gl_hong}Êó†Ê≥ïËé∑Âèñ‰∏âÁΩëÂõûÁ®ãË∑ØÁî±ÊµãËØïËÑöÊú¨${gl_bai}"
    fi
    rm -f "$backtrace_tmp"

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_ns_detect() {
    clear
    echo -e "${gl_kjlan}=== NS‰∏ÄÈîÆÊ£ÄÊµãËÑöÊú¨ ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°å NS ‰∏ÄÈîÆÊ£ÄÊµãËÑöÊú¨..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°å NS ‰∏ÄÈîÆÊ£ÄÊµãËÑöÊú¨
    bash <(curl -sL https://run.NodeQuality.com)

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_ip_quality_check() {
    clear
    echo -e "${gl_kjlan}=== IPË¥®ÈáèÊ£ÄÊµã ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°å IP Ë¥®ÈáèÊ£ÄÊµãËÑöÊú¨ÔºàIPv4 + IPv6Ôºâ..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°å IP Ë¥®ÈáèÊ£ÄÊµãËÑöÊú¨
    bash <(curl -Ls https://IP.Check.Place)

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_ip_quality_check_ipv4() {
    clear
    echo -e "${gl_kjlan}=== IPË¥®ÈáèÊ£ÄÊµã - ‰ªÖIPv4 ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°å IP Ë¥®ÈáèÊ£ÄÊµãËÑöÊú¨Ôºà‰ªÖ IPv4Ôºâ..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°å IP Ë¥®ÈáèÊ£ÄÊµãËÑöÊú¨ - ‰ªÖ IPv4
    bash <(curl -Ls https://IP.Check.Place) -4

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_network_latency_check() {
    clear
    echo -e "${gl_kjlan}=== ÁΩëÁªúÂª∂ËøüË¥®ÈáèÊ£ÄÊµã ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°åÁΩëÁªúÂª∂ËøüË¥®ÈáèÊ£ÄÊµãËÑöÊú¨..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°åÁΩëÁªúÂª∂ËøüË¥®ÈáèÊ£ÄÊµãËÑöÊú¨
    bash <(curl -sL https://Check.Place) -N

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_international_speed_test() {
    clear
    echo -e "${gl_kjlan}=== ÂõΩÈôÖ‰∫íËÅîÈÄüÂ∫¶ÊµãËØï ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®‰∏ãËΩΩÂπ∂ËøêË°åÂõΩÈôÖ‰∫íËÅîÈÄüÂ∫¶ÊµãËØïËÑöÊú¨..."
    echo "------------------------------------------------"
    echo ""

    local latency_tmp
    local original_dir=$(pwd)

    if ! cd /tmp; then
        echo -e "${gl_hong}ÈîôËØØ: Êó†Ê≥ïÂàáÊç¢Âà∞ /tmp ÁõÆÂΩï${gl_bai}"
        break_end
        return 1
    fi

    latency_tmp=$(mktemp)

    echo "Ê≠£Âú®‰∏ãËΩΩËÑöÊú¨..."
    if ! download_repo_resource "latency_tester" "$latency_tmp" "ÂõΩÈôÖ‰∫íËÅîÈÄüÂ∫¶ÊµãËØïËÑöÊú¨"; then
        echo -e "${gl_hong}Êó†Ê≥ïËé∑ÂèñÂõΩÈôÖ‰∫íËÅîÈÄüÂ∫¶ÊµãËØïËÑöÊú¨${gl_bai}"
        rm -f "$latency_tmp"
        cd "$original_dir" || true
        break_end
        return 1
    fi

    chmod +x "$latency_tmp"

    echo ""
    echo "ÂºÄÂßãÊµãËØï..."
    echo "------------------------------------------------"
    echo ""
    if ! "$latency_tmp"; then
        echo -e "${gl_hong}ÂõΩÈôÖ‰∫íËÅîÈÄüÂ∫¶ÊµãËØïËÑöÊú¨ÊâßË°åÂ§±Ë¥•${gl_bai}"
    fi

    rm -f "$latency_tmp"
    cd "$original_dir" || true

    echo ""
    echo "------------------------------------------------"
    break_end
}

#=============================================================================
# iperf3 ÂçïÁ∫øÁ®ãÁΩëÁªúÊµãËØï
#=============================================================================

iperf3_single_thread_test() {
    clear
    echo -e "${gl_zi}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${gl_bai}"
    echo -e "${gl_zi}‚ïë       iperf3 ÂçïÁ∫øÁ®ãÁΩëÁªúÊÄßËÉΩÊµãËØï            ‚ïë${gl_bai}"
    echo -e "${gl_zi}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${gl_bai}"
    echo ""
    
    # Ê£ÄÊü• iperf3 ÊòØÂê¶ÂÆâË£Ö
    if ! command -v iperf3 &>/dev/null; then
        echo -e "${gl_huang}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_huang}Ê£ÄÊµãÂà∞ iperf3 Êú™ÂÆâË£ÖÔºåÊ≠£Âú®Ëá™Âä®ÂÆâË£Ö...${gl_bai}"
        echo -e "${gl_huang}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo ""
        
        if command -v apt &>/dev/null; then
            echo "Ê≠•È™§ 1/2: Êõ¥Êñ∞ËΩØ‰ª∂ÂåÖÂàóË°®..."
            apt update -y
            
            echo ""
            echo "Ê≠•È™§ 2/2: ÂÆâË£Ö iperf3..."
            apt install -y iperf3
            
            if [ $? -ne 0 ]; then
                echo ""
                echo -e "${gl_hong}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
                echo -e "${gl_hong}iperf3 ÂÆâË£ÖÂ§±Ë¥•ÔºÅ${gl_bai}"
                echo -e "${gl_hong}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
                break_end
                return 1
            fi
        else
            echo -e "${gl_hong}ÈîôËØØ: ‰∏çÊîØÊåÅÁöÑÂåÖÁÆ°ÁêÜÂô®Ôºà‰ªÖÊîØÊåÅ aptÔºâ${gl_bai}"
            break_end
            return 1
        fi
        
        echo ""
        echo -e "${gl_lv}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_lv}‚úì iperf3 ÂÆâË£ÖÊàêÂäüÔºÅ${gl_bai}"
        echo -e "${gl_lv}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo ""
    fi
    
    # ËæìÂÖ•ÁõÆÊ†áÊúçÂä°Âô®
    echo -e "${gl_kjlan}[Ê≠•È™§ 1/3] ËæìÂÖ•ÁõÆÊ†áÊúçÂä°Âô®${gl_bai}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    read -e -p "ËØ∑ËæìÂÖ•ÁõÆÊ†áÊúçÂä°Âô® IP ÊàñÂüüÂêç: " target_host
    
    if [ -z "$target_host" ]; then
        echo -e "${gl_hong}ÈîôËØØ: ÁõÆÊ†áÊúçÂä°Âô®‰∏çËÉΩ‰∏∫Á©∫ÔºÅ${gl_bai}"
        break_end
        return 1
    fi
    
    echo ""
    
    # ÈÄâÊã©ÊµãËØïÊñπÂêë
    echo -e "${gl_kjlan}[Ê≠•È™§ 2/3] ÈÄâÊã©ÊµãËØïÊñπÂêë${gl_bai}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "1. ‰∏ä‰º†ÊµãËØïÔºàÊú¨Êú∫ ‚Üí ËøúÁ®ãÊúçÂä°Âô®Ôºâ"
    echo "2. ‰∏ãËΩΩÊµãËØïÔºàËøúÁ®ãÊúçÂä°Âô® ‚Üí Êú¨Êú∫Ôºâ"
    echo ""
    read -e -p "ËØ∑ÈÄâÊã©ÊµãËØïÊñπÂêë [1-2]: " direction_choice
    
    case "$direction_choice" in
        1)
            direction_flag=""
            direction_text="‰∏äË°åÔºàÊú¨Êú∫ ‚Üí ${target_host}Ôºâ"
            ;;
        2)
            direction_flag="-R"
            direction_text="‰∏ãË°åÔºà${target_host} ‚Üí Êú¨Êú∫Ôºâ"
            ;;
        *)
            echo -e "${gl_hong}Êó†ÊïàÁöÑÈÄâÊã©Ôºå‰ΩøÁî®ÈªòËÆ§ÂÄº: ‰∏ä‰º†ÊµãËØï${gl_bai}"
            direction_flag=""
            direction_text="‰∏äË°åÔºàÊú¨Êú∫ ‚Üí ${target_host}Ôºâ"
            ;;
    esac
    
    echo ""
    
    # ËæìÂÖ•ÊµãËØïÊó∂Èïø
    echo -e "${gl_kjlan}[Ê≠•È™§ 3/3] ËÆæÁΩÆÊµãËØïÊó∂Èïø${gl_bai}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "Âª∫ËÆÆ: 30-120 ÁßíÔºàÈªòËÆ§ 60 ÁßíÔºâ"
    echo ""
    read -e -p "ËØ∑ËæìÂÖ•ÊµãËØïÊó∂ÈïøÔºàÁßíÔºâ[60]: " test_duration
    test_duration=${test_duration:-60}
    
    # È™åËØÅÊó∂ÈïøÊòØÂê¶‰∏∫Êï∞Â≠ó
    if ! [[ "$test_duration" =~ ^[0-9]+$ ]]; then
        echo -e "${gl_huang}Ë≠¶Âëä: Êó†ÊïàÁöÑÊó∂ÈïøÔºå‰ΩøÁî®ÈªòËÆ§ÂÄº 60 Áßí${gl_bai}"
        test_duration=60
    fi
    
    # ÈôêÂà∂Êó∂ÈïøËåÉÂõ¥
    if [ "$test_duration" -lt 1 ]; then
        test_duration=1
    elif [ "$test_duration" -gt 3600 ]; then
        echo -e "${gl_huang}Ë≠¶Âëä: Êó∂ÈïøËøáÈïøÔºåÈôêÂà∂‰∏∫ 3600 Áßí${gl_bai}"
        test_duration=3600
    fi
    
    echo ""
    echo -e "${gl_lv}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "${gl_kjlan}ÊµãËØïÈÖçÁΩÆÁ°ÆËÆ§Ôºö${gl_bai}"
    echo "  ÁõÆÊ†áÊúçÂä°Âô®: ${target_host}"
    echo "  ÊµãËØïÊñπÂêë: ${direction_text}"
    echo "  ÊµãËØïÊó∂Èïø: ${test_duration} Áßí"
    echo -e "${gl_lv}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    
    # ÊµãËØïËøûÈÄöÊÄß
    echo -e "${gl_huang}Ê≠£Âú®ÊµãËØïËøûÈÄöÊÄß...${gl_bai}"
    if ! ping -c 2 -W 3 "$target_host" &>/dev/null; then
        echo -e "${gl_hong}Ë≠¶Âëä: Êó†Ê≥ï ping ÈÄöÁõÆÊ†áÊúçÂä°Âô®Ôºå‰ΩÜ‰ªçÂ∞ùËØï iperf3 ÊµãËØï...${gl_bai}"
    else
        echo -e "${gl_lv}‚úì ÁõÆÊ†áÊúçÂä°Âô®ÂèØËææ${gl_bai}"
    fi
    
    echo ""
    echo -e "${gl_kjlan}Ê≠£Âú®ÊâßË°å iperf3 ÊµãËØïÔºåËØ∑Á®çÂÄô...${gl_bai}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo ""
    
    # ÊâßË°å iperf3 ÊµãËØïÂπ∂‰øùÂ≠òËæìÂá∫
    local test_output=$(mktemp)
    iperf3 -c "$target_host" -P 1 $direction_flag -t "$test_duration" -f m 2>&1 | tee "$test_output"
    local exit_code=$?
    
    echo ""
    
    # Ê£ÄÊü•ÊòØÂê¶ÊàêÂäü
    if [ $exit_code -ne 0 ]; then
        echo -e "${gl_hong}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_hong}ÊµãËØïÂ§±Ë¥•ÔºÅ${gl_bai}"
        echo ""
        echo "ÂèØËÉΩÁöÑÂéüÂõ†Ôºö"
        echo "  1. ÁõÆÊ†áÊúçÂä°Âô®Êú™ËøêË°å iperf3 ÊúçÂä°ÔºàÈúÄË¶ÅÊâßË°å: iperf3 -sÔºâ"
        echo "  2. Èò≤ÁÅ´Â¢ôÈòªÊ≠¢‰∫ÜËøûÊé•ÔºàÈªòËÆ§Á´ØÂè£ 5201Ôºâ"
        echo "  3. ÁΩëÁªúËøûÊé•ÈóÆÈ¢ò"
        echo -e "${gl_hong}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        rm -f "$test_output"
        break_end
        return 1
    fi
    
    # Ëß£ÊûêÊµãËØïÁªìÊûú
    echo -e "${gl_lv}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "${gl_zi}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${gl_bai}"
    echo -e "${gl_zi}‚ïë           Êµã ËØï Áªì Êûú Ê±á ÊÄª                ‚ïë${gl_bai}"
    echo -e "${gl_zi}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${gl_bai}"
    echo ""
    
    # ÊèêÂèñÂÖ≥ÈîÆÊåáÊ†á
    local bandwidth=$(grep "sender\|receiver" "$test_output" | tail -1 | awk '{print $7, $8}')
    local transfer=$(grep "sender\|receiver" "$test_output" | tail -1 | awk '{print $5, $6}')
    local retrans=$(grep "sender" "$test_output" | tail -1 | awk '{print $9}')
    
    echo -e "${gl_kjlan}[ÊµãËØï‰ø°ÊÅØ]${gl_bai}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    echo "  ÁõÆÊ†áÊúçÂä°Âô®: ${target_host}"
    echo "  ÊµãËØïÊñπÂêë: ${direction_text}"
    echo "  ÊµãËØïÊó∂Èïø: ${test_duration} Áßí"
    echo "  ÊµãËØïÁ∫øÁ®ã: 1"
    echo ""
    
    echo -e "${gl_kjlan}[ÊÄßËÉΩÊåáÊ†á]${gl_bai}"
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    if [ -n "$bandwidth" ]; then
        echo "  Âπ≥ÂùáÂ∏¶ÂÆΩ: ${bandwidth}"
    else
        echo "  Âπ≥ÂùáÂ∏¶ÂÆΩ: Êó†Ê≥ïËé∑Âèñ"
    fi
    
    if [ -n "$transfer" ]; then
        echo "  ÊÄª‰º†ËæìÈáè: ${transfer}"
    else
        echo "  ÊÄª‰º†ËæìÈáè: Êó†Ê≥ïËé∑Âèñ"
    fi
    
    if [ -n "$retrans" ] && [ "$retrans" != "" ]; then
        echo "  Èáç‰º†Ê¨°Êï∞: ${retrans}"
        # ÁÆÄÂçïËØÑ‰ª∑
        if [ "$retrans" -eq 0 ]; then
            echo -e "  ËøûÊé•Ë¥®Èáè: ${gl_lv}‰ºòÁßÄÔºàÊó†Èáç‰º†Ôºâ${gl_bai}"
        elif [ "$retrans" -lt 100 ]; then
            echo -e "  ËøûÊé•Ë¥®Èáè: ${gl_lv}ËâØÂ•Ω${gl_bai}"
        elif [ "$retrans" -lt 1000 ]; then
            echo -e "  ËøûÊé•Ë¥®Èáè: ${gl_huang}‰∏ÄËà¨ÔºàÈáç‰º†ÂÅèÂ§öÔºâ${gl_bai}"
        else
            echo -e "  ËøûÊé•Ë¥®Èáè: ${gl_hong}ËæÉÂ∑ÆÔºàÈáç‰º†ËøáÂ§öÔºâ${gl_bai}"
        fi
    fi
    
    echo ""
    echo -e "${gl_lv}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "${gl_lv}‚úì ÊµãËØïÂÆåÊàê${gl_bai}"
    echo -e "${gl_lv}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    
    # Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
    rm -f "$test_output"
    
    echo ""
    break_end
}

#=============================================================================
# ‰∏ªËèúÂçï
#=============================================================================

show_main_menu() {
    clear
    check_bbr_status
    local is_installed=$?
    
    echo ""
    echo -e "${gl_zi}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${gl_bai}"
    echo -e "${gl_zi}‚ïë   BBR v3 ÁªàÊûÅ‰ºòÂåñËÑöÊú¨ - Ultimate Edition  ‚ïë${gl_bai}"
    echo -e "${gl_zi}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${gl_bai}"
    echo ""
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Ê†∏ÂøÉÂäüËÉΩ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "${gl_kjlan}[ÂÜÖÊ†∏ÁÆ°ÁêÜ]${gl_bai}"

    if [ $is_installed -eq 0 ]; then
        echo "1. Êõ¥Êñ∞ XanMod ÂÜÖÊ†∏"
        echo "2. Âç∏ËΩΩ XanMod ÂÜÖÊ†∏"
        echo ""
        echo -e "${gl_kjlan}[BBR/ÁΩëÁªú‰ºòÂåñ]${gl_bai}"
        echo "3. BBR Áõ¥Ëøû/ËêΩÂú∞‰ºòÂåñÔºàÊô∫ËÉΩÂ∏¶ÂÆΩÊ£ÄÊµãÔºâ‚≠ê Êé®Ëçê"
        echo "4. NSËÆ∫ÂùõCAKEË∞É‰ºò"
        echo "5. ÁßëÊäÄlionÈ´òÊÄßËÉΩÊ®°Âºè"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Á≥ªÁªüÈÖçÁΩÆ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_kjlan}[ÁΩëÁªúËÆæÁΩÆ]${gl_bai}"
        echo "6. ËÆæÁΩÆIPv4/IPv6‰ºòÂÖàÁ∫ß"
        echo "7. IPv6ÁÆ°ÁêÜÔºà‰∏¥Êó∂/Ê∞∏‰πÖÁ¶ÅÁî®/ÂèñÊ∂àÔºâ"
        echo "8. ËÆæÁΩÆ‰∏¥Êó∂SOCKS5‰ª£ÁêÜ"
        echo ""
        echo -e "${gl_kjlan}[Á≥ªÁªüÁÆ°ÁêÜ]${gl_bai}"
        echo "9. ËôöÊãüÂÜÖÂ≠òÁÆ°ÁêÜ"
        echo "10. Êü•ÁúãÁ≥ªÁªüËØ¶ÁªÜÁä∂ÊÄÅ"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ËΩ¨Âèë/‰ª£ÁêÜÈÖçÁΩÆ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_kjlan}[RealmËΩ¨ÂèëÁÆ°ÁêÜ]${gl_bai}"
        echo "11. RealmËΩ¨ÂèëËøûÊé•ÂàÜÊûê"
        echo "12. RealmÂº∫Âà∂‰ΩøÁî®IPv4 ‚≠ê Êé®Ëçê"
        echo "13. IPv4/IPv6ËøûÊé•Ê£ÄÊµã"
        echo ""
        echo -e "${gl_kjlan}[XrayÈÖçÁΩÆ]${gl_bai}"
        echo "14. Êü•ÁúãXrayÈÖçÁΩÆ"
        echo "15. ËÆæÁΩÆXray IPv6Âá∫Á´ô"
        echo "16. ÊÅ¢Â§çXrayÈªòËÆ§ÈÖçÁΩÆ"
        echo ""
        echo -e "${gl_kjlan}[‰ª£ÁêÜÈÉ®ÁΩ≤]${gl_bai}"
        echo "17. ‰∏ÄÈîÆÈÉ®ÁΩ≤SOCKS5‰ª£ÁêÜ"
        echo "18. Sub-StoreÂ§öÂÆû‰æãÁÆ°ÁêÜ"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ÊµãËØïÊ£ÄÊµã ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_kjlan}[IPË¥®ÈáèÊ£ÄÊµã]${gl_bai}"
        echo "19. IPË¥®ÈáèÊ£ÄÊµãÔºàIPv4+IPv6Ôºâ"
        echo "20. IPË¥®ÈáèÊ£ÄÊµãÔºà‰ªÖIPv4Ôºâ‚≠ê Êé®Ëçê"
        echo ""
        echo -e "${gl_kjlan}[ÁΩëÁªúÊµãËØï]${gl_bai}"
        echo "21. ÊúçÂä°Âô®Â∏¶ÂÆΩÊµãËØï"
        echo "22. iperf3ÂçïÁ∫øÁ®ãÊµãËØï"
        echo "23. ÂõΩÈôÖ‰∫íËÅîÈÄüÂ∫¶ÊµãËØï ‚≠ê Êé®Ëçê"
        echo "24. ÁΩëÁªúÂª∂ËøüË¥®ÈáèÊ£ÄÊµã ‚≠ê Êé®Ëçê"
        echo "25. ‰∏âÁΩëÂõûÁ®ãË∑ØÁî±ÊµãËØï ‚≠ê Êé®Ëçê"
        echo ""
        echo -e "${gl_kjlan}[ÊµÅÂ™í‰Ωì/AIÊ£ÄÊµã]${gl_bai}"
        echo "26. IPÂ™í‰Ωì/AIËß£ÈîÅÊ£ÄÊµã ‚≠ê Êé®Ëçê"
        echo "27. NS‰∏ÄÈîÆÊ£ÄÊµãËÑöÊú¨ ‚≠ê Êé®Ëçê"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Á¨¨‰∏âÊñπÂ∑•ÂÖ∑ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_kjlan}[ËÑöÊú¨ÂêàÈõÜ]${gl_bai}"
        echo "28. PF_realmËΩ¨ÂèëËÑöÊú¨ ‚≠ê Êé®Ëçê"
        echo "29. Âæ°ÂùÇÁæéÁê¥‰∏ÄÈîÆÂèåÂçèËÆÆ ‚≠ê Êé®Ëçê"
        echo "30. F‰Ω¨‰∏ÄÈîÆsing boxËÑöÊú¨"
        echo "31. ÁßëÊäÄlionËÑöÊú¨"
        echo "32. ÈÖ∑Èõ™‰∫ëËÑöÊú¨"
    else
        echo "1. ÂÆâË£Ö XanMod ÂÜÖÊ†∏ + BBR v3 ‚≠ê Êé®Ëçê"
        echo ""
        echo -e "${gl_kjlan}[BBR/ÁΩëÁªú‰ºòÂåñ]${gl_bai}"
        echo "2. BBR Áõ¥Ëøû/ËêΩÂú∞‰ºòÂåñÔºàÊô∫ËÉΩÂ∏¶ÂÆΩÊ£ÄÊµãÔºâ‚≠ê Êé®Ëçê"
        echo "3. NSËÆ∫ÂùõCAKEË∞É‰ºò"
        echo "4. ÁßëÊäÄlionÈ´òÊÄßËÉΩÊ®°Âºè"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Á≥ªÁªüÈÖçÁΩÆ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_kjlan}[ÁΩëÁªúËÆæÁΩÆ]${gl_bai}"
        echo "5. ËÆæÁΩÆIPv4/IPv6‰ºòÂÖàÁ∫ß"
        echo "6. IPv6ÁÆ°ÁêÜÔºà‰∏¥Êó∂/Ê∞∏‰πÖÁ¶ÅÁî®/ÂèñÊ∂àÔºâ"
        echo "7. ËÆæÁΩÆ‰∏¥Êó∂SOCKS5‰ª£ÁêÜ"
        echo ""
        echo -e "${gl_kjlan}[Á≥ªÁªüÁÆ°ÁêÜ]${gl_bai}"
        echo "8. ËôöÊãüÂÜÖÂ≠òÁÆ°ÁêÜ"
        echo "9. Êü•ÁúãÁ≥ªÁªüËØ¶ÁªÜÁä∂ÊÄÅ"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ËΩ¨Âèë/‰ª£ÁêÜÈÖçÁΩÆ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_kjlan}[RealmËΩ¨ÂèëÁÆ°ÁêÜ]${gl_bai}"
        echo "10. RealmËΩ¨ÂèëËøûÊé•ÂàÜÊûê"
        echo "11. RealmÂº∫Âà∂‰ΩøÁî®IPv4 ‚≠ê Êé®Ëçê"
        echo "12. IPv4/IPv6ËøûÊé•Ê£ÄÊµã"
        echo ""
        echo -e "${gl_kjlan}[XrayÈÖçÁΩÆ]${gl_bai}"
        echo "13. Êü•ÁúãXrayÈÖçÁΩÆ"
        echo "14. ËÆæÁΩÆXray IPv6Âá∫Á´ô"
        echo "15. ÊÅ¢Â§çXrayÈªòËÆ§ÈÖçÁΩÆ"
        echo ""
        echo -e "${gl_kjlan}[‰ª£ÁêÜÈÉ®ÁΩ≤]${gl_bai}"
        echo "16. ‰∏ÄÈîÆÈÉ®ÁΩ≤SOCKS5‰ª£ÁêÜ"
        echo "17. Sub-StoreÂ§öÂÆû‰æãÁÆ°ÁêÜ"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ ÊµãËØïÊ£ÄÊµã ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_kjlan}[IPË¥®ÈáèÊ£ÄÊµã]${gl_bai}"
        echo "18. IPË¥®ÈáèÊ£ÄÊµãÔºàIPv4+IPv6Ôºâ"
        echo "19. IPË¥®ÈáèÊ£ÄÊµãÔºà‰ªÖIPv4Ôºâ‚≠ê Êé®Ëçê"
        echo ""
        echo -e "${gl_kjlan}[ÁΩëÁªúÊµãËØï]${gl_bai}"
        echo "20. ÊúçÂä°Âô®Â∏¶ÂÆΩÊµãËØï"
        echo "21. iperf3ÂçïÁ∫øÁ®ãÊµãËØï"
        echo "22. ÂõΩÈôÖ‰∫íËÅîÈÄüÂ∫¶ÊµãËØï ‚≠ê Êé®Ëçê"
        echo "23. ÁΩëÁªúÂª∂ËøüË¥®ÈáèÊ£ÄÊµã ‚≠ê Êé®Ëçê"
        echo "24. ‰∏âÁΩëÂõûÁ®ãË∑ØÁî±ÊµãËØï ‚≠ê Êé®Ëçê"
        echo ""
        echo -e "${gl_kjlan}[ÊµÅÂ™í‰Ωì/AIÊ£ÄÊµã]${gl_bai}"
        echo "25. IPÂ™í‰Ωì/AIËß£ÈîÅÊ£ÄÊµã ‚≠ê Êé®Ëçê"
        echo "26. NS‰∏ÄÈîÆÊ£ÄÊµãËÑöÊú¨ ‚≠ê Êé®Ëçê"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ Á¨¨‰∏âÊñπÂ∑•ÂÖ∑ ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_kjlan}[ËÑöÊú¨ÂêàÈõÜ]${gl_bai}"
        echo "27. PF_realmËΩ¨ÂèëËÑöÊú¨ ‚≠ê Êé®Ëçê"
        echo "28. Âæ°ÂùÇÁæéÁê¥‰∏ÄÈîÆÂèåÂçèËÆÆ ‚≠ê Êé®Ëçê"
        echo "29. F‰Ω¨‰∏ÄÈîÆsing boxËÑöÊú¨"
        echo "30. ÁßëÊäÄlionËÑöÊú¨"
        echo "31. ÈÖ∑Èõ™‰∫ëËÑöÊú¨"
    fi
    
    echo ""
    echo "0. ÈÄÄÂá∫ËÑöÊú¨"
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    read -e -p "ËØ∑ËæìÂÖ•ÈÄâÊã©: " choice
    
    case $choice in
        1)
            if [ $is_installed -eq 0 ]; then
                # Êõ¥Êñ∞ÂÜÖÊ†∏
                update_xanmod_kernel
                if [ $? -eq 0 ]; then
                    server_reboot
                fi
            else
                install_xanmod_kernel
                if [ $? -eq 0 ]; then
                    server_reboot
                fi
            fi
            ;;
        2)
            if [ $is_installed -eq 0 ]; then
                uninstall_xanmod
            else
                bbr_configure_direct
                break_end
            fi
            ;;
        3)
            if [ $is_installed -eq 0 ]; then
                bbr_configure_direct
                break_end
            else
                startbbrcake
            fi
            ;;
        4)
            if [ $is_installed -eq 0 ]; then
                startbbrcake
            else
                Kernel_optimize
            fi
            ;;
        5)
            if [ $is_installed -eq 0 ]; then
                Kernel_optimize
            else
                manage_ip_priority
            fi
            ;;
        6)
            if [ $is_installed -eq 0 ]; then
                manage_ip_priority
            else
                manage_swap
            fi
            ;;
        7)
            if [ $is_installed -eq 0 ]; then
                manage_swap
            else
                manage_ipv6
            fi
            ;;
        8)
            if [ $is_installed -eq 0 ]; then
                manage_ipv6
            else
                set_temp_socks5_proxy
            fi
            ;;
        9)
            if [ $is_installed -eq 0 ]; then
                manage_swap
            else
                manage_swap
            fi
            ;;
        10)
            if [ $is_installed -eq 0 ]; then
                show_detailed_status
            else
                show_detailed_status
            fi
            ;;
        11)
            if [ $is_installed -eq 0 ]; then
                analyze_realm_connections
            else
                analyze_realm_connections
            fi
            ;;
        12)
            if [ $is_installed -eq 0 ]; then
                realm_ipv4_management
            else
                check_ipv4v6_connections
            fi
            ;;
        13)
            if [ $is_installed -eq 0 ]; then
                check_ipv4v6_connections
            else
                show_xray_config
            fi
            ;;
        14)
            if [ $is_installed -eq 0 ]; then
                show_xray_config
            else
                set_xray_ipv6_outbound
            fi
            ;;
        15)
            if [ $is_installed -eq 0 ]; then
                set_xray_ipv6_outbound
            else
                restore_xray_default
            fi
            ;;
        16)
            if [ $is_installed -eq 0 ]; then
                restore_xray_default
            else
                deploy_socks5
            fi
            ;;
        17)
            if [ $is_installed -eq 0 ]; then
                deploy_socks5
            else
                manage_substore
            fi
            ;;
        18)
            if [ $is_installed -eq 0 ]; then
                manage_substore
            else
                run_ip_quality_check
            fi
            ;;
        19)
            if [ $is_installed -eq 0 ]; then
                run_ip_quality_check
            else
                run_ip_quality_check_ipv4
            fi
            ;;
        20)
            if [ $is_installed -eq 0 ]; then
                run_ip_quality_check_ipv4
            else
                run_speedtest
            fi
            ;;
        21)
            if [ $is_installed -eq 0 ]; then
                run_speedtest
            else
                iperf3_single_thread_test
            fi
            ;;
        22)
            if [ $is_installed -eq 0 ]; then
                iperf3_single_thread_test
            else
                run_international_speed_test
            fi
            ;;
        23)
            if [ $is_installed -eq 0 ]; then
                run_international_speed_test
            else
                run_network_latency_check
            fi
            ;;
        24)
            if [ $is_installed -eq 0 ]; then
                run_network_latency_check
            else
                run_backtrace
            fi
            ;;
        25)
            if [ $is_installed -eq 0 ]; then
                run_backtrace
            else
                run_unlock_check
            fi
            ;;
        26)
            if [ $is_installed -eq 0 ]; then
                run_unlock_check
            else
                run_ns_detect
            fi
            ;;
        27)
            if [ $is_installed -eq 0 ]; then
                run_ns_detect
            else
                run_pf_realm
            fi
            ;;
        28)
            if [ $is_installed -eq 0 ]; then
                run_pf_realm
            else
                run_misaka_xray
            fi
            ;;
        29)
            if [ $is_installed -eq 0 ]; then
                run_misaka_xray
            else
                run_fscarmen_singbox
            fi
            ;;
        30)
            if [ $is_installed -eq 0 ]; then
                run_fscarmen_singbox
            else
                run_kejilion_script
            fi
            ;;
        31)
            if [ $is_installed -eq 0 ]; then
                run_kejilion_script
            else
                run_kxy_script
            fi
            ;;
        32)
            if [ $is_installed -eq 0 ]; then
                run_kxy_script
            else
                echo "Êó†ÊïàÈÄâÊã©"
                sleep 2
            fi
            ;;
        0)
            echo "ÈÄÄÂá∫ËÑöÊú¨"
            exit 0
            ;;
        *)
            echo "Êó†ÊïàÈÄâÊã©"
            sleep 2
            ;;
    esac
}

update_xanmod_kernel() {
    clear
    echo -e "${gl_kjlan}=== Êõ¥Êñ∞ XanMod ÂÜÖÊ†∏ ===${gl_bai}"
    echo "------------------------------------------------"
    
    # Ëé∑ÂèñÂΩìÂâçÂÜÖÊ†∏ÁâàÊú¨
    local current_kernel=$(uname -r)
    echo -e "ÂΩìÂâçÂÜÖÊ†∏ÁâàÊú¨: ${gl_huang}${current_kernel}${gl_bai}"
    echo ""
    
    # Ê£ÄÊµã CPU Êû∂ÊûÑ
    local cpu_arch=$(uname -m)
    
    # ARM Êû∂ÊûÑÊèêÁ§∫
    if [ "$cpu_arch" = "aarch64" ]; then
        echo -e "${gl_huang}ARM64 Êû∂ÊûÑÊöÇ‰∏çÊîØÊåÅËá™Âä®Êõ¥Êñ∞${gl_bai}"
        echo "Âª∫ËÆÆÂç∏ËΩΩÂêéÈáçÊñ∞ÂÆâË£Ö‰ª•Ëé∑ÂèñÊúÄÊñ∞ÁâàÊú¨"
        break_end
        return 1
    fi
    
    # x86_64 Êû∂ÊûÑÊõ¥Êñ∞ÊµÅÁ®ã
    echo "Ê≠£Âú®Ê£ÄÊü•ÂèØÁî®Êõ¥Êñ∞..."
    
    local xanmod_repo_file="/etc/apt/sources.list.d/xanmod-release.list"

    # Ê∑ªÂä† XanMod ‰ªìÂ∫ìÔºàÂ¶ÇÊûú‰∏çÂ≠òÂú®Ôºâ
    if [ ! -f "$xanmod_repo_file" ]; then
        echo "Ê≠£Âú®Ê∑ªÂä† XanMod ‰ªìÂ∫ì..."

        local update_key_tmp
        update_key_tmp=$(mktemp)
        local update_key_imported=0

        if download_repo_resource "xanmod_archive_key" "$update_key_tmp" "XanMod ‰ªìÂ∫ìÂØÜÈí•"; then
            if gpg --dearmor -o /usr/share/keyrings/xanmod-archive-keyring.gpg --yes "$update_key_tmp" 2>/dev/null; then
                update_key_imported=1
            else
                echo -e "${gl_huang}ÂØÜÈí•ÂØºÂÖ•Â§±Ë¥•ÔºåÂ∞ùËØïÂÆòÊñπÊ∫ê...${gl_bai}"
            fi
        else
            echo -e "${gl_huang}Êú™ËÉΩ‰ªéËá™Êúâ‰ªìÂ∫ìËé∑Âèñ XanMod ÂØÜÈí•ÔºåÂ∞ùËØïÂÆòÊñπÊ∫ê...${gl_bai}"
        fi

        if [ $update_key_imported -ne 1 ]; then
            if download_with_retry "https://dl.xanmod.org/archive.key" "$update_key_tmp"; then
                if gpg --dearmor -o /usr/share/keyrings/xanmod-archive-keyring.gpg --yes "$update_key_tmp" 2>/dev/null; then
                    update_key_imported=1
                else
                    echo -e "${gl_hong}ÂØÜÈí•ÂØºÂÖ•Â§±Ë¥•${gl_bai}"
                fi
            else
                echo -e "${gl_hong}ÂØÜÈí•‰∏ãËΩΩÂ§±Ë¥•${gl_bai}"
            fi
        fi

        rm -f "$update_key_tmp"

        if [ $update_key_imported -ne 1 ]; then
            echo -e "${gl_hong}Êó†Ê≥ïËé∑Âèñ XanMod ‰ªìÂ∫ìÂØÜÈí•ÔºåÁªàÊ≠¢Êõ¥Êñ∞ÊµÅÁ®ã${gl_bai}"
            break_end
            return 1
        fi
        
        # Ê∑ªÂä†‰ªìÂ∫ì
        echo 'deb [signed-by=/usr/share/keyrings/xanmod-archive-keyring.gpg] http://deb.xanmod.org releases main' | \
            tee "$xanmod_repo_file" > /dev/null
    fi
    
    # Êõ¥Êñ∞ËΩØ‰ª∂ÂåÖÂàóË°®
    echo "Ê≠£Âú®Êõ¥Êñ∞ËΩØ‰ª∂ÂåÖÂàóË°®..."
    apt update -y > /dev/null 2>&1
    
    # Ê£ÄÊü•Â∑≤ÂÆâË£ÖÁöÑ XanMod ÂÜÖÊ†∏ÂåÖ
    local installed_packages=$(dpkg -l | grep 'linux-.*xanmod' | awk '{print $2}')
    
    if [ -z "$installed_packages" ]; then
        echo -e "${gl_hong}ÈîôËØØ: Êú™Ê£ÄÊµãÂà∞Â∑≤ÂÆâË£ÖÁöÑ XanMod ÂÜÖÊ†∏${gl_bai}"
        break_end
        return 1
    fi
    
    echo -e "Â∑≤ÂÆâË£ÖÁöÑÂÜÖÊ†∏ÂåÖ:"
    echo "$installed_packages" | while read pkg; do
        echo "  - $pkg"
    done
    echo ""
    
    # Ê£ÄÊü•ÊòØÂê¶ÊúâÂèØÁî®Êõ¥Êñ∞
    local upgradable=$(apt list --upgradable 2>/dev/null | grep xanmod)
    
    if [ -z "$upgradable" ]; then
        echo -e "${gl_lv}‚úÖ ÂΩìÂâçÂÜÖÊ†∏Â∑≤ÊòØÊúÄÊñ∞ÁâàÊú¨ÔºÅ${gl_bai}"
        break_end
        return 0
    fi
    
    echo -e "${gl_huang}ÂèëÁé∞ÂèØÁî®Êõ¥Êñ∞:${gl_bai}"
    echo "$upgradable"
    echo ""
    
    read -e -p "Á°ÆÂÆöÊõ¥Êñ∞ XanMod ÂÜÖÊ†∏ÂêóÔºü(Y/N): " confirm
    
    case "$confirm" in
        [Yy])
            echo ""
            echo "Ê≠£Âú®Êõ¥Êñ∞ÂÜÖÊ†∏..."
            apt install --only-upgrade -y $(echo "$installed_packages" | tr '\n' ' ')
            
            if [ $? -eq 0 ]; then
                echo ""
                echo -e "${gl_lv}‚úÖ XanMod ÂÜÖÊ†∏Êõ¥Êñ∞ÊàêÂäüÔºÅ${gl_bai}"
                echo -e "${gl_huang}‚ö†Ô∏è  ËØ∑ÈáçÂêØÁ≥ªÁªü‰ª•Âä†ËΩΩÊñ∞ÂÜÖÊ†∏${gl_bai}"
                echo -e "${gl_kjlan}ÂêéÁª≠Êõ¥Êñ∞: ÂèØÊâßË°å ${gl_bai}sudo apt update && sudo apt upgrade${gl_kjlan} ‰ª•Ê£ÄÊü•Êñ∞ÁâàÊú¨${gl_bai}"

                read -e -p "ÊòØÂê¶‰øùÁïô XanMod ËΩØ‰ª∂Ê∫ê‰ª•‰æøÁªßÁª≠Êé•Êî∂Êõ¥Êñ∞Ôºü(Y/n): " keep_repo
                case "${keep_repo:-Y}" in
                    [Nn])
                        echo -e "${gl_huang}ÁßªÈô§ËΩØ‰ª∂Ê∫êÂêéÂ∞ÜÊó†Ê≥ïÈÄöËøá apt upgrade Ëá™Âä®Ëé∑ÂèñÂÜÖÊ†∏Êõ¥Êñ∞ÔºåÂêéÁª≠ÈúÄÊâãÂä®ÈáçÊñ∞Ê∑ªÂä†„ÄÇ${gl_bai}"
                        read -e -p "Á°ÆËÆ§ÁßªÈô§ XanMod ËΩØ‰ª∂Ê∫êÂêóÔºü(Y/N): " remove_repo
                        case "$remove_repo" in
                            [Yy])
                                rm -f "$xanmod_repo_file"
                                echo -e "${gl_huang}Â∑≤ÊåâË¶ÅÊ±ÇÁßªÈô§ XanMod ËΩØ‰ª∂Ê∫ê„ÄÇ${gl_bai}"
                                ;;
                            *)
                                echo -e "${gl_lv}Â∑≤‰øùÁïô XanMod ËΩØ‰ª∂Ê∫ê„ÄÇ${gl_bai}"
                                ;;
                        esac
                        ;;
                    *)
                        echo -e "${gl_lv}Â∑≤‰øùÁïô XanMod ËΩØ‰ª∂Ê∫êÔºåÂèØÁªßÁª≠ÈÄöËøá apt upgrade Ëé∑ÂèñÊúÄÊñ∞ÂÜÖÊ†∏„ÄÇ${gl_bai}"
                        ;;
                esac
                return 0
            else
                echo ""
                echo -e "${gl_hong}‚ùå ÂÜÖÊ†∏Êõ¥Êñ∞Â§±Ë¥•${gl_bai}"
                break_end
                return 1
            fi
            ;;
        *)
            echo "Â∑≤ÂèñÊ∂àÊõ¥Êñ∞"
            break_end
            return 1
            ;;
    esac
}

uninstall_xanmod() {
    echo -e "${gl_huang}Ë≠¶Âëä: Âç≥Â∞ÜÂç∏ËΩΩ XanMod ÂÜÖÊ†∏${gl_bai}"
    read -e -p "Á°ÆÂÆöÁªßÁª≠ÂêóÔºü(Y/N): " confirm
    
    case "$confirm" in
        [Yy])
            apt purge -y 'linux-*xanmod1*'
            update-grub
            rm -f "$SYSCTL_CONF"
            echo -e "${gl_lv}XanMod ÂÜÖÊ†∏Â∑≤Âç∏ËΩΩ${gl_bai}"
            server_reboot
            ;;
        *)
            echo "Â∑≤ÂèñÊ∂à"
            ;;
    esac
}

run_unlock_check() {
    clear
    echo -e "${gl_kjlan}=== IPÂ™í‰Ωì/AIËß£ÈîÅÊ£ÄÊµã ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°åÊµÅÂ™í‰ΩìËß£ÈîÅÊ£ÄÊµãËÑöÊú¨..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°åËß£ÈîÅÊ£ÄÊµãËÑöÊú¨
    bash <(curl -sL Media.Check.Place)

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_pf_realm() {
    clear
    echo -e "${gl_kjlan}=== PF_realmËΩ¨ÂèëËÑöÊú¨ ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°å PF_realm ËΩ¨ÂèëËÑöÊú¨ÂÆâË£ÖÁ®ãÂ∫è..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°å PF_realm ËΩ¨ÂèëËÑöÊú¨
    local pf_realm_tmp
    pf_realm_tmp=$(mktemp)
    if download_repo_resource "pf_realm_script" "$pf_realm_tmp" "PF_realm ËΩ¨ÂèëËÑöÊú¨"; then
        chmod +x "$pf_realm_tmp"
        if bash "$pf_realm_tmp" install; then
            echo ""
            echo -e "${gl_lv}‚úÖ PF_realm ËÑöÊú¨ÊâßË°åÂÆåÊàê${gl_bai}"
        else
            echo ""
            echo -e "${gl_hong}‚ùå PF_realm ËÑöÊú¨ÊâßË°åÂ§±Ë¥•${gl_bai}"
            echo "ÂèØËÉΩÂéüÂõ†Ôºö"
            echo "1. ËÑöÊú¨ÊâßË°åËøáÁ®ã‰∏≠Âá∫Èîô"
            echo "2. ÊùÉÈôê‰∏çË∂≥"
        fi
    else
        echo ""
        echo -e "${gl_hong}‚ùå Êó†Ê≥ïËé∑Âèñ PF_realm ËΩ¨ÂèëËÑöÊú¨${gl_bai}"
    fi
    rm -f "$pf_realm_tmp"

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_kxy_script() {
    clear
    echo -e "${gl_kjlan}=== ÈÖ∑Èõ™‰∫ëËÑöÊú¨ ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°åÈÖ∑Èõ™‰∫ëËÑöÊú¨..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°åÈÖ∑Èõ™‰∫ëËÑöÊú¨
    bash <(curl -sL https://cdn.kxy.ovh/kxy.sh)

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_misaka_xray() {
    clear
    echo -e "${gl_kjlan}=== Âæ°ÂùÇÁæéÁê¥‰∏ÄÈîÆÂèåÂçèËÆÆ ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°åÂæ°ÂùÇÁæéÁê¥‰∏ÄÈîÆÂèåÂçèËÆÆÂÆâË£ÖËÑöÊú¨..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°åÂæ°ÂùÇÁæéÁê¥‰∏ÄÈîÆÂèåÂçèËÆÆËÑöÊú¨
    local xray_dual_tmp
    xray_dual_tmp=$(mktemp)
    if download_repo_resource "xray_dual_install" "$xray_dual_tmp" "Âæ°ÂùÇÁæéÁê¥‰∏ÄÈîÆÂèåÂçèËÆÆËÑöÊú¨"; then
        chmod +x "$xray_dual_tmp"
        if bash "$xray_dual_tmp"; then
            echo ""
            echo -e "${gl_lv}‚úÖ Âæ°ÂùÇÁæéÁê¥‰∏ÄÈîÆÂèåÂçèËÆÆËÑöÊú¨ÊâßË°åÂÆåÊàê${gl_bai}"
        else
            echo ""
            echo -e "${gl_hong}‚ùå Âæ°ÂùÇÁæéÁê¥‰∏ÄÈîÆÂèåÂçèËÆÆËÑöÊú¨ÊâßË°åÂ§±Ë¥•${gl_bai}"
            echo "ÂèØËÉΩÂéüÂõ†Ôºö"
            echo "1. ËÑöÊú¨ÊâßË°åËøáÁ®ã‰∏≠Âá∫Èîô"
            echo "2. ÊùÉÈôê‰∏çË∂≥"
        fi
    else
        echo ""
        echo -e "${gl_hong}‚ùå Êó†Ê≥ïËé∑ÂèñÂæ°ÂùÇÁæéÁê¥‰∏ÄÈîÆÂèåÂçèËÆÆËÑöÊú¨${gl_bai}"
    fi
    rm -f "$xray_dual_tmp"

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_kejilion_script() {
    clear
    echo -e "${gl_kjlan}=== ÁßëÊäÄlionËÑöÊú¨ ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°åÁßëÊäÄlionËÑöÊú¨..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°åÁßëÊäÄlionËÑöÊú¨
    bash <(curl -sL kejilion.sh)

    echo ""
    echo "------------------------------------------------"
    break_end
}

run_fscarmen_singbox() {
    clear
    echo -e "${gl_kjlan}=== F‰Ω¨‰∏ÄÈîÆsing boxËÑöÊú¨ ===${gl_bai}"
    echo ""
    echo "Ê≠£Âú®ËøêË°å F‰Ω¨‰∏ÄÈîÆsing boxËÑöÊú¨..."
    echo "------------------------------------------------"
    echo ""

    # ÊâßË°å F‰Ω¨‰∏ÄÈîÆsing boxËÑöÊú¨
    local sing_box_tmp
    sing_box_tmp=$(mktemp)
    if download_repo_resource "sing_box_install" "$sing_box_tmp" "F‰Ω¨‰∏ÄÈîÆ sing-box ËÑöÊú¨"; then
        chmod +x "$sing_box_tmp"
        if ! bash "$sing_box_tmp"; then
            echo -e "${gl_hong}F‰Ω¨‰∏ÄÈîÆ sing-box ËÑöÊú¨ÊâßË°åÂ§±Ë¥•${gl_bai}"
        fi
    else
        echo -e "${gl_hong}Êó†Ê≥ïËé∑Âèñ F‰Ω¨‰∏ÄÈîÆ sing-box ËÑöÊú¨${gl_bai}"
    fi
    rm -f "$sing_box_tmp"

    echo ""
    echo "------------------------------------------------"
    break_end
}

#=============================================================================
# CAKE Âä†ÈÄüÂäüËÉΩÔºàÊù•Ëá™ cake.shÔºâ
#=============================================================================

#Âç∏ËΩΩbbr+ÈîêÈÄü
remove_bbr_lotserver() {
  sed -i '/net.ipv4.tcp_ecn/d' /etc/sysctl.d/99-sysctl.conf
  sed -i '/net.core.default_qdisc/d' /etc/sysctl.d/99-sysctl.conf
  sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.d/99-sysctl.conf
  sed -i '/net.ipv4.tcp_ecn/d' /etc/sysctl.conf
  sed -i '/net.core.default_qdisc/d' /etc/sysctl.conf
  sed -i '/net.ipv4.tcp_congestion_control/d' /etc/sysctl.conf
  sysctl --system

  rm -rf bbrmod

  if [[ -e /appex/bin/lotServer.sh ]]; then
    local lotserver_tmp
    lotserver_tmp=$(mktemp)
    if download_repo_resource "lotserver_install" "$lotserver_tmp" "LotServer ÁÆ°ÁêÜËÑöÊú¨"; then
      chmod +x "$lotserver_tmp"
      if ! printf '\n' | bash "$lotserver_tmp" uninstall; then
        echo -e "${gl_huang}LotServer Âç∏ËΩΩËÑöÊú¨ÊâßË°åÂ§±Ë¥•${gl_bai}"
      fi
    else
      echo -e "${gl_huang}Êú™ËÉΩËé∑Âèñ LotServer ÁÆ°ÁêÜËÑöÊú¨ÔºåË∑≥ËøáËá™Âä®Âç∏ËΩΩ${gl_bai}"
    fi
    rm -f "$lotserver_tmp"
  fi
  clear
}

#ÂêØÁî®BBR+cake
startbbrcake() {
  remove_bbr_lotserver
  echo "net.core.default_qdisc=cake" >>/etc/sysctl.d/99-sysctl.conf
  echo "net.ipv4.tcp_congestion_control=bbr" >>/etc/sysctl.d/99-sysctl.conf
  sysctl --system
  echo -e "${gl_lv}[‰ø°ÊÅØ]${gl_bai}BBR+cake‰øÆÊîπÊàêÂäüÔºåÈáçÂêØÁîüÊïàÔºÅ"
  break_end
}

#=============================================================================
# SOCKS5 ‰∏ÄÈîÆÈÉ®ÁΩ≤ÂäüËÉΩ
#=============================================================================

deploy_socks5() {
    clear
    echo -e "${gl_kjlan}=== Sing-box SOCKS5 ‰∏ÄÈîÆÈÉ®ÁΩ≤ ===${gl_bai}"
    echo ""
    echo "Ê≠§ÂäüËÉΩÂ∞ÜÈÉ®ÁΩ≤‰∏Ä‰∏™Áã¨Á´ãÁöÑSOCKS5‰ª£ÁêÜÊúçÂä°"
    echo "------------------------------------------------"
    echo ""
    
    # Ê≠•È™§1ÔºöÊ£ÄÊµã sing-box ‰∫åËøõÂà∂Á®ãÂ∫è
    echo -e "${gl_zi}[Ê≠•È™§ 1/7] Ê£ÄÊµã sing-box ÂÆâË£Ö...${gl_bai}"
    echo ""
    
    local SINGBOX_CMD=""
    
    # ‰ºòÂÖàÊü•ÊâæÂ∏∏ËßÅÁöÑ‰∫åËøõÂà∂Á®ãÂ∫è‰ΩçÁΩÆ
    for path in /etc/sing-box/sing-box /usr/local/bin/sing-box /opt/sing-box/sing-box; do
        if [ -x "$path" ] && [ ! -L "$path" ]; then
            # È™åËØÅÊòØ ELF ‰∫åËøõÂà∂Êñá‰ª∂Ôºå‰∏çÊòØËÑöÊú¨
            if file "$path" 2>/dev/null | grep -q "ELF"; then
                SINGBOX_CMD="$path"
                echo -e "${gl_lv}‚úÖ ÊâæÂà∞ sing-box Á®ãÂ∫è: $SINGBOX_CMD${gl_bai}"
                break
            fi
        fi
    done
    
    # Â¶ÇÊûúÊ≤°ÊâæÂà∞ÔºåÊ£ÄÊü• PATH ‰∏≠ÁöÑÂëΩ‰ª§
    if [ -z "$SINGBOX_CMD" ]; then
        for cmd in sing-box sb; do
            if command -v "$cmd" &>/dev/null; then
                local cmd_path=$(which "$cmd")
                if file "$cmd_path" 2>/dev/null | grep -q "ELF"; then
                    SINGBOX_CMD="$cmd_path"
                    echo -e "${gl_lv}‚úÖ ÊâæÂà∞ sing-box Á®ãÂ∫è: $SINGBOX_CMD${gl_bai}"
                    break
                else
                    echo -e "${gl_huang}‚ö†Ô∏è  $cmd_path ÊòØËÑöÊú¨ÔºåË∑≥Ëøá${gl_bai}"
                fi
            fi
        done
    fi
    
    if [ -z "$SINGBOX_CMD" ]; then
        echo -e "${gl_hong}‚ùå Êú™ÊâæÂà∞ sing-box ‰∫åËøõÂà∂Á®ãÂ∫è${gl_bai}"
        echo ""
        echo "ËØ∑ÂÖàÂÆâË£Ö sing-boxÔºåÊé®Ëçê‰ΩøÁî®Ôºö"
        echo "  - F‰Ω¨‰∏ÄÈîÆsing boxËÑöÊú¨ÔºàËèúÂçïÈÄâÈ°π 22/23Ôºâ"
        echo ""
        break_end
        return 1
    fi
    
    # ÊòæÁ§∫ÁâàÊú¨‰ø°ÊÅØ
    echo ""
    $SINGBOX_CMD version 2>/dev/null | head -n 1
    echo ""
    
    # Ê≠•È™§2ÔºöÈÖçÁΩÆÂèÇÊï∞ËæìÂÖ•
    echo -e "${gl_zi}[Ê≠•È™§ 2/7] ÈÖçÁΩÆ SOCKS5 ÂèÇÊï∞...${gl_bai}"
    echo ""
    
    # ËæìÂÖ•Á´ØÂè£ÔºàÊîØÊåÅÂõûËΩ¶‰ΩøÁî®ÈöèÊú∫Á´ØÂè£Ôºâ
    local socks5_port=""
    while true; do
        read -e -p "$(echo -e "${gl_huang}ËØ∑ËæìÂÖ• SOCKS5 Á´ØÂè£ [ÂõûËΩ¶ÈöèÊú∫ÁîüÊàê]: ${gl_bai}")" socks5_port
        
        if [ -z "$socks5_port" ]; then
            # ÁîüÊàêÈöèÊú∫Á´ØÂè£Ôºà10000-65535Ôºâ
            socks5_port=$((RANDOM % 55536 + 10000))
            echo -e "${gl_lv}‚úÖ Â∑≤ÁîüÊàêÈöèÊú∫Á´ØÂè£: ${socks5_port}${gl_bai}"
            break
        elif [[ "$socks5_port" =~ ^[0-9]+$ ]] && [ "$socks5_port" -ge 1024 ] && [ "$socks5_port" -le 65535 ]; then
            # Ê£ÄÊü•Á´ØÂè£ÊòØÂê¶Ë¢´Âç†Áî®
            if ss -tulpn | grep -q ":${socks5_port} "; then
                echo -e "${gl_hong}‚ùå Á´ØÂè£ ${socks5_port} Â∑≤Ë¢´Âç†Áî®ÔºåËØ∑ÈÄâÊã©ÂÖ∂‰ªñÁ´ØÂè£${gl_bai}"
            else
                echo -e "${gl_lv}‚úÖ ‰ΩøÁî®Á´ØÂè£: ${socks5_port}${gl_bai}"
                break
            fi
        else
            echo -e "${gl_hong}‚ùå Êó†ÊïàÁ´ØÂè£ÔºåËØ∑ËæìÂÖ• 1024-65535 ‰πãÈó¥ÁöÑÊï∞Â≠ó${gl_bai}"
        fi
    done
    
    echo ""
    
    # ËæìÂÖ•Áî®Êà∑Âêç
    local socks5_user=""
    while true; do
        read -e -p "$(echo -e "${gl_huang}ËØ∑ËæìÂÖ•Áî®Êà∑Âêç: ${gl_bai}")" socks5_user
        
        if [ -z "$socks5_user" ]; then
            echo -e "${gl_hong}‚ùå Áî®Êà∑Âêç‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
        elif [[ "$socks5_user" =~ ^[a-zA-Z0-9_-]+$ ]]; then
            echo -e "${gl_lv}‚úÖ Áî®Êà∑Âêç: ${socks5_user}${gl_bai}"
            break
        else
            echo -e "${gl_hong}‚ùå Áî®Êà∑ÂêçÂè™ËÉΩÂåÖÂê´Â≠óÊØç„ÄÅÊï∞Â≠ó„ÄÅ‰∏ãÂàíÁ∫øÂíåËøûÂ≠óÁ¨¶${gl_bai}"
        fi
    done
    
    echo ""
    
    # ËæìÂÖ•ÂØÜÁ†Å
    local socks5_pass=""
    while true; do
        read -e -p "$(echo -e "${gl_huang}ËØ∑ËæìÂÖ•ÂØÜÁ†Å: ${gl_bai}")" socks5_pass
        
        if [ -z "$socks5_pass" ]; then
            echo -e "${gl_hong}‚ùå ÂØÜÁ†Å‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
        elif [ ${#socks5_pass} -lt 6 ]; then
            echo -e "${gl_hong}‚ùå ÂØÜÁ†ÅÈïøÂ∫¶Ëá≥Â∞ë6‰Ωç${gl_bai}"
        else
            echo -e "${gl_lv}‚úÖ ÂØÜÁ†ÅÂ∑≤ËÆæÁΩÆ${gl_bai}"
            break
        fi
    done
    
    echo ""
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "${gl_lv}ÈÖçÁΩÆ‰ø°ÊÅØÁ°ÆËÆ§Ôºö${gl_bai}"
    echo -e "  Á´ØÂè£: ${gl_huang}${socks5_port}${gl_bai}"
    echo -e "  Áî®Êà∑Âêç: ${gl_huang}${socks5_user}${gl_bai}"
    echo -e "  ÂØÜÁ†Å: ${gl_huang}${socks5_pass}${gl_bai}"
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo ""
    
    read -e -p "$(echo -e "${gl_huang}Á°ÆËÆ§ÂºÄÂßãÈÉ®ÁΩ≤Ôºü(Y/N): ${gl_bai}")" confirm
    
    case "$confirm" in
        [Yy])
            ;;
        *)
            echo "Â∑≤ÂèñÊ∂àÈÉ®ÁΩ≤"
            break_end
            return 1
            ;;
    esac
    
    # Ê≠•È™§3ÔºöÂàõÂª∫ÁõÆÂΩï
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 3/7] ÂàõÂª∫ÈÖçÁΩÆÁõÆÂΩï...${gl_bai}"
    mkdir -p /etc/sbox_socks5
    echo -e "${gl_lv}‚úÖ ÁõÆÂΩïÂàõÂª∫ÊàêÂäü${gl_bai}"
    
    # Ê≠•È™§4ÔºöÂàõÂª∫ÈÖçÁΩÆÊñá‰ª∂
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 4/7] ÂàõÂª∫ÈÖçÁΩÆÊñá‰ª∂...${gl_bai}"
    
    cat > /etc/sbox_socks5/config.json << CONFIGEOF
{
  "log": {
    "level": "info",
    "output": "/etc/sbox_socks5/socks5.log"
  },
  "inbounds": [
    {
      "type": "socks",
      "tag": "socks5-in",
      "listen": "0.0.0.0",
      "listen_port": ${socks5_port},
      "users": [
        {
          "username": "${socks5_user}",
          "password": "${socks5_pass}"
        }
      ]
    }
  ],
  "outbounds": [
    {
      "type": "direct",
      "tag": "direct"
    }
  ]
}
CONFIGEOF
    
    chmod 600 /etc/sbox_socks5/config.json
    echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÊñá‰ª∂ÂàõÂª∫ÊàêÂäü${gl_bai}"
    
    # Ê≠•È™§5ÔºöÈ™åËØÅÈÖçÁΩÆ
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 5/7] È™åËØÅÈÖçÁΩÆÊñá‰ª∂ËØ≠Ê≥ï...${gl_bai}"
    
    if $SINGBOX_CMD check -c /etc/sbox_socks5/config.json >/dev/null 2>&1; then
        echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÊñá‰ª∂ËØ≠Ê≥ïÊ≠£Á°Æ${gl_bai}"
    else
        echo -e "${gl_hong}‚ùå ÈÖçÁΩÆÊñá‰ª∂ËØ≠Ê≥ïÈîôËØØ${gl_bai}"
        $SINGBOX_CMD check -c /etc/sbox_socks5/config.json
        break_end
        return 1
    fi
    
    # Ê≠•È™§6ÔºöÂàõÂª∫ÊúçÂä°Êñá‰ª∂
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 6/7] ÂàõÂª∫ systemd ÊúçÂä°...${gl_bai}"
    
    cat > /etc/systemd/system/sbox-socks5.service << SERVICEEOF
[Unit]
Description=Sing-box SOCKS5 Service
After=network.target network-online.target
Wants=network-online.target

[Service]
Type=simple
ExecStart=${SINGBOX_CMD} run -c /etc/sbox_socks5/config.json
ExecReload=/bin/kill -HUP \$MAINPID
Restart=always
RestartSec=5
User=root
Group=root
StandardOutput=journal
StandardError=journal
SyslogIdentifier=sbox-socks5
KillMode=mixed
KillSignal=SIGTERM
TimeoutStopSec=5s
NoNewPrivileges=true
ProtectSystem=strict
ProtectHome=true
ReadWritePaths=/etc/sbox_socks5
PrivateTmp=true

[Install]
WantedBy=multi-user.target
SERVICEEOF
    
    chmod 644 /etc/systemd/system/sbox-socks5.service
    echo -e "${gl_lv}‚úÖ ÊúçÂä°Êñá‰ª∂ÂàõÂª∫ÊàêÂäü${gl_bai}"
    
    # Ê≠•È™§7ÔºöÂêØÂä®ÊúçÂä°
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 7/7] ÂêØÂä®ÊúçÂä°...${gl_bai}"
    
    systemctl daemon-reload
    systemctl enable sbox-socks5 >/dev/null 2>&1
    systemctl start sbox-socks5
    
    # Á≠âÂæÖÊúçÂä°ÂêØÂä®
    sleep 3
    
    # È™åËØÅÈÉ®ÁΩ≤
    echo ""
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    echo -e "${gl_lv}È™åËØÅÈÉ®ÁΩ≤ÁªìÊûúÔºö${gl_bai}"
    echo ""
    
    local deploy_success=true
    
    # Ê£ÄÊü•ÊúçÂä°Áä∂ÊÄÅ
    if systemctl is-active --quiet sbox-socks5; then
        echo -e "  ÊúçÂä°Áä∂ÊÄÅ: ${gl_lv}‚úÖ Running${gl_bai}"
    else
        echo -e "  ÊúçÂä°Áä∂ÊÄÅ: ${gl_hong}‚ùå Failed${gl_bai}"
        deploy_success=false
    fi
    
    # Ê£ÄÊü•Á´ØÂè£ÁõëÂê¨
    if ss -tulpn | grep -q ":${socks5_port} "; then
        echo -e "  Á´ØÂè£ÁõëÂê¨: ${gl_lv}‚úÖ ${socks5_port}${gl_bai}"
    else
        echo -e "  Á´ØÂè£ÁõëÂê¨: ${gl_hong}‚ùå Êú™ÁõëÂê¨${gl_bai}"
        deploy_success=false
    fi
    
    echo ""
    echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
    
    if [ "$deploy_success" = true ]; then
        # Ëé∑ÂèñÊúçÂä°Âô®IP
        local server_ip=$(curl -s --max-time 3 ifconfig.me 2>/dev/null || curl -s --max-time 3 ipinfo.io/ip 2>/dev/null || echo "ËØ∑ÊâãÂä®Ëé∑Âèñ")
        
        echo ""
        echo -e "${gl_lv}üéâ ÈÉ®ÁΩ≤ÊàêÂäüÔºÅ${gl_bai}"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_lv}SOCKS5 ËøûÊé•‰ø°ÊÅØÔºö${gl_bai}"
        echo ""
        echo -e "  ÊúçÂä°Âô®Âú∞ÂùÄ: ${gl_huang}${server_ip}${gl_bai}"
        echo -e "  Á´ØÂè£:       ${gl_huang}${socks5_port}${gl_bai}"
        echo -e "  Áî®Êà∑Âêç:     ${gl_huang}${socks5_user}${gl_bai}"
        echo -e "  ÂØÜÁ†Å:       ${gl_huang}${socks5_pass}${gl_bai}"
        echo -e "  ÂçèËÆÆ:       ${gl_huang}SOCKS5${gl_bai}"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo ""
        echo -e "${gl_zi}ÊµãËØïËøûÊé•ÂëΩ‰ª§Ôºö${gl_bai}"
        echo "curl --socks5-hostname ${socks5_user}:${socks5_pass}@${server_ip}:${socks5_port} http://httpbin.org/ip"
        echo ""
        echo -e "${gl_huang}‚ö†Ô∏è  ÈáçË¶ÅÊèêÈÜíÔºö${gl_bai}"
        echo "  1. Á°Æ‰øù‰∫ëÊúçÂä°ÂïÜÂÆâÂÖ®ÁªÑÂ∑≤ÂºÄÊîæ TCP ${socks5_port} Á´ØÂè£"
        echo "  2. Êü•ÁúãÊó•Âøó: journalctl -u sbox-socks5 -f"
        echo "  3. ÈáçÂêØÊúçÂä°: systemctl restart sbox-socks5"
        echo "  4. ÂÅúÊ≠¢ÊúçÂä°: systemctl stop sbox-socks5"
        echo "  5. Âç∏ËΩΩÊúçÂä°: systemctl stop sbox-socks5 && systemctl disable sbox-socks5 && rm -rf /etc/sbox_socks5 /etc/systemd/system/sbox-socks5.service"
        echo ""
    else
        echo ""
        echo -e "${gl_hong}‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•${gl_bai}"
        echo ""
        echo "Êü•ÁúãËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØÔºö"
        echo "  journalctl -u sbox-socks5 -n 50 --no-pager"
        echo ""
        echo "Â∏∏ËßÅÈóÆÈ¢òÊéíÊü•Ôºö"
        echo "  1. Ê£ÄÊü• sing-box Á®ãÂ∫èÊòØÂê¶Ê≠£Á°Æ: file ${SINGBOX_CMD}"
        echo "  2. Ê£ÄÊü•Á´ØÂè£ÊòØÂê¶Ë¢´Âç†Áî®: ss -tulpn | grep ${socks5_port}"
        echo "  3. Ê£ÄÊü•ÊúçÂä°Êó•Âøó: systemctl status sbox-socks5 --no-pager"
        echo ""
    fi
    
    break_end
}
#=============================================================================
# Sub-Store Â§öÂÆû‰æãÁÆ°ÁêÜÂäüËÉΩ
#=============================================================================

# Ê£ÄÊü•Á´ØÂè£ÊòØÂê¶Ë¢´Âç†Áî®
check_substore_port() {
    local port=$1
    if netstat -tuln 2>/dev/null | grep -q ":$port "; then
        return 1
    elif ss -tuln 2>/dev/null | grep -q ":$port "; then
        return 1
    fi
    return 0
}

# È™åËØÅÁ´ØÂè£Âè∑
validate_substore_port() {
    local port=$1
    if ! [[ "$port" =~ ^[0-9]+$ ]] || [ "$port" -lt 1 ] || [ "$port" -gt 65535 ]; then
        return 1
    fi
    return 0
}

# È™åËØÅËÆøÈóÆË∑ØÂæÑ
validate_substore_path() {
    local path=$1
    # Âè™ÂåÖÂê´Â≠óÊØçÊï∞Â≠óÂíåÂ∞ëÊï∞Á¨¶Âè∑
    if [[ ! "$path" =~ ^[a-zA-Z0-9/_-]+$ ]]; then
        return 1
    fi
    return 0
}

# ÁîüÊàêÈöèÊú∫Ë∑ØÂæÑ
generate_substore_random_path() {
    cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 20 | head -n 1
}

# Ê£ÄÊü• Docker ÊòØÂê¶ÂÆâË£Ö
check_substore_docker() {
    if ! command -v docker &> /dev/null; then
        echo -e "${gl_hong}Docker Êú™ÂÆâË£Ö${gl_bai}"
        echo ""
        read -e -p "$(echo -e "${gl_huang}ÊòØÂê¶Áé∞Âú®ÂÆâË£Ö DockerÔºü(Y/N): ${gl_bai}")" install_docker
        
        case "$install_docker" in
            [Yy])
                echo ""
                echo "ËØ∑ÈÄâÊã©ÂÆâË£ÖÊ∫êÔºö"
                echo "1. ÂõΩÂÜÖÈïúÂÉèÔºàÈòøÈáå‰∫ëÔºâ"
                echo "2. ÂõΩÂ§ñÂÆòÊñπÊ∫ê"
                read -e -p "ËØ∑ÈÄâÊã© [1]: " mirror_choice
                mirror_choice=${mirror_choice:-1}
                
                case "$mirror_choice" in
                    1)
                        echo "Ê≠£Âú®‰ΩøÁî®ÈòøÈáå‰∫ëÈïúÂÉèÂÆâË£Ö Docker..."
                        curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
                        ;;
                    2)
                        echo "Ê≠£Âú®‰ΩøÁî®ÂÆòÊñπÊ∫êÂÆâË£Ö Docker..."
                        curl -fsSL https://get.docker.com | bash
                        ;;
                    *)
                        echo "Êó†ÊïàÈÄâÊã©Ôºå‰ΩøÁî®ÈòøÈáå‰∫ëÈïúÂÉè..."
                        curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
                        ;;
                esac
                
                if [ $? -eq 0 ]; then
                    echo -e "${gl_lv}‚úÖ Docker ÂÆâË£ÖÊàêÂäü${gl_bai}"
                    systemctl enable docker
                    systemctl start docker
                else
                    echo -e "${gl_hong}‚ùå Docker ÂÆâË£ÖÂ§±Ë¥•${gl_bai}"
                    return 1
                fi
                ;;
            *)
                echo "Â∑≤ÂèñÊ∂àÔºåËØ∑ÂÖàÂÆâË£Ö Docker"
                return 1
                ;;
        esac
    fi
    
    if ! command -v docker compose &> /dev/null && ! command -v docker-compose &> /dev/null; then
        echo -e "${gl_huang}Docker Compose Êú™ÂÆâË£ÖÔºåÂ∞ùËØïÂÆâË£Ö...${gl_bai}"
        # Docker Compose v2 ÈÄöÂ∏∏Èöè Docker ‰∏ÄËµ∑ÂÆâË£Ö
        if docker compose version &>/dev/null; then
            echo -e "${gl_lv}‚úÖ Docker Compose Â∑≤ÂèØÁî®${gl_bai}"
        else
            echo -e "${gl_hong}‚ùå Docker Compose ‰∏çÂèØÁî®ÔºåËØ∑ÊâãÂä®ÂÆâË£Ö${gl_bai}"
            return 1
        fi
    fi
    
    return 0
}

# Ëé∑ÂèñÂ∑≤ÈÉ®ÁΩ≤ÁöÑÂÆû‰æãÂàóË°®
get_substore_instances() {
    local instances=()
    if [ -d "/root/sub-store-configs" ]; then
        for config in /root/sub-store-configs/store-*.yaml; do
            if [ -f "$config" ]; then
                local instance_name=$(basename "$config" .yaml)
                instances+=("$instance_name")
            fi
        done
    fi
    echo "${instances[@]}"
}

# Ê£ÄÊü•ÂÆû‰æãÊòØÂê¶Â≠òÂú®
check_substore_instance_exists() {
    local instance_num=$1
    if [ -f "/root/sub-store-configs/store-$instance_num.yaml" ]; then
        return 0
    fi
    return 1
}

# ÂÆâË£ÖÊñ∞ÂÆû‰æã
install_substore_instance() {
    clear
    echo "=================================="
    echo "    Sub-Store ÂÆû‰æãÂÆâË£ÖÂêëÂØº"
    echo "=================================="
    echo ""
    
    # Ê£ÄÊü• Docker
    if ! check_substore_docker; then
        break_end
        return 1
    fi
    
    echo -e "${gl_lv}‚úÖ Docker ÁéØÂ¢ÉÊ£ÄÊü•ÈÄöËøá${gl_bai}"
    echo ""
    
    # Ëé∑ÂèñÂª∫ËÆÆÁöÑÂÆû‰æãÁºñÂè∑
    local instances=($(get_substore_instances))
    local suggested_num=1
    if [ ${#instances[@]} -gt 0 ]; then
        echo -e "${gl_huang}Â∑≤Â≠òÂú® ${#instances[@]} ‰∏™ÂÆû‰æã${gl_bai}"
        suggested_num=$((${#instances[@]} + 1))
    fi
    
    # ËæìÂÖ•ÂÆû‰æãÁºñÂè∑
    local instance_num
    while true; do
        read -e -p "ËØ∑ËæìÂÖ•ÂÆû‰æãÁºñÂè∑ÔºàÂª∫ËÆÆ: $suggested_numÔºâ: " instance_num
        
        if [ -z "$instance_num" ]; then
            echo -e "${gl_hong}ÂÆû‰æãÁºñÂè∑‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
            continue
        fi
        
        if ! [[ "$instance_num" =~ ^[0-9]+$ ]]; then
            echo -e "${gl_hong}ÂÆû‰æãÁºñÂè∑ÂøÖÈ°ªÊòØÊï∞Â≠ó${gl_bai}"
            continue
        fi
        
        if check_substore_instance_exists "$instance_num"; then
            echo -e "${gl_hong}ÂÆû‰æãÁºñÂè∑ $instance_num Â∑≤Â≠òÂú®${gl_bai}"
            continue
        fi
        
        break
    done
    
    echo -e "${gl_lv}‚úÖ ÂÆû‰æãÁºñÂè∑: $instance_num${gl_bai}"
    echo ""
    
    # ËæìÂÖ•ÂêéÁ´Ø API Á´ØÂè£
    local api_port
    local default_api_port=3001
    while true; do
        read -e -p "ËØ∑ËæìÂÖ•ÂêéÁ´Ø API Á´ØÂè£ÔºàÂõûËΩ¶‰ΩøÁî®ÈªòËÆ§ $default_api_portÔºâ: " api_port
        
        if [ -z "$api_port" ]; then
            api_port=$default_api_port
            echo -e "${gl_huang}‰ΩøÁî®ÈªòËÆ§Á´ØÂè£: $api_port${gl_bai}"
        fi
        
        if ! validate_substore_port "$api_port"; then
            echo -e "${gl_hong}Á´ØÂè£Âè∑Êó†Êïà${gl_bai}"
            continue
        fi
        
        if ! check_substore_port "$api_port"; then
            echo -e "${gl_hong}Á´ØÂè£ $api_port Â∑≤Ë¢´Âç†Áî®${gl_bai}"
            continue
        fi
        
        break
    done
    
    echo -e "${gl_lv}‚úÖ ÂêéÁ´Ø API Á´ØÂè£: $api_port${gl_bai}"
    echo ""
    
    # ËæìÂÖ• HTTP-META Á´ØÂè£
    local http_port
    local default_http_port=9876
    while true; do
        read -e -p "ËØ∑ËæìÂÖ• HTTP-META Á´ØÂè£ÔºàÂõûËΩ¶‰ΩøÁî®ÈªòËÆ§ $default_http_portÔºâ: " http_port
        
        if [ -z "$http_port" ]; then
            http_port=$default_http_port
            echo -e "${gl_huang}‰ΩøÁî®ÈªòËÆ§Á´ØÂè£: $http_port${gl_bai}"
        fi
        
        if ! validate_substore_port "$http_port"; then
            echo -e "${gl_hong}Á´ØÂè£Âè∑Êó†Êïà${gl_bai}"
            continue
        fi
        
        if ! check_substore_port "$http_port"; then
            echo -e "${gl_hong}Á´ØÂè£ $http_port Â∑≤Ë¢´Âç†Áî®${gl_bai}"
            continue
        fi
        
        if [ "$http_port" == "$api_port" ]; then
            echo -e "${gl_hong}HTTP-META Á´ØÂè£‰∏çËÉΩ‰∏éÂêéÁ´Ø API Á´ØÂè£Áõ∏Âêå${gl_bai}"
            continue
        fi
        
        break
    done
    
    echo -e "${gl_lv}‚úÖ HTTP-META Á´ØÂè£: $http_port${gl_bai}"
    echo ""
    
    # ËæìÂÖ•ËÆøÈóÆË∑ØÂæÑ
    local access_path
    while true; do
        local random_path=$(generate_substore_random_path)
        echo -e "${gl_zi}ËÆøÈóÆË∑ØÂæÑËØ¥ÊòéÔºö${gl_bai}"
        echo "  - Ë∑ØÂæÑ‰ºöËá™Âä®Ê∑ªÂä†ÂºÄÂ§¥ÁöÑ /"
        echo "  - Âª∫ËÆÆ‰ΩøÁî®ÈöèÊú∫Ë∑ØÂæÑÔºàÊõ¥ÂÆâÂÖ®Ôºâ"
        echo "  - ‰πüÂèØ‰ΩøÁî®Ëá™ÂÆö‰πâË∑ØÂæÑÔºàÊòìËÆ∞Ôºâ"
        echo ""
        echo -e "${gl_huang}ÈöèÊú∫ÁîüÊàêÁöÑË∑ØÂæÑ: ${random_path}${gl_bai}"
        echo ""
        
        read -e -p "ËØ∑ËæìÂÖ•ËÆøÈóÆË∑ØÂæÑÔºàÁõ¥Êé•ËæìÂÖ•Â¶Ç my-subsÔºåÊàñÂõûËΩ¶‰ΩøÁî®ÈöèÊú∫Ôºâ: " access_path
        
        if [ -z "$access_path" ]; then
            access_path="$random_path"
            echo -e "${gl_lv}‚úÖ ‰ΩøÁî®ÈöèÊú∫Ë∑ØÂæÑ: /$access_path${gl_bai}"
        else
            # ÁßªÈô§ÂèØËÉΩÁöÑÂºÄÂ§¥ÊñúÊù†
            access_path="${access_path#/}"
            
            if ! validate_substore_path "$access_path"; then
                echo -e "${gl_hong}Ë∑ØÂæÑÊ†ºÂºèÊó†ÊïàÔºàÂè™ËÉΩÂåÖÂê´Â≠óÊØç„ÄÅÊï∞Â≠ó„ÄÅ-„ÄÅ_„ÄÅ/Ôºâ${gl_bai}"
                continue
            fi
            
            echo -e "${gl_lv}‚úÖ ‰ΩøÁî®Ëá™ÂÆö‰πâË∑ØÂæÑ: /$access_path${gl_bai}"
        fi
        
        break
    done
    
    echo ""
    
    # ËæìÂÖ•Êï∞ÊçÆÂ≠òÂÇ®ÁõÆÂΩï
    local data_dir
    local default_data_dir="/root/data-sub-store-$instance_num"
    
    read -e -p "ËØ∑ËæìÂÖ•Êï∞ÊçÆÂ≠òÂÇ®ÁõÆÂΩïÔºàÂõûËΩ¶‰ΩøÁî®ÈªòËÆ§ $default_data_dirÔºâ: " data_dir
    
    if [ -z "$data_dir" ]; then
        data_dir="$default_data_dir"
        echo -e "${gl_huang}‰ΩøÁî®ÈªòËÆ§ÁõÆÂΩï: $data_dir${gl_bai}"
    fi
    
    if [ -d "$data_dir" ]; then
        echo ""
        echo -e "${gl_huang}ÁõÆÂΩï $data_dir Â∑≤Â≠òÂú®${gl_bai}"
        local use_existing
        read -e -p "ÊòØÂê¶‰ΩøÁî®Áé∞ÊúâÁõÆÂΩïÔºü(y/n): " use_existing
        if [[ ! "$use_existing" =~ ^[Yy]$ ]]; then
            echo "ËØ∑ÈáçÊñ∞ËøêË°åÂπ∂ÈÄâÊã©ÂÖ∂‰ªñÁõÆÂΩï"
            break_end
            return 1
        fi
    fi
    
    # Á°ÆËÆ§‰ø°ÊÅØ
    echo ""
    echo "=================================="
    echo "          ÈÖçÁΩÆÁ°ÆËÆ§"
    echo "=================================="
    echo "ÂÆû‰æãÁºñÂè∑: $instance_num"
    echo "ÂÆπÂô®ÂêçÁß∞: sub-store-$instance_num"
    echo "ÂêéÁ´Ø API Á´ØÂè£: $api_port"
    echo "HTTP-META Á´ØÂè£: $http_port"
    echo "ËÆøÈóÆË∑ØÂæÑ: /$access_path"
    echo "Êï∞ÊçÆÁõÆÂΩï: $data_dir"
    echo "=================================="
    echo ""
    
    local confirm
    read -e -p "Á°ÆËÆ§ÂºÄÂßãÂÆâË£ÖÔºü(y/n): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "Â∑≤ÂèñÊ∂àÂÆâË£Ö"
        break_end
        return 1
    fi
    
    # ÂàõÂª∫ÈÖçÁΩÆÁõÆÂΩï
    mkdir -p /root/sub-store-configs
    
    # ÂàõÂª∫Êï∞ÊçÆÁõÆÂΩï
    echo ""
    echo "Ê≠£Âú®ÂàõÂª∫Êï∞ÊçÆÁõÆÂΩï..."
    mkdir -p "$data_dir"
    
    # ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂
    local config_file="/root/sub-store-configs/store-$instance_num.yaml"
    echo "Ê≠£Âú®ÁîüÊàêÈÖçÁΩÆÊñá‰ª∂..."
    
    cat > "$config_file" << EOF
services:
  sub-store-$instance_num:
    image: xream/sub-store:http-meta
    container_name: sub-store-$instance_num
    restart: always
    network_mode: host
    environment:
      SUB_STORE_BACKEND_API_HOST: 127.0.0.1
      SUB_STORE_BACKEND_API_PORT: $api_port
      SUB_STORE_BACKEND_MERGE: true
      SUB_STORE_FRONTEND_BACKEND_PATH: /$access_path
      HOST: 127.0.0.1
    volumes:
      - $data_dir:/opt/app/data
EOF
    
    # ÂêØÂä®ÂÆπÂô®
    echo "Ê≠£Âú®ÂêØÂä® Sub-Store ÂÆû‰æã..."
    if docker compose -f "$config_file" up -d; then
        echo ""
        echo -e "${gl_lv}=========================================="
        echo "  Sub-Store ÂÆû‰æãÂÆâË£ÖÊàêÂäüÔºÅ"
        echo "==========================================${gl_bai}"
        echo ""
        echo -e "${gl_zi}ÂÆû‰æã‰ø°ÊÅØÔºö${gl_bai}"
        echo "  - ÂÆû‰æãÁºñÂè∑: $instance_num"
        echo "  - ÂÆπÂô®ÂêçÁß∞: sub-store-$instance_num"
        echo "  - ÊúçÂä°Á´ØÂè£: $api_portÔºàÂâçÂêéÁ´ØÂÖ±Áî®ÔºåÁõëÂê¨ 127.0.0.1Ôºâ"
        echo "  - ËÆøÈóÆË∑ØÂæÑ: /$access_path"
        echo "  - Êï∞ÊçÆÁõÆÂΩï: $data_dir"
        echo "  - ÈÖçÁΩÆÊñá‰ª∂: $config_file"
        echo ""
        echo -e "${gl_huang}‚ö†Ô∏è  ÈáçË¶ÅÊèêÁ§∫Ôºö${gl_bai}"
        echo "  Ê≠§ÂÆû‰æã‰ªÖÁõëÂê¨Êú¨Âú∞ 127.0.0.1ÔºåÊó†Ê≥ïÁõ¥Êé•ÈÄöËøáIPËÆøÈóÆÔºÅ"
        echo "  ÂøÖÈ°ªÈÖçÁΩÆ Cloudflare Tunnel ÂêéÊâçËÉΩ‰ΩøÁî®„ÄÇ"
        echo ""
        
        # ÁîüÊàê Cloudflare Tunnel ÈÖçÁΩÆ
        local cf_tunnel_conf="/root/sub-store-cf-tunnel-$instance_num.yaml"
        cat > "$cf_tunnel_conf" << CFEOF
# Cloudflare Tunnel ÈÖçÁΩÆ
# ‰ΩøÁî®ËØ¥ÊòéÔºö
#   1. ÂÆâË£Ö cloudflared: 
#      wget https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64
#      chmod +x cloudflared-linux-amd64 && mv cloudflared-linux-amd64 /usr/local/bin/cloudflared
#   2. ÁôªÂΩï: cloudflared tunnel login
#   3. ÂàõÂª∫ÈößÈÅì: cloudflared tunnel create sub-store-$instance_num
#   4. ‰øÆÊîπ‰∏ãÈù¢ÁöÑ tunnel Âíå credentials-file
#   5. ÈÖçÁΩÆË∑ØÁî±: cloudflared tunnel route dns <TUNNEL_ID> sub.‰Ω†ÁöÑÂüüÂêç.com
#   6. ÂêØÂä®: cloudflared tunnel --config $cf_tunnel_conf run

tunnel: <TUNNEL_ID>  # ÊõøÊç¢‰∏∫‰Ω†ÁöÑ Tunnel ID
credentials-file: /root/.cloudflared/<TUNNEL_ID>.json  # ÊõøÊç¢‰∏∫‰Ω†ÁöÑÂá≠ËØÅÊñá‰ª∂Ë∑ØÂæÑ

ingress:
  # ÂêéÁ´Ø API Ë∑ØÁî±ÔºàÂøÖÈ°ªÂú®ÂâçÈù¢ÔºåÊõ¥ÂÖ∑‰ΩìÁöÑËßÑÂàôÔºâ
  - hostname: sub.‰Ω†ÁöÑÂüüÂêç.com
    path: /$access_path
    service: http://127.0.0.1:$api_port
  
  # ÂâçÁ´ØÈ°µÈù¢Ë∑ØÁî±ÔºàÈÄöÈÖçÊâÄÊúâÂÖ∂‰ªñËØ∑Ê±ÇÔºå‰∏éÂêéÁ´ØÂÖ±Áî®Á´ØÂè£Ôºâ
  - hostname: sub.‰Ω†ÁöÑÂüüÂêç.com
    service: http://127.0.0.1:$api_port
  
  # ÈªòËÆ§ËßÑÂàôÔºàÂøÖÈ°ªÔºâ
  - service: http_status:404
CFEOF
        
        echo -e "${gl_kjlan}„ÄêCloudflare Tunnel ÈÖçÁΩÆÊñá‰ª∂„Äë${gl_bai}"
        echo ""
        echo "  ÈÖçÁΩÆÊ®°ÊùøÂ∑≤ÁîüÊàê: $cf_tunnel_conf"
        echo ""
        echo "  Êé•‰∏ãÊù•Â∞ÜÂºïÂØº‰Ω†ËøõË°åËá™Âä®ÈÖçÁΩÆ"
        echo ""
        
        echo -e "${gl_zi}Â∏∏Áî®ÂëΩ‰ª§Ôºö${gl_bai}"
        echo "  - Êü•ÁúãÊó•Âøó: docker logs sub-store-$instance_num"
        echo "  - ÂÅúÊ≠¢ÊúçÂä°: docker compose -f $config_file down"
        echo "  - ÈáçÂêØÊúçÂä°: docker compose -f $config_file restart"
        echo ""
        
        # ‰∫§‰∫íÂºèÈÖçÁΩÆÂêëÂØº
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_huang}üìå Êé•‰∏ãÊù•ÈúÄË¶ÅÈÖçÁΩÆ Cloudflare Tunnel ÊâçËÉΩ‰ΩøÁî®${gl_bai}"
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo ""
        echo "ËØ∑ÈÄâÊã©Ôºö"
        echo "1. Á´ãÂç≥ÈÖçÁΩÆ Cloudflare TunnelÔºàÊé®ËçêÔºâ"
        echo "2. Ë∑≥ËøáÈÖçÁΩÆÔºàÁ®çÂêéÊâãÂä®ÈÖçÁΩÆÔºâ"
        echo ""
        
        local proxy_choice
        read -e -p "ËØ∑ÈÄâÊã© [1-2]: " proxy_choice
        
        case "$proxy_choice" in
            1)
                # Cloudflare Tunnel ÈÖçÁΩÆÂêëÂØº
                configure_cf_tunnel "$instance_num" "$http_port" "$api_port" "$access_path" "$cf_tunnel_conf"
                ;;
            2)
                echo ""
                echo -e "${gl_huang}Â∑≤Ë∑≥ËøáÈÖçÁΩÆ${gl_bai}"
                echo "Á®çÂêéÂèØÊâãÂä®ÈÖçÁΩÆÔºåÈÖçÁΩÆÊñá‰ª∂‰Ωç‰∫éÔºö"
                echo "  - CF Tunnel: $cf_tunnel_conf"
                echo ""
                ;;
            *)
                echo ""
                echo -e "${gl_huang}Êó†ÊïàÈÄâÊã©ÔºåÂ∑≤Ë∑≥ËøáÈÖçÁΩÆ${gl_bai}"
                ;;
        esac
    else
        echo -e "${gl_hong}ÂêØÂä®Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÈÖçÁΩÆÂíåÊó•Âøó${gl_bai}"
        break_end
        return 1
    fi
    
    break_end
}

# Cloudflare Tunnel ÈÖçÁΩÆÂêëÂØº

# Cloudflare Tunnel ÈÖçÁΩÆÂêëÂØº
configure_cf_tunnel() {
    local instance_num=$1
    local http_port=$2
    local api_port=$3
    local access_path=$4
    local cf_tunnel_conf=$5
    
    clear
    echo -e "${gl_kjlan}=================================="
    echo "  Cloudflare Tunnel ÈÖçÁΩÆÂêëÂØº"
    echo "==================================${gl_bai}"
    echo ""
    
    # Ê£ÄÊü• cloudflared ÊòØÂê¶ÂÆâË£Ö
    if ! command -v cloudflared &>/dev/null; then
        echo -e "${gl_huang}cloudflared Êú™ÂÆâË£Ö${gl_bai}"
        echo ""
        read -e -p "ÊòØÂê¶Áé∞Âú®ÂÆâË£Ö cloudflaredÔºü(Y/N): " install_cf
        
        case "$install_cf" in
            [Yy])
                echo ""
                echo "Ê≠£Âú®‰∏ãËΩΩ cloudflared..."
                
                local cpu_arch=$(uname -m)
                local download_url
                
                case "$cpu_arch" in
                    x86_64)
                        download_url="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64"
                        ;;
                    aarch64)
                        download_url="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64"
                        ;;
                    *)
                        echo -e "${gl_hong}‰∏çÊîØÊåÅÁöÑÊû∂ÊûÑ: $cpu_arch${gl_bai}"
                        break_end
                        return 1
                        ;;
                esac
                
                wget -O /usr/local/bin/cloudflared "$download_url"
                chmod +x /usr/local/bin/cloudflared
                
                if [ $? -eq 0 ]; then
                    echo -e "${gl_lv}‚úÖ cloudflared ÂÆâË£ÖÊàêÂäü${gl_bai}"
                else
                    echo -e "${gl_hong}‚ùå cloudflared ÂÆâË£ÖÂ§±Ë¥•${gl_bai}"
                    break_end
                    return 1
                fi
                ;;
            *)
                echo "Â∑≤ÂèñÊ∂àÔºåËØ∑ÊâãÂä®ÂÆâË£Ö cloudflared ÂêéÈÖçÁΩÆ"
                break_end
                return 1
                ;;
        esac
    else
        echo -e "${gl_lv}‚úÖ cloudflared Â∑≤ÂÆâË£Ö${gl_bai}"
    fi
    
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 1/5] Cloudflare Ë¥¶Êà∑ÁôªÂΩï${gl_bai}"
    echo ""
    echo "Âç≥Â∞ÜÊâìÂºÄÊµèËßàÂô®ËøõË°å Cloudflare ÁôªÂΩï..."
    echo -e "${gl_huang}ËØ∑Âú®ÊµèËßàÂô®‰∏≠ÂÆåÊàêÊéàÊùÉ${gl_bai}"
    echo ""
    read -e -p "ÊåâÂõûËΩ¶ÁªßÁª≠..."
    
    cloudflared tunnel login
    
    if [ $? -ne 0 ]; then
        echo -e "${gl_hong}‚ùå ÁôªÂΩïÂ§±Ë¥•${gl_bai}"
        break_end
        return 1
    fi
    
    echo -e "${gl_lv}‚úÖ ÁôªÂΩïÊàêÂäü${gl_bai}"
    
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 2/5] ÂàõÂª∫ÈößÈÅì${gl_bai}"
    echo ""
    
    local tunnel_name="sub-store-$instance_num"
    echo "ÈößÈÅìÂêçÁß∞: $tunnel_name"
    
    cloudflared tunnel create "$tunnel_name"
    
    if [ $? -ne 0 ]; then
        echo -e "${gl_hong}‚ùå ÂàõÂª∫ÈößÈÅìÂ§±Ë¥•${gl_bai}"
        break_end
        return 1
    fi
    
    # Ëé∑Âèñ tunnel ID
    local tunnel_id=$(cloudflared tunnel list | grep "$tunnel_name" | awk '{print $1}')
    
    if [ -z "$tunnel_id" ]; then
        echo -e "${gl_hong}‚ùå Êó†Ê≥ïËé∑Âèñ tunnel ID${gl_bai}"
        break_end
        return 1
    fi
    
    echo -e "${gl_lv}‚úÖ ÈößÈÅìÂàõÂª∫ÊàêÂäü${gl_bai}"
    echo "Tunnel ID: $tunnel_id"
    
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 3/5] ËæìÂÖ•ÂüüÂêç${gl_bai}"
    echo ""
    
    local domain
    read -e -p "ËØ∑ËæìÂÖ•‰Ω†ÁöÑÂüüÂêçÔºàÂ¶Ç sub.example.comÔºâ: " domain
    
    if [ -z "$domain" ]; then
        echo -e "${gl_hong}ÂüüÂêç‰∏çËÉΩ‰∏∫Á©∫${gl_bai}"
        break_end
        return 1
    fi
    
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 4/5] ÈÖçÁΩÆ DNS Ë∑ØÁî±${gl_bai}"
    echo ""
    
    cloudflared tunnel route dns "$tunnel_id" "$domain"
    
    if [ $? -ne 0 ]; then
        echo -e "${gl_hong}‚ùå DNS ÈÖçÁΩÆÂ§±Ë¥•${gl_bai}"
        break_end
        return 1
    fi
    
    echo -e "${gl_lv}‚úÖ DNS ÈÖçÁΩÆÊàêÂäü${gl_bai}"
    
    echo ""
    echo -e "${gl_zi}[Ê≠•È™§ 5/5] ÁîüÊàêÂπ∂ÂêØÂä®ÈÖçÁΩÆ${gl_bai}"
    echo ""
    
    # ÁîüÊàêÊúÄÁªàÈÖçÁΩÆÊñá‰ª∂
    local final_cf_conf="/root/sub-store-cf-tunnel-$instance_num.yaml"
    cat > "$final_cf_conf" << CFEOF
tunnel: $tunnel_id
credentials-file: /root/.cloudflared/$tunnel_id.json

ingress:
  # ÂêéÁ´Ø API Ë∑ØÁî±ÔºàÂøÖÈ°ªÂú®ÂâçÈù¢ÔºåÊõ¥ÂÖ∑‰ΩìÁöÑËßÑÂàôÔºâ
  - hostname: $domain
    path: /$access_path
    service: http://127.0.0.1:$api_port
  
  # ÂâçÁ´ØÈ°µÈù¢Ë∑ØÁî±ÔºàÈÄöÈÖçÊâÄÊúâÂÖ∂‰ªñËØ∑Ê±ÇÔºå‰∏éÂêéÁ´ØÂÖ±Áî®Á´ØÂè£Ôºâ
  - hostname: $domain
    service: http://127.0.0.1:$api_port
  
  # ÈªòËÆ§ËßÑÂàôÔºàÂøÖÈ°ªÔºâ
  - service: http_status:404
CFEOF
    
    echo -e "${gl_lv}‚úÖ ÈÖçÁΩÆÊñá‰ª∂Â∑≤ÁîüÊàê: $final_cf_conf${gl_bai}"
    
    echo ""
    echo "Ê≠£Âú®ÂêØÂä® Cloudflare Tunnel..."
    
    # ÂàõÂª∫ systemd ÊúçÂä°
    cat > /etc/systemd/system/cloudflared-sub-store-$instance_num.service << SERVICEEOF
[Unit]
Description=Cloudflare Tunnel for Sub-Store Instance $instance_num
After=network.target

[Service]
Type=simple
ExecStart=/usr/local/bin/cloudflared tunnel --config $final_cf_conf run
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
SERVICEEOF
    
    systemctl daemon-reload
    systemctl enable cloudflared-sub-store-$instance_num
    systemctl start cloudflared-sub-store-$instance_num
    
    sleep 3
    
    if systemctl is-active --quiet cloudflared-sub-store-$instance_num; then
        echo -e "${gl_lv}‚úÖ Cloudflare Tunnel ÂêØÂä®ÊàêÂäü${gl_bai}"
        echo ""
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo -e "${gl_lv}üéâ ÈÖçÁΩÆÂÆåÊàêÔºÅ${gl_bai}"
        echo -e "${gl_kjlan}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${gl_bai}"
        echo ""
        echo -e "ËÆøÈóÆÂú∞ÂùÄ: ${gl_lv}https://$domain?api=https://$domain/$access_path${gl_bai}"
        echo ""
        echo "ÊúçÂä°ÁÆ°ÁêÜÔºö"
        echo "  - Êü•ÁúãÁä∂ÊÄÅ: systemctl status cloudflared-sub-store-$instance_num"
        echo "  - Êü•ÁúãÊó•Âøó: journalctl -u cloudflared-sub-store-$instance_num -f"
        echo "  - ÈáçÂêØÊúçÂä°: systemctl restart cloudflared-sub-store-$instance_num"
        echo ""
    else
        echo -e "${gl_hong}‚ùå Cloudflare Tunnel ÂêØÂä®Â§±Ë¥•${gl_bai}"
        echo "Êü•ÁúãÊó•Âøó: journalctl -u cloudflared-sub-store-$instance_num -n 50"
    fi
    
    break_end
}

# Êõ¥Êñ∞ÂÆû‰æã
update_substore_instance() {
    clear
    echo "=================================="
    echo "    Sub-Store ÂÆû‰æãÊõ¥Êñ∞"
    echo "=================================="
    echo ""
    
    local instances=($(get_substore_instances))
    
    if [ ${#instances[@]} -eq 0 ]; then
        echo -e "${gl_huang}Ê≤°ÊúâÂ∑≤ÈÉ®ÁΩ≤ÁöÑÂÆû‰æã${gl_bai}"
        break_end
        return 1
    fi
    
    echo -e "${gl_zi}Â∑≤ÈÉ®ÁΩ≤ÁöÑÂÆû‰æãÔºö${gl_bai}"
    for i in "${!instances[@]}"; do
        local instance_name="${instances[$i]}"
        local instance_num=$(echo "$instance_name" | sed 's/store-//')
        local container_name="sub-store-$instance_num"
        
        if docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
            echo -e "  $((i+1)). ${instance_name} ${gl_lv}[ËøêË°å‰∏≠]${gl_bai}"
        else
            echo -e "  $((i+1)). ${instance_name} ${gl_hong}[Â∑≤ÂÅúÊ≠¢]${gl_bai}"
        fi
    done
    echo "  $((${#instances[@]}+1)). Êõ¥Êñ∞ÊâÄÊúâÂÆû‰æã"
    echo ""
    
    local choice
    read -e -p "ËØ∑ÈÄâÊã©Ë¶ÅÊõ¥Êñ∞ÁöÑÂÆû‰æãÁºñÂè∑ÔºàËæìÂÖ• 0 ÂèñÊ∂àÔºâ: " choice
    
    if [ "$choice" == "0" ]; then
        echo "Â∑≤ÂèñÊ∂àÊõ¥Êñ∞"
        break_end
        return 1
    fi
    
    # Êõ¥Êñ∞ÊâÄÊúâÂÆû‰æã
    if [ "$choice" == "$((${#instances[@]}+1))" ]; then
        echo ""
        echo "ÂáÜÂ§áÊõ¥Êñ∞ÊâÄÊúâÂÆû‰æã..."
        local confirm
        read -e -p "Á°ÆËÆ§Êõ¥Êñ∞ÊâÄÊúâ ${#instances[@]} ‰∏™ÂÆû‰æãÔºü(y/n): " confirm
        if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
            echo "Â∑≤ÂèñÊ∂àÊõ¥Êñ∞"
            break_end
            return 1
        fi
        
        echo "Ê≠£Âú®ÊãâÂèñÊúÄÊñ∞ÈïúÂÉè..."
        docker pull xream/sub-store:http-meta
        
        for instance in "${instances[@]}"; do
            local config_file="/root/sub-store-configs/${instance}.yaml"
            local instance_num=$(echo "$instance" | sed 's/store-//')
            
            echo ""
            echo "Ê≠£Âú®Êõ¥Êñ∞ÂÆû‰æã: $instance"
            docker compose -f "$config_file" down
            docker compose -f "$config_file" up -d
            echo -e "${gl_lv}‚úÖ ÂÆû‰æã $instance Êõ¥Êñ∞ÂÆåÊàê${gl_bai}"
        done
        
        echo ""
        echo -e "${gl_lv}ÊâÄÊúâÂÆû‰æãÊõ¥Êñ∞ÂÆåÊàêÔºÅ${gl_bai}"
        break_end
        return 0
    fi
    
    # Êõ¥Êñ∞Âçï‰∏™ÂÆû‰æã
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt ${#instances[@]} ]; then
        echo -e "${gl_hong}Êó†ÊïàÁöÑÈÄâÊã©${gl_bai}"
        break_end
        return 1
    fi
    
    local instance_name="${instances[$((choice-1))]}"
    local config_file="/root/sub-store-configs/${instance_name}.yaml"
    local instance_num=$(echo "$instance_name" | sed 's/store-//')
    
    echo ""
    echo "ÂáÜÂ§áÊõ¥Êñ∞ÂÆû‰æã: $instance_name"
    local confirm
    read -e -p "Á°ÆËÆ§Êõ¥Êñ∞Ôºü(y/n): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "Â∑≤ÂèñÊ∂àÊõ¥Êñ∞"
        break_end
        return 1
    fi
    
    echo "Ê≠£Âú®ÊãâÂèñÊúÄÊñ∞ÈïúÂÉè..."
    docker pull xream/sub-store:http-meta
    
    echo "Ê≠£Âú®ÂÅúÊ≠¢ÂÆπÂô®..."
    docker compose -f "$config_file" down
    
    echo "Ê≠£Âú®ÂêØÂä®Êõ¥Êñ∞ÂêéÁöÑÂÆπÂô®..."
    docker compose -f "$config_file" up -d
    
    echo -e "${gl_lv}‚úÖ ÂÆû‰æã $instance_name Êõ¥Êñ∞ÂÆåÊàêÔºÅ${gl_bai}"
    
    break_end
}

# Âç∏ËΩΩÂÆû‰æã
uninstall_substore_instance() {
    clear
    echo "=================================="
    echo "    Sub-Store ÂÆû‰æãÂç∏ËΩΩ"
    echo "=================================="
    echo ""
    
    local instances=($(get_substore_instances))
    
    if [ ${#instances[@]} -eq 0 ]; then
        echo -e "${gl_huang}Ê≤°ÊúâÂ∑≤ÈÉ®ÁΩ≤ÁöÑÂÆû‰æã${gl_bai}"
        break_end
        return 1
    fi
    
    echo -e "${gl_zi}Â∑≤ÈÉ®ÁΩ≤ÁöÑÂÆû‰æãÔºö${gl_bai}"
    for i in "${!instances[@]}"; do
        local instance_name="${instances[$i]}"
        local instance_num=$(echo "$instance_name" | sed 's/store-//')
        local container_name="sub-store-$instance_num"
        
        if docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
            echo -e "  $((i+1)). ${instance_name} ${gl_lv}[ËøêË°å‰∏≠]${gl_bai}"
        else
            echo -e "  $((i+1)). ${instance_name} ${gl_hong}[Â∑≤ÂÅúÊ≠¢]${gl_bai}"
        fi
    done
    echo ""
    
    local choice
    read -e -p "ËØ∑ÈÄâÊã©Ë¶ÅÂç∏ËΩΩÁöÑÂÆû‰æãÁºñÂè∑ÔºàËæìÂÖ• 0 ÂèñÊ∂àÔºâ: " choice
    
    if [ "$choice" == "0" ]; then
        echo "Â∑≤ÂèñÊ∂àÂç∏ËΩΩ"
        break_end
        return 1
    fi
    
    if ! [[ "$choice" =~ ^[0-9]+$ ]] || [ "$choice" -lt 1 ] || [ "$choice" -gt ${#instances[@]} ]; then
        echo -e "${gl_hong}Êó†ÊïàÁöÑÈÄâÊã©${gl_bai}"
        break_end
        return 1
    fi
    
    local instance_name="${instances[$((choice-1))]}"
    local config_file="/root/sub-store-configs/${instance_name}.yaml"
    local instance_num=$(echo "$instance_name" | sed 's/store-//')
    
    echo ""
    echo -e "${gl_huang}Â∞ÜË¶ÅÂç∏ËΩΩÂÆû‰æã: $instance_name${gl_bai}"
    
    local delete_data
    read -e -p "ÊòØÂê¶ÂêåÊó∂Âà†Èô§Êï∞ÊçÆÁõÆÂΩïÔºü(y/n): " delete_data
    echo ""
    
    local confirm
    read -e -p "Á°ÆËÆ§Âç∏ËΩΩÔºü(y/n): " confirm
    if [[ ! "$confirm" =~ ^[Yy]$ ]]; then
        echo "Â∑≤ÂèñÊ∂àÂç∏ËΩΩ"
        break_end
        return 1
    fi
    
    echo "Ê≠£Âú®ÂÅúÊ≠¢Âπ∂Âà†Èô§ÂÆπÂô®..."
    docker compose -f "$config_file" down
    
    if [[ "$delete_data" =~ ^[Yy]$ ]]; then
        # ‰ªéÈÖçÁΩÆÊñá‰ª∂‰∏≠ÊèêÂèñÊï∞ÊçÆÁõÆÂΩï
        local data_dir=$(grep -A 1 "volumes:" "$config_file" | tail -n 1 | awk -F':' '{print $1}' | xargs)
        if [ -n "$data_dir" ] && [ -d "$data_dir" ]; then
            echo "Ê≠£Âú®Âà†Èô§Êï∞ÊçÆÁõÆÂΩï: $data_dir"
            rm -rf "$data_dir"
        fi
    fi
    
    echo "Ê≠£Âú®Âà†Èô§ÈÖçÁΩÆÊñá‰ª∂..."
    rm -f "$config_file"
    
    # Âà†Èô§Áõ∏ÂÖ≥ÈÖçÁΩÆÊ®°Êùø
    rm -f "/root/sub-store-nginx-$instance_num.conf"
    rm -f "/root/sub-store-cf-tunnel-$instance_num.yaml"
    
    echo -e "${gl_lv}‚úÖ ÂÆû‰æã $instance_name Â∑≤ÊàêÂäüÂç∏ËΩΩ${gl_bai}"
    
    break_end
}

# ÂàóÂá∫ÊâÄÊúâÂÆû‰æã
list_substore_instances() {
    clear
    echo "=================================="
    echo "    Â∑≤ÈÉ®ÁΩ≤ÁöÑ Sub-Store ÂÆû‰æã"
    echo "=================================="
    echo ""
    
    local instances=($(get_substore_instances))
    
    if [ ${#instances[@]} -eq 0 ]; then
        echo -e "${gl_huang}Ê≤°ÊúâÂ∑≤ÈÉ®ÁΩ≤ÁöÑÂÆû‰æã${gl_bai}"
        break_end
        return 1
    fi
    
    for instance in "${instances[@]}"; do
        local config_file="/root/sub-store-configs/${instance}.yaml"
        local instance_num=$(echo "$instance" | sed 's/store-//')
        local container_name="sub-store-$instance_num"
        
        echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
        echo "ÂÆû‰æãÁºñÂè∑: $instance_num"
        
        # Ê£ÄÊü•ÂÆπÂô®Áä∂ÊÄÅ
        if docker ps --format '{{.Names}}' | grep -q "^${container_name}$"; then
            echo -e "  Áä∂ÊÄÅ: ${gl_lv}ËøêË°å‰∏≠${gl_bai}"
        else
            echo -e "  Áä∂ÊÄÅ: ${gl_hong}Â∑≤ÂÅúÊ≠¢${gl_bai}"
        fi
        
        # ÊèêÂèñÈÖçÁΩÆ‰ø°ÊÅØ
        if [ -f "$config_file" ]; then
            local http_port=$(grep "PORT:" "$config_file" | awk '{print $2}')
            local api_port=$(grep "SUB_STORE_BACKEND_API_PORT:" "$config_file" | awk '{print $2}')
            local access_path=$(grep "SUB_STORE_FRONTEND_BACKEND_PATH:" "$config_file" | awk '{print $2}')
            local data_dir=$(grep -A 1 "volumes:" "$config_file" | tail -n 1 | awk -F':' '{print $1}' | xargs)
            
            echo "  ÂÆπÂô®ÂêçÁß∞: $container_name"
            echo "  ÂâçÁ´ØÁ´ØÂè£: $http_port (127.0.0.1)"
            echo "  ÂêéÁ´ØÁ´ØÂè£: $api_port (127.0.0.1)"
            echo "  ËÆøÈóÆË∑ØÂæÑ: $access_path"
            echo "  Êï∞ÊçÆÁõÆÂΩï: $data_dir"
            echo "  ÈÖçÁΩÆÊñá‰ª∂: $config_file"
        fi
        
        echo ""
    done
    echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    
    break_end
}

# Sub-Store ‰∏ªËèúÂçï
manage_substore() {
    while true; do
        clear
        echo "=================================="
        echo "   Sub-Store Â§öÂÆû‰æãÁÆ°ÁêÜ"
        echo "=================================="
        echo ""
        echo "1. ÂÆâË£ÖÊñ∞ÂÆû‰æã"
        echo "2. Êõ¥Êñ∞ÂÆû‰æã"
        echo "3. Âç∏ËΩΩÂÆû‰æã"
        echo "4. Êü•ÁúãÂ∑≤ÈÉ®ÁΩ≤ÂÆû‰æã"
        echo "0. ËøîÂõû‰∏ªËèúÂçï"
        echo "=================================="
        read -e -p "ËØ∑ÈÄâÊã©Êìç‰Ωú [0-4]: " choice
        
        case $choice in
            1)
                install_substore_instance
                ;;
            2)
                update_substore_instance
                ;;
            3)
                uninstall_substore_instance
                ;;
            4)
                list_substore_instances
                ;;
            0)
                return
                ;;
            *)
                echo "Êó†ÊïàÁöÑÈÄâÊã©"
                sleep 2
                ;;
        esac
    done
}


#=============================================================================
# ËÑöÊú¨ÂÖ•Âè£
#=============================================================================

main() {
    check_root
    print_repo_info_once
    
    # ÂëΩ‰ª§Ë°åÂèÇÊï∞ÊîØÊåÅ
    if [ "$1" = "-i" ] || [ "$1" = "--install" ]; then
        install_xanmod_kernel
        if [ $? -eq 0 ]; then
            echo ""
            echo "ÂÆâË£ÖÂÆåÊàêÂêéÔºåËØ∑ÈáçÂêØÁ≥ªÁªü‰ª•Âä†ËΩΩÊñ∞ÂÜÖÊ†∏"
        fi
        exit 0
    fi
    
    # ‰∫§‰∫íÂºèËèúÂçï
    while true; do
        show_main_menu
    done
}

# ÊâßË°å‰∏ªÂáΩÊï∞
main "$@"
